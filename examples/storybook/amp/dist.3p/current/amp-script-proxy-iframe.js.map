{
  "version": 3,
  "sources": ["../../3p/amp-script-proxy-iframe.js"],
  "sourcesContent": ["/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * See IframeWorker within `worker-dom` for the iframe proxy contract.\n */\n\n/**\n * @enum {string}\n */\nconst MESSAGE_TYPE = {\n  iframeReady: 'iframe-ready',\n  workerReady: 'worker-ready',\n  init: 'init-worker',\n  onmessage: 'onmessage',\n  onerror: 'onerror',\n  onmessageerror: 'onmessageerror',\n  postMessage: 'postMessage',\n};\n\nlet parentOrigin = '*';\n\n/**\n * @param {MessageType} type\n * @param {*} message\n */\nfunction send(type, message) {\n  if (type !== MESSAGE_TYPE.iframeReady && parentOrigin === '*') {\n    throw new Error('Broadcast banned except for iframe-ready message.');\n  }\n  parent./*OK*/ postMessage({type, message}, parentOrigin);\n}\n\n/**\n *\n * @param {MessageType} type\n * @param {*} handler\n */\nfunction listen(type, handler) {\n  window.addEventListener('message', (event) => {\n    if (event.source !== parent) {\n      return;\n    }\n    parentOrigin = event.origin;\n\n    if (event.data.type === type) {\n      handler(event.data);\n    }\n  });\n}\n\n// Send initialization.\nsend(MESSAGE_TYPE.iframeReady);\n\nlet worker = null;\n// Listen for Worker Init.\nlisten(MESSAGE_TYPE.init, ({code}) => {\n  if (worker) {\n    return;\n  }\n  worker = new Worker(URL.createObjectURL(new Blob([code])));\n\n  // Proxy messages Worker to parent Window.\n  worker.onmessage = (e) => send(MESSAGE_TYPE.onmessage, e.data);\n  worker.onmessageerror = (e) => send(MESSAGE_TYPE.onmessageerror, e.data);\n  worker.onerror = (e) =>\n    send(MESSAGE_TYPE.onerror, {\n      lineno: e.lineno,\n      colno: e.colno,\n      message: e.message,\n      filename: e.filename,\n    });\n\n  // Proxy message from parent Window to Worker.\n  listen(MESSAGE_TYPE./*OK*/ postMessage, ({message}) =>\n    worker./*OK*/ postMessage(message)\n  );\n\n  send(MESSAGE_TYPE.workerReady);\n});\n"],
  "mappings": ";;AAuBA,MAAM,eAAe;IACnB,aAAa;IACb,aAAa;IACb,MAAM;IACN,WAAW;IACX,SAAS;IACT,gBAAgB;IAChB,aAAa;;AAGf,MAAI,eAAe;AAMnB,gBAAc,MAAM,SAAS;AAC3B,QAAI,SAAS,aAAa,eAAe,iBAAiB,KAAK;AAC7D,YAAM,IAAI,MAAM;;AAElB,WAAc,YAAY;MAAC;MAAM;OAAU;;AAQ7C,kBAAgB,MAAM,SAAS;AAC7B,WAAO,iBAAiB,WAAW,SAAC,OAAU;AAC5C,UAAI,MAAM,WAAW,QAAQ;AAC3B;;AAEF,qBAAe,MAAM;AAErB,UAAI,MAAM,KAAK,SAAS,MAAM;AAC5B,gBAAQ,MAAM;;;;AAMpB,OAAK,aAAa;AAElB,MAAI,SAAS;AAEb,SAAO,aAAa,MAAM,SAAA,MAAY;AAAA,QAAV,OAAU,KAAV;AAC1B,QAAI,QAAQ;AACV;;AAEF,aAAS,IAAI,OAAO,IAAI,gBAAgB,IAAI,KAAK,CAAC;AAGlD,WAAO,YAAY,SAAC,GAAD;AAAA,aAAO,KAAK,aAAa,WAAW,EAAE;;AACzD,WAAO,iBAAiB,SAAC,GAAD;AAAA,aAAO,KAAK,aAAa,gBAAgB,EAAE;;AACnE,WAAO,UAAU,SAAC,GAAD;AAAA,aACf,KAAK,aAAa,SAAS;QACzB,QAAQ,EAAE;QACV,OAAO,EAAE;QACT,SAAS,EAAE;QACX,UAAU,EAAE;;;AAIhB,WAAO,aAAoB,aAAa,SAAA,OAAA;AAAA,UAAE,UAAF,MAAE;AAAF,aACtC,OAAc,YAAY;;AAG5B,SAAK,aAAa;;",
  "names": []
}
