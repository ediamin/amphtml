{
  "version": 3,
  "sources": ["../../src/core/data-structures/promise.js", "../../src/core/constants/consent-state.js", "../../src/core/types/array.js", "../../src/core/types/object/json.js", "../../src/core/types/enum.js", "../../src/core/types/string/index.js", "../../src/core/types/object/index.js", "../../src/core/types/index.js", "../../src/core/error/message-helpers.js", "../../src/core/assert/base.js", "../../src/internal-version.js", "../../src/core/types/string/url.js", "../../src/mode.js", "../../src/config.js", "../../src/log.js", "../../extensions/amp-consent/0.1/consent-info.js", "../../build/amp-consent-0.1.css.js", "../../extensions/amp-consent/0.1/cmps.js", "../../extensions/amp-geo/0.1/amp-geo-in-group.js", "../../src/core/window/index.js", "../../src/service.js", "../../src/core/minified-mode.js", "../../src/core/assert/dev.js", "../../third_party/css-escape/css-escape.js", "../../src/core/dom/css-selectors.js", "../../src/core/dom/query.js", "../../src/dom.js", "../../src/service/extension-script.js", "../../src/element-service.js", "../../src/services.js", "../../src/json.js", "../../extensions/amp-consent/0.1/consent-config.js", "../../src/core/data-structures/observable.js", "../../extensions/amp-consent/0.1/consent-policy-manager.js", "../../src/core/data-structures/lru-cache.js", "../../src/url.js", "../../extensions/amp-consent/0.1/consent-state-manager.js", "../../src/event-helper.js", "../../src/static-template.js", "../../src/experiments/index.js", "../../src/style.js", "../../extensions/amp-consent/0.1/consent-ui.js", "../../src/core/window/interface.js", "../../src/cookies.js", "../../src/service/cid-api.js", "../../src/core/types/string/bytes.js", "../../src/core/types/string/base64.js", "../../src/service/cid-impl.js", "../../extensions/amp-consent/0.1/crc32.js", "../../extensions/amp-consent/0.1/linker.js", "../../extensions/amp-consent/0.1/linker-reader.js", "../../src/iframe-helper.js", "../../extensions/amp-consent/0.1/cookie-writer.js", "../../src/service/notification-ui-manager.js", "../../extensions/amp-consent/0.1/tcf-api-command-manager.js", "../../extensions/amp-consent/0.1/amp-consent.js"],
  "sourcesContent": ["/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet resolved;\n\n/**\n * Returns a cached resolved promise.\n * Babel converts direct calls to Promise.resolve() (with no arguments) into\n * calls to this.\n *\n * @return {!Promise<undefined>}\n */\nexport function resolvedPromise() {\n  if (resolved) {\n    return resolved;\n  }\n\n  // It's important that we call with `undefined` here, to prevent a transform\n  // recursion. If we didn't pass an arg, then the transformer would replace\n  // this callsite with a call to `resolvedPromise()`.\n  resolved = Promise.resolve(undefined);\n  return resolved;\n}\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /** Constructor. */\n  constructor() {\n    /** @const {!Promise<T>} */\n    this.promise = new /*OK*/ Promise((res, rej) => {\n      /** @const {function(T=)} */\n      this.resolve = res;\n      /** @const {function(*=)} */\n      this.reject = rej;\n    });\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise((resolve) => {\n    resolve(fn());\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!IThenable>=} opt_promises\n   */\n  constructor(opt_promises) {\n    /** @private @const {!Deferred} */\n    this.deferred_ = new Deferred();\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (const promise of opt_promises) {\n        this.add(promise);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!IThenable} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    promise.then(\n      (result) => {\n        if (this.count_ === countAtAdd) {\n          this.deferred_.resolve(result);\n        }\n      },\n      (error) => {\n        // Don't follow behavior of Promise.all and Promise.race error so that\n        // this will only reject when most recently added promise fails.\n        if (this.count_ === countAtAdd) {\n          this.deferred_.reject(error);\n        }\n      }\n    );\n    return this.deferred_.promise;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.deferred_.promise.then(opt_resolve, opt_reject);\n  }\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file will be imported by 3P scripts.\n\n/**\n * Possible consent policy state to proceed with.\n * @enum {number}\n */\nexport const CONSENT_POLICY_STATE = {\n  // Enum value has external dependency. Please do not change existing value.\n  // If new values are added, please notify the AMP for Ads team to assure\n  // correct Real Time Config behavior is maintained for Fast Fetch.\n  SUFFICIENT: 1,\n  INSUFFICIENT: 2,\n  UNKNOWN_NOT_REQUIRED: 3,\n  UNKNOWN: 4,\n};\n\n/**\n * Defines valid consent string types passed\n * in by consent iframe metadata.\n * @enum {number}\n */\nexport const CONSENT_STRING_TYPE = {\n  // Enum value has external dependency for metadata collection.\n  // It is up to the vendor to interpret an undefined CONSENT_STRING_TYPE.\n  TCF_V1: 1,\n  TCF_V2: 2,\n  US_PRIVACY_STRING: 3,\n};\n", "/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  return arrayLike ? Array.prototype.slice.call(arrayLike) : [];\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport const {isArray} = Array;\n\n/**\n * If the specified argument is an array, it's returned as is. If it's a\n * single item, the array containing this item is created and returned.\n *\n * The double-template pattern here solves a bug where CC can be passed a value\n * with declared type {string|!Array<string>} and return a value with a type of\n * {!Array<string|Array<string>>}.\n *\n * @param {!Array<T>|S} arrayOrSingleItem\n * @return {!Array<T>|!Array<S>}\n * @template S\n * @template T\n */\nexport function arrayOrSingleItemToArray(arrayOrSingleItem) {\n  return isArray(arrayOrSingleItem)\n    ? /** @type {!Array<T>} */ (arrayOrSingleItem)\n    : [/** @type {!S} */ (arrayOrSingleItem)];\n}\n\n/**\n * Compares if two arrays contains exactly same elements of same number\n * of same order. Note that it does NOT handle NaN case as expected.\n *\n * @param {!Array<T>} arr1\n * @param {!Array<T>} arr2\n * @return {boolean}\n * @template T\n */\nexport function areEqualOrdered(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Removes elements that shouldRemove returns true for from the array.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} shouldRemove\n * @return {!Array<T>}\n * @template T\n */\nexport function remove(array, shouldRemove) {\n  const removed = [];\n  let index = 0;\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (shouldRemove(item, i, array)) {\n      removed.push(item);\n    } else {\n      if (index < i) {\n        array[index] = item;\n      }\n      index++;\n    }\n  }\n  if (index < array.length) {\n    array.length = index;\n  }\n  return removed;\n}\n\n/**\n * Returns the index of the first element matching the predicate.\n * Like Array#findIndex.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {number}\n * @template T\n */\nexport function findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Converts the given iterator to an array.\n *\n * @param {!Iterator<T>} iterator\n * @return {Array<T>}\n * @template T\n */\nexport function fromIterator(iterator) {\n  const array = [];\n  for (let e = iterator.next(); !e.done; e = iterator.next()) {\n    array.push(e.value);\n  }\n  return array;\n}\n\n/**\n * Adds item to array if it is not already present.\n *\n * @param {Array<T>} array\n * @param {T} item\n * @return {boolean}\n * @template T\n */\nexport function pushIfNotExist(array, item) {\n  if (array.indexOf(item) < 0) {\n    array.push(item);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Removes the first matching item in the array. Returns `true` if the array\n * has changed.\n *\n * @param {!Array<T>} array\n * @param {T} item\n * @return {boolean}\n * @template T\n */\nexport function removeItem(array, item) {\n  const index = array.indexOf(item);\n  if (index == -1) {\n    return false;\n  }\n  array.splice(index, 1);\n  return true;\n}\n\n/**\n * Returns the last item in an array.\n *\n * @param {Array<T>} array\n * @template T\n * @return {?T}\n */\nexport function lastItem(array) {\n  return array[array.length - 1];\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isArray} from '../array';\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\n// NOTE Type are changed to {*} because of\n// https://github.com/google/closure-compiler/issues/1999\n\n/**\n * JSON scalar. It's either string, number or boolean.\n * @typedef {string|number|boolean|null}\n */\nlet JSONScalarDef;\n\n/**\n * JSON object. It's a map with string keys and JSON values.\n * @typedef {!Object<string, ?*>} (* should be JSONValueDef)\n */\nlet JSONObjectDef;\n\n/**\n * JSON array. It's an array with JSON values.\n * @typedef {!Array<?*>} (* should be JSONValueDef)\n */\nlet JSONArrayDef;\n\n/**\n * JSON value. It's either a scalar, an object or an array.\n * @typedef {!JSONScalarDef|!JSONObjectDef|!JSONArrayDef}\n */\nlet JSONValueDef;\n\n/**\n * @typedef {{\n *   YOU_MUST_USE: string,\n *   jsonLiteral: function(),\n *   TO_MAKE_THIS_TYPE: string,\n * }}\n */\nlet InternalJsonLiteralTypeDef;\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {string} json JSON string to parse\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */ (JSON.parse(json));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {string} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    opt_onFailed?.(e);\n    return null;\n  }\n}\n\n/**\n * Deeply checks strict equality of items in nested arrays and objects.\n *\n * @param {JSONValueDef} a\n * @param {JSONValueDef} b\n * @param {number} depth The maximum depth. Must be finite.\n * @return {boolean}\n * @throws {Error} If depth argument is not finite.\n */\nexport function deepEquals(a, b, depth = 5) {\n  if (!isFinite(depth) || depth < 0) {\n    throw new Error('Invalid depth: ' + depth);\n  }\n  if (a === b) {\n    return true;\n  }\n  /** @type {!Array<{a: JSONValueDef, b: JSONValueDef, depth: number}>} */\n  const queue = [{a, b, depth}];\n  while (queue.length > 0) {\n    const {a, b, depth} = queue.shift();\n    // Only check deep equality if depth > 0.\n    if (depth > 0) {\n      if (typeof a !== typeof b) {\n        return false;\n      } else if (isArray(a) && isArray(b)) {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          queue.push({a: a[i], b: b[i], depth: depth - 1});\n        }\n        continue;\n      } else if (a && b && typeof a === 'object' && typeof b === 'object') {\n        const keysA = Object.keys(a);\n        const keysB = Object.keys(b);\n        if (keysA.length !== keysB.length) {\n          return false;\n        }\n        for (const k of keysA) {\n          queue.push({a: a[k], b: b[k], depth: depth - 1});\n        }\n        continue;\n      }\n    }\n    // If we get here, then depth == 0 or (a, b) are primitives.\n    if (a !== b) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * This helper function handles configurations specified in a JSON format.\n *\n * It allows the configuration is to be written in plain JS (which has better\n * dev ergonomics like comments and trailing commas), and allows the\n * configuration to be transformed into an efficient JSON-parsed representation\n * in the dist build. See https://v8.dev/blog/cost-of-javascript-2019#json\n *\n * @param {!Object} obj\n * @return {!JsonObject}\n */\nexport function jsonConfiguration(obj) {\n  return /** @type {!JsonObject} */ (obj);\n}\n\n/**\n * This converts an Object into a suitable type to be used in `includeJsonLiteral`.\n * This doesn't actually do any conversion, it only changes the closure type.\n *\n * @param {?JSONValueDef} value\n * @return {!InternalJsonLiteralTypeDef}\n */\nexport function jsonLiteral(value) {\n  return /** @type {!InternalJsonLiteralTypeDef} */ (value);\n}\n\n/**\n * Allows inclusion of a variable (that's wrapped in a jsonLiteral\n * call) to be included inside a jsonConfiguration.\n *\n * @param {!InternalJsonLiteralTypeDef} value\n * @return {*}\n */\nexport function includeJsonLiteral(value) {\n  return value;\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks whether `val` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} val\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, val) {\n  for (const k in enumObj) {\n    if (enumObj[k] === val) {\n      return true;\n    }\n  }\n  return false;\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.includes.\n * @param {string} string\n * @param {string} substring\n * @param {number=} start\n * @return {boolean}\n */\nexport function includes(string, substring, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n  if (start + substring.length > string.length) {\n    return false;\n  }\n  return string.indexOf(substring, start) !== -1;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n * @return {string}\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n\n/**\n * Trims a string on the end, removing whitespace characters.\n * @param {string} str  A string to trim.\n * @return {string} The string, with trailing whitespace removed.\n */\nexport function trimEnd(str) {\n  // TODO(sparhami) Does this get inlined for an ES2019 build?\n  if (str.trimEnd) {\n    return str.trimEnd();\n  }\n\n  return ('_' + str).trim().slice(1);\n}\n\n/**\n * Trims any leading whitespace from a string.\n * @param {string} str  A string to trim.\n * @return {string} The string, with leading whitespace removed.\n */\nexport function trimStart(str) {\n  if (str.trimStart) {\n    return str.trimStart();\n  }\n\n  return (str + '_').trim().slice(0, -1);\n}\n\n/**\n * Wrapper around String.replace that handles asynchronous resolution.\n * @param {string} str\n * @param {RegExp} regex\n * @param {Function|string} replacer\n * @return {!Promise<string>}\n */\nexport function asyncStringReplace(str, regex, replacer) {\n  if (isString(replacer)) {\n    return Promise.resolve(str.replace(regex, replacer));\n  }\n  const stringBuilder = [];\n  let lastIndex = 0;\n\n  str.replace(regex, function (match) {\n    // String.prototype.replace will pass 3 to n number of arguments to the\n    // callback function based on how many capture groups the regex may or may\n    // not contain. We know that the match will always be first, and the\n    // index will always be second to last.\n    const matchIndex = arguments[arguments.length - 2];\n    stringBuilder.push(str.slice(lastIndex, matchIndex));\n    lastIndex = matchIndex + match.length;\n\n    // Store the promise in it's eventual string position.\n    const replacementPromise = replacer.apply(null, arguments);\n    stringBuilder.push(replacementPromise);\n  });\n  stringBuilder.push(str.slice(lastIndex));\n\n  return Promise.all(stringBuilder).then((resolved) => resolved.join(''));\n}\n\n/**\n * Pads the beginning of a string with a substring to a target length.\n * @param {string} s\n * @param {number} targetLength\n * @param {string} padString\n * @return {string}\n */\nexport function padStart(s, targetLength, padString) {\n  if (s.length >= targetLength) {\n    return s;\n  }\n  targetLength = targetLength - s.length;\n  let padding = padString;\n  while (targetLength > padding.length) {\n    padding += padString;\n  }\n  return padding.slice(0, targetLength) + s;\n}\n\n/**\n * Tests if a value is a string.\n * @param {?} s\n * @return {boolean}\n */\nexport function isString(s) {\n  return typeof s == 'string';\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst {hasOwnProperty: hasOwn_, toString: toString_} = Object.prototype;\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString_.call(value) === '[object Object]';\n}\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {d, s, t} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    for (const key of Object.keys(s)) {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          continue;\n        }\n      }\n      t[key] = newValue;\n    }\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * @param {!Object|null|undefined} o1\n * @param {!Object|null|undefined} o2\n * @return {boolean}\n */\nexport function objectsEqualShallow(o1, o2) {\n  if (o1 == null || o2 == null) {\n    // Null is only equal to null, and undefined to undefined.\n    return o1 === o2;\n  }\n\n  for (const k in o1) {\n    if (o1[k] !== o2[k]) {\n      return false;\n    }\n  }\n  for (const k in o2) {\n    if (o2[k] !== o1[k]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @param {T} obj\n * @param {string} prop\n * @param {function(T, string):R} factory\n * @return {R}\n * @template T,R\n */\nexport function memo(obj, prop, factory) {\n  let result = /** @type {?R} */ (obj[prop]);\n  if (result === undefined) {\n    result = factory(obj, prop);\n    obj[prop] = result;\n  }\n  return result;\n}\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = map();\n  for (const k in obj) {\n    if (!hasOwn(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object or array, the returned\n * value will be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (const part of parts) {\n    if (\n      part &&\n      value &&\n      value[part] !== undefined &&\n      typeof value == 'object' &&\n      hasOwn(value, part)\n    ) {\n      value = value[part];\n      continue;\n    }\n    value = undefined;\n    break;\n  }\n  return value;\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Export all type-checking helpers for convenience\nexport {isArray} from './array';\nexport {isEnumValue} from './enum';\nexport {isString} from './string';\nexport {isObject} from './object';\n\n/**\n * Determines if value is an ELement\n * @param {*} value\n * @return {boolean}\n */\nexport function isElement(value) {\n  return value?.nodeType == /* Node.ELEMENT_NODE */ 1;\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isElement} from '../types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n/**\n * Converts an element to a readable string; all other types are unchanged.\n * TODO(rcebulko): Unify with log.js\n * @param {*} val\n * @return {*}\n */\nexport function elementStringOrPassThru(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (isElement(val)) {\n    val = /** @type {Element} */ (val);\n    return val.tagName.toLowerCase() + (val.id ? `#${val.id}` : '');\n  }\n  return val;\n}\n\n/**\n * Tests if an error message contains the user sentinel.\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * Strips the user error sentinel from an error message.\n * @param {string} message\n * @return {string} The new message without USER_ERROR_SENTINEL\n */\nexport function stripUserError(message) {\n  return message.replace(USER_ERROR_SENTINEL, '');\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {elementStringOrPassThru} from '../error/message-helpers';\nimport {includes} from '../types/string';\nimport {isArray, isElement, isString} from '../types';\nimport {remove} from '../types/array';\n\n/**\n * @fileoverview This file provides the base implementation for assertion\n * functions. Most files should never import from this; instead, import from\n * `dev` or `user`. It is also used by the Log class for its assertions.\n */\n\n/**\n * A base assertion function, provided to various assertion helpers.\n * @typedef {function(?, string=, ...*):?|function(?, !Array<*>)}\n */\nexport let AssertionFunctionDef;\n\n/**\n * Throws an error if the second argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n * @param {?string} sentinel\n * @param {T} shouldBeTruthy\n * @param {string} opt_message\n * @param {...*} var_args Arguments substituted into %s in the message\n * @return {T}\n * @template T\n * @throws {Error} when shouldBeTruthy is not truthy.\n */\nexport function assert(\n  sentinel,\n  shouldBeTruthy,\n  opt_message = 'Assertion failed',\n  var_args\n) {\n  if (shouldBeTruthy) {\n    return shouldBeTruthy;\n  }\n\n  // Include the sentinel string if provided and not already present\n  if (sentinel && !includes(opt_message, sentinel)) {\n    opt_message += sentinel;\n  }\n\n  // Skip the first 3 arguments to isolate format params\n  // const messageArgs = Array.prototype.slice.call(arguments, 3);\n  // Index at which message args start\n  let i = 3;\n\n  // Substitute provided values into format string in message\n  const splitMessage = opt_message.split('%s');\n  let message = splitMessage.shift();\n  const messageArray = [message];\n\n  while (splitMessage.length) {\n    const subValue = arguments[i++];\n    const nextConstant = splitMessage.shift();\n\n    message += elementStringOrPassThru(subValue) + nextConstant;\n    messageArray.push(subValue, nextConstant.trim());\n  }\n\n  const error = new Error(message);\n  error.messageArray = remove(messageArray, (x) => x !== '');\n  // __AMP_REPORT_ERROR is installed globally per window in the entry point in\n  // AMP documents. It may not be present for Bento/Preact elements on non-AMP\n  // pages.\n  self.__AMP_REPORT_ERROR?.(error);\n  throw error;\n}\n\n/**\n * Asserts types, backbone of `assertNumber`, `assertString`, etc.\n *\n * It understands array-based \"id\"-contracted messages.\n *\n * Otherwise creates a sprintf syntax string containing the optional message or the\n * default. The `subject` of the assertion is added at the end.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {T} subject\n * @param {*} shouldBeTruthy\n * @param {string} defaultMessage\n * @param {!Array<*>|string=} opt_message\n * @return {T}\n * @template T\n * @private\n */\nfunction assertType_(\n  assertFn,\n  subject,\n  shouldBeTruthy,\n  defaultMessage,\n  opt_message\n) {\n  if (isArray(opt_message)) {\n    assertFn(\n      shouldBeTruthy,\n      /** @type {!Array} */ (opt_message).concat([subject])\n    );\n  } else {\n    assertFn(shouldBeTruthy, `${opt_message || defaultMessage}: %s`, subject);\n  }\n\n  return subject;\n}\n\n/**\n * Throws an error if the first argument isn't an Element.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeElement\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {!Element} The value of shouldBeTrueish.\n * @throws {Error} when shouldBeElement is not an Element\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertElement(assertFn, shouldBeElement, opt_message) {\n  return /** @type {!Element} */ (\n    assertType_(\n      assertFn,\n      shouldBeElement,\n      isElement(shouldBeElement),\n      'Element expected',\n      opt_message\n    )\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a string. The string can\n * be empty.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeString\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {string} The string value. Can be an empty string.\n * @throws {Error} when shouldBeString is not an String\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertString(assertFn, shouldBeString, opt_message) {\n  return /** @type {string} */ (\n    assertType_(\n      assertFn,\n      shouldBeString,\n      isString(shouldBeString),\n      'String expected',\n      opt_message\n    )\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a number. The allowed values\n * include `0` and `NaN`.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeNumber\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {number} The number value. The allowed values include `0`\n *   and `NaN`.\n * @throws {Error} when shouldBeNumber is not an Number\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertNumber(assertFn, shouldBeNumber, opt_message) {\n  return /** @type {number} */ (\n    assertType_(\n      assertFn,\n      shouldBeNumber,\n      typeof shouldBeNumber == 'number',\n      'Number expected',\n      opt_message\n    )\n  );\n}\n\n/**\n * Throws an error if the first argument is not an array.\n * The array can be empty.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeArray\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {!Array} The array value\n * @throws {Error} when shouldBeArray is not an Array\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertArray(assertFn, shouldBeArray, opt_message) {\n  return /** @type {!Array} */ (\n    assertType_(\n      assertFn,\n      shouldBeArray,\n      isArray(shouldBeArray),\n      'Array expected',\n      opt_message\n    )\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a boolean.\n *\n * For more details see `assert`.\n *\n * @param {!AssertionFunctionDef} assertFn underlying assertion function to call\n * @param {*} shouldBeBoolean\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {boolean} The boolean value.\n * @throws {Error} when shouldBeBoolean is not an Boolean\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function assertBoolean(assertFn, shouldBeBoolean, opt_message) {\n  return /** @type {boolean} */ (\n    assertType_(\n      assertFn,\n      shouldBeBoolean,\n      !!shouldBeBoolean === shouldBeBoolean,\n      'Boolean expected',\n      opt_message\n    )\n  );\n}\n", "/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns the internal AMP runtime version. Note that this is not the RTV,\n * which is a prefix and the runtime version.\n *\n * The call sites for this function are replaced with a compile time constant\n * string.\n *\n * @return {string}\n */\nexport function internalRuntimeVersion() {\n  return '$internalRuntimeVersion$';\n}\n", "/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {map} from '../object';\n\nconst QUERY_STRING_REGEX = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  const params = map();\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = QUERY_STRING_REGEX.exec(queryString))) {\n    const name = tryDecodeUriComponent(match[1], match[1]);\n    const value = match[2]\n      ? tryDecodeUriComponent(match[2].replace(/\\+/g, ' '), match[2])\n      : '';\n    params[name] = value;\n  }\n  return params;\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {internalRuntimeVersion} from './internal-version';\nimport {parseQueryString} from './core/types/string/url';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   minified: boolean,\n *   test: boolean,\n *   examiner: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n *   runtime: (null|string|undefined),\n *   a4aId: (null|string|undefined),\n *   esm: (boolean|undefined),\n * }}\n */\nexport let ModeDef;\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.__AMP_MODE) {\n    return win.__AMP_MODE;\n  }\n  return (win.__AMP_MODE = getMode_(win));\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // TODO(erwinmombay): simplify the logic here\n  const AMP_CONFIG = self.AMP_CONFIG || {};\n\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_FORTESTING is only replaced when `amp dist` is called without the\n  // --fortesting flag.\n  const IS_FORTESTING = true;\n  const IS_MINIFIED = false;\n\n  const runningTests =\n    IS_FORTESTING && !!(AMP_CONFIG.test || win.__AMP_TEST || win['__karma__']);\n  const isLocalDev = IS_FORTESTING && (!!AMP_CONFIG.localDev || runningTests);\n  const hashQuery = parseQueryString(\n    // location.originalHash is set by the viewer when it removes the fragment\n    // from the URL.\n    win.location['originalHash'] || win.location.hash\n  );\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `amp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    development: isModeDevelopment(win),\n    examiner: hashQuery['development'] == '2',\n    esm: IS_ESM,\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    test: runningTests,\n    log: hashQuery['log'],\n    version: internalRuntimeVersion(),\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @return {string}\n */\nfunction getRtvVersion(win) {\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `internalRuntimeVersion` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether internalRuntimeVersion should contain\n  // minor version.\n  return `01${internalRuntimeVersion()}`;\n}\n\n/**\n * Triggers validation or enable pub level logging. Validation can be\n * bypassed via #validate=0.\n * Note that AMP_DEV_MODE flag is used for testing purposes.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isModeDevelopment(win) {\n  const hashQuery = parseQueryString(\n    win.location['originalHash'] || win.location.hash\n  );\n  return !!(\n    ['1', 'actions', 'amp', 'amp4ads', 'amp4email'].includes(\n      hashQuery['development']\n    ) || win.AMP_DEV_MODE\n  );\n}\n\n/**\n * @param {!Window} win\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win) {\n  return getRtvVersion(win);\n}\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n", "/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex =\n  (typeof env['thirdPartyFrameRegex'] == 'string'\n    ? new RegExp(env['thirdPartyFrameRegex'])\n    : env['thirdPartyFrameRegex']) || /^d-\\d+\\.ampproject\\.net$/;\n\nconst cdnProxyRegex =\n  (typeof env['cdnProxyRegex'] == 'string'\n    ? new RegExp(env['cdnProxyRegex'])\n    : env['cdnProxyRegex']) ||\n  /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/;\n\n/**\n * Check for a custom URL definition in special <meta> tags. Note that this does\n * not allow for distinct custom URLs in AmpDocShadow instances. The shell is\n * allowed to define one set of custom URLs via AMP_CONFIG (recommended) or by\n * including <meta> tags in the shell <head>. Those custom URLs then apply to\n * all AMP documents loaded in the shell.\n * @param {string} name\n * @return {?string}\n * @private\n */\nfunction getMetaUrl(name) {\n  // Avoid exceptions in unit tests\n  if (!self.document || !self.document.head) {\n    return null;\n  }\n\n  // Disallow on proxy origins\n  if (self.location && cdnProxyRegex.test(self.location.origin)) {\n    return null;\n  }\n\n  const metaEl = self.document.head./*OK*/ querySelector(\n    `meta[name=\"${name}\"]`\n  );\n  return (metaEl && metaEl.getAttribute('content')) || null;\n}\n\n/**\n * @typedef {{\n *   thirdParty: string,\n *   thirdPartyFrameHost: string,\n *   thirdPartyFrameRegex: !RegExp,\n *   cdn: string,\n *   cdnProxyRegex: !RegExp,\n *   localhostRegex: !RegExp,\n *   errorReporting: string,\n *   betaErrorReporting: string,\n *   localDev: boolean,\n *   trustedViewerHosts: !Array<!RegExp>,\n *   geoApi: ?string,\n * }}\n */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex,\n  cdn:\n    env['cdnUrl'] || getMetaUrl('runtime-host') || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting:\n    env['errorReportingUrl'] ||\n    'https://us-central1-amp-error-reporting.cloudfunctions.net/r',\n  betaErrorReporting:\n    env['betaErrorReportingUrl'] ||\n    'https://us-central1-amp-error-reporting.cloudfunctions.net/r-beta',\n  localDev: env['localDev'] || false,\n  /**\n   * These domains are trusted with more sensitive viewer operations such as\n   * propagating the referrer. If you believe your domain should be here,\n   * file the issue on GitHub to discuss. The process will be similar\n   * (but somewhat more stringent) to the one described in the [3p/README.md](\n   * https://github.com/ampproject/amphtml/blob/main/3p/README.md)\n   *\n   * {!Array<!RegExp>}\n   */\n  trustedViewerHosts: [\n    /(^|\\.)google\\.(com?|[a-z]{2}|com?\\.[a-z]{2}|cat)$/,\n    /(^|\\.)gmail\\.(com|dev)$/,\n  ],\n  // Optional fallback API if amp-geo is left unpatched\n  geoApi: env['geoApiUrl'] || getMetaUrl('amp-geo-api'),\n};\n\nexport const config = {\n  urls,\n};\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assertions from './core/assert/base';\nimport {\n  USER_ERROR_SENTINEL,\n  elementStringOrPassThru,\n  isUserErrorMessage,\n  stripUserError,\n} from './core/error/message-helpers';\nimport {createErrorVargs, duplicateErrorIfNecessary} from './core/error';\nimport {getMode} from './mode';\nimport {internalRuntimeVersion} from './internal-version';\nimport {isArray} from './core/types';\nimport {once} from './core/types/function';\nimport {urls} from './config';\n\nconst noop = () => {};\n\n// These are exported here despite being defined in core to avoid updating\n// imports for now.\nexport {USER_ERROR_SENTINEL, isUserErrorMessage, stripUserError};\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n/**\n * @enum {number}\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error-reporting.js to break cyclic\n * dependency.\n * @param {function(this:Window, Error, (?Element)=): ?|undefined} fn\n */\nexport function setReportError(fn) {\n  self.__AMP_REPORT_ERROR = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Prefixes `internalRuntimeVersion` with the `01` channel signifier (for prod.) for\n * extracted message URLs.\n * (Specific channel is irrelevant: message tables are invariant on internal version.)\n * @return {string}\n */\nconst messageUrlRtv = () => `01${internalRuntimeVersion()}`;\n\n/**\n * Gets a URL to display a message on amp.dev.\n * @param {string} id\n * @param {!Array} interpolatedParts\n * @return {string}\n */\nconst externalMessageUrl = (id, interpolatedParts) =>\n  interpolatedParts.reduce(\n    (prefix, arg) => `${prefix}&s[]=${messageArgToEncodedComponent(arg)}`,\n    `https://log.amp.dev/?v=${messageUrlRtv()}&id=${encodeURIComponent(id)}`\n  );\n\n/**\n * URL to simple log messages table JSON file, which contains an Object<string, string>\n * which maps message id to full message template.\n * @return {string}\n */\nconst externalMessagesSimpleTableUrl = () =>\n  `${urls.cdn}/rtv/${messageUrlRtv()}/log-messages.simple.json`;\n\n/**\n * @param {*} arg\n * @return {string}\n */\nconst messageArgToEncodedComponent = (arg) =>\n  encodeURIComponent(String(elementStringOrPassThru(arg)));\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don\u2019t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(number, boolean):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix = '') {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = getMode().test && win.__AMP_TEST_IFRAME ? win.parent : win;\n\n    /** @private @const {function(number, boolean):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix;\n\n    /** @private {?JsonObject} */\n    this.messages_ = null;\n\n    this.fetchExternalMessagesOnce_ = once(() => {\n      win\n        .fetch(externalMessagesSimpleTableUrl())\n        .then((response) => response.json(), noop)\n        .then((opt_messages) => {\n          if (opt_messages) {\n            this.messages_ = /** @type {!JsonObject} */ (opt_messages);\n          }\n        });\n    });\n\n    // This bound assertion function is capable of handling the format used when\n    // error/assertion messages are extracted. This logic hasn't yet been\n    // migrated to an AMP-independent form for use in core. This binding allows\n    // Log assertion helpers to maintain message-extraction capabilities until\n    // that logic can be moved to core.\n    this.boundAssertFn_ = /** @type {!assertions.AssertionFunctionDef} */ (\n      this.assert.bind(this)\n    );\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return levelOverride_ !== undefined ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    return this.defaultLevelWithFunc_();\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevelWithFunc_() {\n    // Delegate to the specific resolver.\n    return this.levelFunc_(parseInt(getMode().log, 10), getMode().development);\n  }\n\n  /**\n   * @param {string} tag\n   * @param {!LogLevel} level\n   * @param {!Array} messages\n   * @return {boolean} true if a message was logged\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() < level) {\n      return false;\n    }\n    let fn = this.win.console.log;\n    if (level == LogLevel.ERROR) {\n      fn = this.win.console.error || fn;\n    } else if (level == LogLevel.INFO) {\n      fn = this.win.console.info || fn;\n    } else if (level == LogLevel.WARN) {\n      fn = this.win.console.warn || fn;\n    }\n    const args = this.maybeExpandMessageArgs_(messages);\n    // Prefix console message with \"[tag]\".\n    const prefix = `[${tag}]`;\n    if (typeof args[0] === 'string') {\n      // Prepend string to avoid breaking string substitutions e.g. %s.\n      args[0] = prefix + ' ' + args[0];\n    } else {\n      args.unshift(prefix);\n    }\n    fn.apply(this.win.console, args);\n    return true;\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  fine(tag, ...args) {\n    this.msg_(tag, LogLevel.FINE, args);\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  info(tag, ...args) {\n    this.msg_(tag, LogLevel.INFO, args);\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} args\n   */\n  warn(tag, ...args) {\n    this.msg_(tag, LogLevel.WARN, args);\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, ...args) {\n    if (!this.msg_(tag, LogLevel.ERROR, args)) {\n      return this.createError.apply(this, args);\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      // TODO(rcebulko): Determine if/how this Error#name property is used.\n      error.name = tag || error.name;\n      // __AMP_REPORT_ERROR is installed globally per window in the entry point.\n      self.__AMP_REPORT_ERROR(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // __AMP_REPORT_ERROR is installed globally per window in the entry point.\n      self.__AMP_REPORT_ERROR(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {!Array|string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @throws {!Error} When `value` is falsey.\n   * @template T\n   * @closurePrimitive {asserts.truthy}\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    if (isArray(opt_message)) {\n      return this.assert.apply(\n        this,\n        [shouldBeTrueish].concat(\n          this.expandMessageArgs_(/** @type {!Array} */ (opt_message))\n        )\n      );\n    }\n\n    return assertions.assert.apply(\n      null,\n      [this.suffix_].concat(Array.prototype.slice.call(arguments))\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertElement(shouldBeElement, opt_message) {\n    return assertions.assertElement(\n      this.boundAssertFn_,\n      shouldBeElement,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertString(shouldBeString, opt_message) {\n    return assertions.assertString(\n      this.boundAssertFn_,\n      shouldBeString,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    return assertions.assertNumber(\n      this.boundAssertFn_,\n      shouldBeNumber,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument is not an array.\n   * The array can be empty.\n   *\n   * @param {*} shouldBeArray\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {!Array} The array value\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertArray(shouldBeArray, opt_message) {\n    return assertions.assertArray(\n      this.boundAssertFn_,\n      shouldBeArray,\n      opt_message\n    );\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {!Array|string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   * @closurePrimitive {asserts.matchesReturn}\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    return assertions.assertBoolean(\n      this.boundAssertFn_,\n      shouldBeBoolean,\n      opt_message\n    );\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n\n  /**\n   * @param {!Array} args\n   * @return {!Array}\n   * @private\n   */\n  maybeExpandMessageArgs_(args) {\n    if (isArray(args[0])) {\n      return this.expandMessageArgs_(/** @type {!Array} */ (args[0]));\n    }\n    return args;\n  }\n\n  /**\n   * Either redirects a pair of (errorId, ...args) to a URL where the full\n   * message is displayed, or displays it from a fetched table.\n   *\n   * This method is used by the output of the `transform-log-methods` babel\n   * plugin. It should not be used directly. Use the (*error|assert*|info|warn)\n   * methods instead.\n   *\n   * @param {!Array} parts\n   * @return {!Array}\n   * @private\n   */\n  expandMessageArgs_(parts) {\n    // First value should exist.\n    const id = parts.shift();\n    // Best effort fetch of message template table.\n    // Since this is async, the first few logs might be indirected to a URL even\n    // if in development mode. Message table is ~small so this should be a short\n    // gap.\n    if (getMode(this.win).development) {\n      this.fetchExternalMessagesOnce_();\n    }\n    if (this.messages_ && id in this.messages_) {\n      return [this.messages_[id]].concat(parts);\n    }\n    return [`More info at ${externalMessageUrl(id, parts)}`];\n  }\n}\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.__AMP_LOG = self.__AMP_LOG || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n};\n\nconst logs = self.__AMP_LOG;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?typeof Log}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log constructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log constructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return (logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL));\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(\n    self,\n    (logNum, development) => {\n      if (development || logNum >= 1) {\n        return LogLevel.FINE;\n      }\n      return LogLevel.WARN;\n    },\n    suffix\n  );\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return (logs.dev = new logConstructor(self, (logNum) => {\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  }));\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {!Array|string=} opt_message The assertion message\n * @param {*=} opt_1 Optional argument (Var arg as individual params for better\n * @param {*=} opt_2 Optional argument inlining)\n * @param {*=} opt_3 Optional argument\n * @param {*=} opt_4 Optional argument\n * @param {*=} opt_5 Optional argument\n * @param {*=} opt_6 Optional argument\n * @param {*=} opt_7 Optional argument\n * @param {*=} opt_8 Optional argument\n * @param {*=} opt_9 Optional argument\n * @return {T} The value of shouldBeTrueish.\n * @throws {!Error} When `shouldBeTrueish` is falsey.\n * @template T\n * @closurePrimitive {asserts.truthy}\n */\nexport function devAssert(\n  shouldBeTrueish,\n  opt_message,\n  opt_1,\n  opt_2,\n  opt_3,\n  opt_4,\n  opt_5,\n  opt_6,\n  opt_7,\n  opt_8,\n  opt_9\n) {\n  if (getMode().minified) {\n    return shouldBeTrueish;\n  }\n  if (self.__AMP_ASSERTION_CHECK) {\n    // This will never execute regardless, but will be included on unminified\n    // builds. It will be DCE'd away from minified builds, and so can be used to\n    // validate that Babel is properly removing dev assertions in minified\n    // builds.\n    console /*OK*/\n      .log('__devAssert_sentinel__');\n  }\n\n  return dev()./*Orig call*/ assert(\n    shouldBeTrueish,\n    opt_message,\n    opt_1,\n    opt_2,\n    opt_3,\n    opt_4,\n    opt_5,\n    opt_6,\n    opt_7,\n    opt_8,\n    opt_9\n  );\n}\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {!Array|string=} opt_message The assertion message\n * @param {*=} opt_1 Optional argument (Var arg as individual params for better\n * @param {*=} opt_2 Optional argument inlining)\n * @param {*=} opt_3 Optional argument\n * @param {*=} opt_4 Optional argument\n * @param {*=} opt_5 Optional argument\n * @param {*=} opt_6 Optional argument\n * @param {*=} opt_7 Optional argument\n * @param {*=} opt_8 Optional argument\n * @param {*=} opt_9 Optional argument\n * @return {T} The value of shouldBeTrueish.\n * @throws {!Error} When `shouldBeTrueish` is falsey.\n * @template T\n * @closurePrimitive {asserts.truthy}\n */\nexport function userAssert(\n  shouldBeTrueish,\n  opt_message,\n  opt_1,\n  opt_2,\n  opt_3,\n  opt_4,\n  opt_5,\n  opt_6,\n  opt_7,\n  opt_8,\n  opt_9\n) {\n  return user()./*Orig call*/ assert(\n    shouldBeTrueish,\n    opt_message,\n    opt_1,\n    opt_2,\n    opt_3,\n    opt_4,\n    opt_5,\n    opt_6,\n    opt_7,\n    opt_8,\n    opt_9\n  );\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CONSENT_STRING_TYPE} from '../../../src/core/constants/consent-state';\nimport {deepEquals} from '../../../src/core/types/object/json';\nimport {dev, user} from '../../../src/log';\nimport {hasOwn, map} from '../../../src/core/types/object';\nimport {isEnumValue, isObject} from '../../../src/core/types';\n\nconst TAG = 'amp-consent';\n\n/**\n * Key values for retriving/storing consent info object.\n * STATE: Set when user accept or reject consent.\n * STRING: Set when a consent string is used to store more granular consent info\n * on vendors.\n * METADATA: Set when consent metadata is passed in to store more granular consent info\n * on vendors.\n * DITRYBIT: Set when the stored consent info need to be revoked next time.\n * PURPOSE_CONSENTS: Set when consents for purposes are passed in for client side\n * granular consent. Only values ACCEPT and REJECT signals are stored.\n * @enum {string}\n */\nexport const STORAGE_KEY = {\n  STATE: 's',\n  STRING: 'r',\n  IS_DIRTY: 'd',\n  METADATA: 'm',\n  PURPOSE_CONSENTS: 'pc',\n};\n\n/**\n * Key values for retriving/storing metadata values within consent info\n * @enum {string}\n */\nexport const METADATA_STORAGE_KEY = {\n  CONSENT_STRING_TYPE: 'cst',\n  ADDITIONAL_CONSENT: 'ac',\n  GDPR_APPLIES: 'ga',\n  PURPOSE_ONE: 'po',\n};\n\n/**\n * Unlike the global consent state, only accepted and\n * rejected values are respected and stored.\n * In the future, we might consider more nuanced states.\n * @enum {number}\n */\nexport const PURPOSE_CONSENT_STATE = {\n  ACCEPTED: 1,\n  REJECTED: 2,\n};\n\n/**\n * @enum {number}\n */\nexport const CONSENT_ITEM_STATE = {\n  ACCEPTED: 1,\n  REJECTED: 2,\n  DISMISSED: 3,\n  NOT_REQUIRED: 4,\n  UNKNOWN: 5,\n  // TODO(@zhouyx): Seperate UI state from consent state. Add consent\n  // requirement state ui_state = {pending, active, complete} consent_state =\n  // {unknown, accepted, rejected}\n};\n\n/**\n * @enum {string}\n * @visibleForTesting\n */\nexport const TCF_POST_MESSAGE_API_COMMANDS = {\n  GET_TC_DATA: 'getTCData',\n  PING: 'ping',\n  ADD_EVENT_LISTENER: 'addEventListener',\n  REMOVE_EVENT_LISTENER: 'removeEventListener',\n};\n\n/**\n * @typedef {{\n *  consentState: CONSENT_ITEM_STATE,\n *  consentString: (string|undefined),\n *  consentMetadata: (ConsentMetadataDef|undefined),\n *  purposeConsents: (Object<string, PURPOSE_CONSENT_STATE>|undefined),\n *  isDirty: (boolean|undefined),\n * }}\n */\nexport let ConsentInfoDef;\n\n/**\n * Used in ConsentInfoDef\n * @typedef {{\n *  consentStringType: (CONSENT_STRING_TYPE|undefined),\n *  additionalConsent: (string|undefined),\n *  gdprApplies: (boolean|undefined),\n *  purposeOne: (boolean|undefined),\n * }}\n */\nexport let ConsentMetadataDef;\n\n/**\n * Convert the legacy storage value to Consent Info\n * @param {boolean|Object|undefined} value\n * @return {ConsentInfoDef}\n */\nexport function getStoredConsentInfo(value) {\n  if (value === undefined) {\n    return constructConsentInfo(CONSENT_ITEM_STATE.UNKNOWN);\n  }\n  if (typeof value === 'boolean') {\n    // legacy format\n    return getLegacyStoredConsentInfo(value);\n  }\n  if (!isObject(value)) {\n    throw dev().createError('Invalid stored consent value');\n  }\n\n  const consentState = convertValueToState(value[STORAGE_KEY.STATE]);\n  return constructConsentInfo(\n    consentState,\n    value[STORAGE_KEY.STRING],\n    convertStorageMetadata(value[STORAGE_KEY.METADATA]),\n    value[STORAGE_KEY.PURPOSE_CONSENTS],\n    value[STORAGE_KEY.IS_DIRTY] && value[STORAGE_KEY.IS_DIRTY] === 1\n  );\n}\n\n/**\n * Helper function to detect if stored consent has dirtyBit set\n * @param {?ConsentInfoDef} consentInfo\n * @return {boolean}\n */\nexport function hasDirtyBit(consentInfo) {\n  if (!consentInfo) {\n    return false;\n  }\n  if (hasOwn(consentInfo, 'isDirty') && consentInfo['isDirty'] == true) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Return the new consent state value based on stored state and new state\n * @param {!CONSENT_ITEM_STATE} newState\n * @param {!CONSENT_ITEM_STATE} previousState\n * @return {!CONSENT_ITEM_STATE}\n */\nexport function recalculateConsentStateValue(newState, previousState) {\n  if (!isEnumValue(CONSENT_ITEM_STATE, newState)) {\n    newState = CONSENT_ITEM_STATE.UNKNOWN;\n  }\n  if (newState == CONSENT_ITEM_STATE.DISMISSED) {\n    return previousState || CONSENT_ITEM_STATE.UNKNOWN;\n  }\n  if (newState == CONSENT_ITEM_STATE.NOT_REQUIRED) {\n    if (previousState && previousState != CONSENT_ITEM_STATE.UNKNOWN) {\n      return previousState;\n    }\n  }\n  return newState;\n}\n\n/**\n * Compose the value to store to localStorage based on the consentInfo\n * @param {!ConsentInfoDef} consentInfo\n * @return {?boolean|Object}\n */\nexport function composeStoreValue(consentInfo) {\n  const obj = map();\n  const consentState = consentInfo['consentState'];\n  if (consentState == CONSENT_ITEM_STATE.ACCEPTED) {\n    obj[STORAGE_KEY.STATE] = 1;\n  } else if (consentState == CONSENT_ITEM_STATE.REJECTED) {\n    obj[STORAGE_KEY.STATE] = 0;\n  } else {\n    // Only store consentString and dirtyBit with reject/accept action\n    return null;\n  }\n\n  if (consentInfo['consentString']) {\n    obj[STORAGE_KEY.STRING] = consentInfo['consentString'];\n  }\n\n  if (consentInfo['isDirty'] === true) {\n    obj[STORAGE_KEY.IS_DIRTY] = 1;\n  }\n\n  if (consentInfo['consentMetadata']) {\n    obj[STORAGE_KEY.METADATA] = composeMetadataStoreValue(\n      consentInfo['consentMetadata']\n    );\n  }\n\n  if (consentInfo['purposeConsents']) {\n    obj[STORAGE_KEY.PURPOSE_CONSENTS] = consentInfo['purposeConsents'];\n  }\n\n  if (Object.keys(obj) == 0) {\n    return null;\n  }\n\n  return obj;\n}\n\n/**\n * Convert the consentState to legacy boolean stored value\n * @param {!CONSENT_ITEM_STATE} consentState\n * @return {?boolean}\n */\nexport function calculateLegacyStateValue(consentState) {\n  if (consentState == CONSENT_ITEM_STATE.ACCEPTED) {\n    return true;\n  }\n  if (consentState == CONSENT_ITEM_STATE.REJECTED) {\n    return false;\n  }\n  return null;\n}\n\n/**\n * Compare two consentInfo.\n * Return true if they can be converted to the same stored value.\n * @param {?ConsentInfoDef} infoA\n * @param {?ConsentInfoDef} infoB\n * @param {boolean=} opt_isDirty\n * @return {boolean}\n */\nexport function isConsentInfoStoredValueSame(infoA, infoB, opt_isDirty) {\n  if (!infoA && !infoB) {\n    return true;\n  }\n  if (infoA && infoB) {\n    const stateEqual =\n      calculateLegacyStateValue(infoA['consentState']) ===\n      calculateLegacyStateValue(infoB['consentState']);\n    const stringEqual =\n      (infoA['consentString'] || '') === (infoB['consentString'] || '');\n    let isDirtyEqual;\n    if (opt_isDirty) {\n      isDirtyEqual = !!infoA['isDirty'] === !!opt_isDirty;\n    } else {\n      isDirtyEqual = !!infoA['isDirty'] === !!infoB['isDirty'];\n    }\n    const metadataEqual = deepEquals(\n      infoA['consentMetadata'],\n      infoB['consentMetadata']\n    );\n    const purposeConsentsEqual = deepEquals(\n      infoA['purposeConsents'],\n      infoB['purposeConsents']\n    );\n    return (\n      stateEqual &&\n      stringEqual &&\n      metadataEqual &&\n      purposeConsentsEqual &&\n      isDirtyEqual\n    );\n  }\n  return false;\n}\n\n/**\n * Convert the legacy boolean stored value to consentInfo object\n * @param {boolean} value\n * @return {!ConsentInfoDef}\n */\nfunction getLegacyStoredConsentInfo(value) {\n  const state = convertValueToState(value);\n  return constructConsentInfo(state);\n}\n\n/**\n * Construct the consentInfo object from values\n *\n * @param {CONSENT_ITEM_STATE} consentState\n * @param {string=} opt_consentString\n * @param {ConsentMetadataDef=} opt_consentMetadata\n * @param {Object<string, PURPOSE_CONSENT_STATE>=} opt_purposeConsents\n * @param {boolean=} opt_isDirty\n * @return {!ConsentInfoDef}\n */\nexport function constructConsentInfo(\n  consentState,\n  opt_consentString,\n  opt_consentMetadata,\n  opt_purposeConsents,\n  opt_isDirty\n) {\n  return {\n    'consentState': consentState,\n    'consentString': opt_consentString,\n    'consentMetadata': opt_consentMetadata,\n    'purposeConsents': opt_purposeConsents,\n    'isDirty': opt_isDirty,\n  };\n}\n\n/**\n * Construct the consentMetadataDef object from values\n *\n * @param {CONSENT_STRING_TYPE=} opt_consentStringType\n * @param {string=} opt_additionalConsent\n * @param {boolean=} opt_gdprApplies\n * @param {boolean=} opt_purposeOne\n * @return {!ConsentMetadataDef}\n */\nexport function constructMetadata(\n  opt_consentStringType,\n  opt_additionalConsent,\n  opt_gdprApplies,\n  opt_purposeOne\n) {\n  return {\n    'consentStringType': opt_consentStringType,\n    'additionalConsent': opt_additionalConsent,\n    'gdprApplies': opt_gdprApplies,\n    'purposeOne': opt_purposeOne,\n  };\n}\n\n/**\n * Helper function to convert stored value to CONSENT_ITEM_STATE value\n * @param {*} value\n * @return {!CONSENT_ITEM_STATE}\n */\nexport function convertValueToState(value) {\n  if (value === true || value === 1) {\n    return CONSENT_ITEM_STATE.ACCEPTED;\n  } else if (value === false || value === 0) {\n    return CONSENT_ITEM_STATE.REJECTED;\n  }\n  return CONSENT_ITEM_STATE.UNKNOWN;\n}\n\n/**\n * Helper function to convert response enum value to CONSENT_ITEM_STATE value\n * @param {*} value\n * @return {?CONSENT_ITEM_STATE}\n */\nexport function convertEnumValueToState(value) {\n  if (value === 'accepted') {\n    return CONSENT_ITEM_STATE.ACCEPTED;\n  } else if (value === 'rejected') {\n    return CONSENT_ITEM_STATE.REJECTED;\n  } else if (value === 'unknown') {\n    return CONSENT_ITEM_STATE.UNKNOWN;\n  }\n  return null;\n}\n\n/**\n *\n * @param {!ConsentInfoDef} info\n * @return {boolean}\n */\nexport function hasStoredValue(info) {\n  if (info['consentString']) {\n    return true;\n  }\n  return (\n    info['consentState'] === CONSENT_ITEM_STATE.ACCEPTED ||\n    info['consentState'] === CONSENT_ITEM_STATE.REJECTED\n  );\n}\n\n/**\n * Convert the CONSENT_ITEM_STATE back to readable string\n * @param {!CONSENT_ITEM_STATE} enumState\n * @return {string}\n */\nexport function getConsentStateValue(enumState) {\n  if (enumState === CONSENT_ITEM_STATE.ACCEPTED) {\n    return 'accepted';\n  }\n\n  if (enumState === CONSENT_ITEM_STATE.REJECTED) {\n    return 'rejected';\n  }\n\n  return 'unknown';\n}\n\n/**\n * Converts ConsentMetadataDef to stroage value:\n * {'gdprApplies': true, 'additionalConsent': undefined, 'consentStringType': 2} =>\n * {'ga': true, 'cst': 2}\n *\n * @param {ConsentMetadataDef=} consentInfoMetadata\n * @return {Object}\n */\nexport function composeMetadataStoreValue(consentInfoMetadata) {\n  const storageMetadata = map();\n  if (consentInfoMetadata['consentStringType']) {\n    storageMetadata[METADATA_STORAGE_KEY.CONSENT_STRING_TYPE] =\n      consentInfoMetadata['consentStringType'];\n  }\n  if (consentInfoMetadata['additionalConsent']) {\n    storageMetadata[METADATA_STORAGE_KEY.ADDITIONAL_CONSENT] =\n      consentInfoMetadata['additionalConsent'];\n  }\n  if (consentInfoMetadata['gdprApplies'] != undefined) {\n    storageMetadata[METADATA_STORAGE_KEY.GDPR_APPLIES] =\n      consentInfoMetadata['gdprApplies'];\n  }\n  if (consentInfoMetadata['purposeOne'] != undefined) {\n    storageMetadata[METADATA_STORAGE_KEY.PURPOSE_ONE] =\n      consentInfoMetadata['purposeOne'];\n  }\n  return storageMetadata;\n}\n\n/**\n * Converts stroage metadata to ConsentMetadataDef:\n * {'ga': true, 'cst': 2} =>\n * {'gdprApplies': true, 'additionalConsnet': undefined, 'consentStringType': 2}\n *\n * @param {Object|null|undefined} storageMetadata\n * @return {ConsentMetadataDef}\n */\nexport function convertStorageMetadata(storageMetadata) {\n  if (!storageMetadata) {\n    return constructMetadata();\n  }\n  return constructMetadata(\n    storageMetadata[METADATA_STORAGE_KEY.CONSENT_STRING_TYPE],\n    storageMetadata[METADATA_STORAGE_KEY.ADDITIONAL_CONSENT],\n    storageMetadata[METADATA_STORAGE_KEY.GDPR_APPLIES],\n    storageMetadata[METADATA_STORAGE_KEY.PURPOSE_ONE]\n  );\n}\n\n/**\n * Confirm that the metadata values are valid.\n * Remove and provide user error otherwise.\n * @param {JsonObject} metadata\n */\nexport function assertMetadataValues(metadata) {\n  const consentStringType = metadata['consentStringType'];\n  const additionalConsent = metadata['additionalConsent'];\n  const gdprApplies = metadata['gdprApplies'];\n  const purposeOne = metadata['purposeOne'];\n  const errorFields = [];\n\n  if (\n    consentStringType &&\n    !isEnumValue(CONSENT_STRING_TYPE, consentStringType)\n  ) {\n    delete metadata['consentStringType'];\n    errorFields.push('consentStringType');\n  }\n  if (additionalConsent && typeof additionalConsent != 'string') {\n    delete metadata['additionalConsent'];\n    errorFields.push('additionalConsent');\n  }\n  if (gdprApplies && typeof gdprApplies != 'boolean') {\n    delete metadata['gdprApplies'];\n    errorFields.push('gdprApplies');\n  }\n  if (purposeOne && typeof purposeOne != 'boolean') {\n    delete metadata['purposeOne'];\n    errorFields.push('purposeOne');\n  }\n  for (let i = 0; i < errorFields.length; i++) {\n    user().error(\n      TAG,\n      'Consent metadata value \"%s\" is invalid.',\n      errorFields[i]\n    );\n  }\n}\n", "export const CSS = \"amp-consent{position:fixed!important;bottom:0;left:0;overflow:hidden!important;background:hsla(0,0%,100%,0.7);width:100%;z-index:2147483645}amp-consent[i-amphtml-notbuilt]>*{display:none!important}amp-consent>*{max-height:100vh!important}amp-consent.amp-active{visibility:visible}amp-consent.amp-hidden{visibility:hidden}@keyframes amp-consent-ui-placeholder-spin{0%{transform:rotate(0deg)}to{transform:rotate(360deg)}}.i-amphtml-consent-ui-placeholder{width:100%;height:100%;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center}.i-amphtml-consent-ui-placeholder>svg{width:30px;height:30px;fill:none;stroke-width:1.5px;transform-origin:50% 50%;animation:amp-consent-ui-placeholder-spin 1000ms linear infinite}.i-amphtml-consent-alertdialog{overflow:hidden;position:absolute;height:1px;width:1px;top:auto;left:auto}.i-amphtml-consent-ui-fill{position:absolute;top:0;left:0;width:100%}iframe.i-amphtml-consent-ui-fill{border:none}amp-consent.i-amphtml-consent-ui-iframe-active{width:100%!important;height:100%!important;padding:0px!important;margin:0px!important;overflow:auto!important;transform:translate3d(0px,100vh,0px)!important}amp-consent.i-amphtml-consent-ui-iframe-active.i-amphtml-consent-ui-modal{box-sizing:border-box;top:0;right:0;animation:i-amphtml-modal-appear 0.5s;animation-fill-mode:forwards;height:var(--i-amphtml-modal-height)!important;width:90vw!important;margin:auto!important;max-width:760px}amp-consent.i-amphtml-consent-ui-border-enabled{border-top-left-radius:8px!important;border-top-right-radius:8px!important;box-shadow:0 0 5px 0 rgba(0,0,0,0.2)!important}amp-consent.i-amphtml-consent-ui-modal.i-amphtml-consent-ui-border-enabled{border-radius:8px!important;box-shadow:0 0 5px 0 rgba(0,0,0,0.2)!important}amp-consent.i-amphtml-consent-ui-iframe-active.i-amphtml-consent-ui-iframe-transform{transform:translate3d(0px,calc(100% - var(--i-amphtml-modal-height)),0px)!important}amp-consent.i-amphtml-consent-ui-iframe-active.i-amphtml-consent-ui-in{transition:transform 0.5s ease-out!important}amp-consent.i-amphtml-consent-ui-iframe-active.i-amphtml-consent-ui-in.i-amphtml-consent-ui-iframe-fullscreen{top:0px!important;transform:translateZ(0px)!important;border-top-left-radius:0px!important;border-top-right-radius:0px!important}amp-consent.i-amphtml-consent-ui-in.i-amphtml-consent-ui-iframe-fullscreen>.i-amphtml-consent-ui-fill{height:100%!important}@keyframes i-amphtml-consent-ui-mask{0%{opacity:0.0}to{opacity:0.2}}@keyframes i-amphtml-modal-appear{0%{transform:translateY(100vh);opacity:0}to{transform:translate(0);opacity:1}}.i-amphtml-consent-ui-mask{position:fixed!important;top:0!important;left:0!important;width:100vw!important;height:100vh!important;opacity:0.2;animation:i-amphtml-consent-ui-mask 0.25s ease-in;background-image:none!important;background-color:#000;z-index:2147483644}\\n/*# sourceURL=/extensions/amp-consent/0.1/amp-consent.css*/\";\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from '../../../src/mode';\n\n/**\n * The CMP config should looks like\n * {\n *   'consentInstanceId': string, // The key to store consent information\n *   'checkConsentHref': url, // remote endpoint\n *   'promptUISrc': url, // the src for prompt iframe window\n * }\n */\n\nexport const CMP_CONFIG = {};\n\nif (getMode().test || getMode().localDev) {\n  CMP_CONFIG['_ping_'] = {\n    'consentInstanceId': '_ping_',\n    'checkConsentHref': '/get-consent-v1?cid=CLIENT_ID&pid=PAGE_VIEW_ID',\n    'promptUISrc':\n      '/examples/amp-consent/diy-consent.html?cid=CLIENT_ID&pid=PAGE_VIEW_ID',\n  };\n}\n\nCMP_CONFIG['appconsent'] = {\n  'consentInstanceId': 'appconsent',\n  'checkConsentHref': 'https://collector.appconsent.io/amp/check-consent',\n  'promptUISrc': 'https://cdn.appconsent.io/loader.html',\n};\n\nCMP_CONFIG['ConsentManager'] = {\n  'consentInstanceId': 'ConsentManager',\n  'checkConsentHref':\n    'https://consentmanager.mgr.consensu.org/delivery/ampcheck.php',\n  'promptUISrc': 'https://consentmanager.mgr.consensu.org/delivery/ampui.php',\n};\n\nCMP_CONFIG['didomi'] = {\n  'consentInstanceId': 'didomi',\n  'checkConsentHref': 'https://api.privacy-center.org/amp/check-consent',\n  'promptUISrc': 'https://sdk-amp.privacy-center.org/loader.html',\n};\n\nCMP_CONFIG['iubenda'] = {\n  'consentInstanceId': 'iubenda',\n  'checkConsentHref': 'https://amp.iubenda.com/checkConsent',\n  'promptUISrc': 'https://www.iubenda.com/en/help/22135-cookie-solution-amp',\n};\n\nCMP_CONFIG['sirdata'] = {\n  'consentInstanceId': 'sirdata',\n  'checkConsentHref': 'https://sddan.mgr.consensu.org/api/v1/public/amp/check',\n  'promptUISrc': 'https://ui.sddan.mgr.consensu.org/amp.html',\n};\n\nCMP_CONFIG['Marfeel'] = {\n  'consentInstanceId': 'Marfeel',\n  'checkConsentHref': 'https://live.mrf.io/cmp/marfeel/amp/check-consent',\n  'promptUISrc': 'https://live.mrf.io/cmp/marfeel/amp/index.html',\n};\n\nCMP_CONFIG['Ogury'] = {\n  'consentInstanceId': 'Ogury',\n  'checkConsentHref': 'https://api.ogury.mgr.consensu.org/v1/check-for-consent',\n  'promptUISrc': 'https://www.ogury.mgr.consensu.org/amp.html',\n};\n\nCMP_CONFIG['onetrust'] = {\n  'consentInstanceId': 'onetrust',\n  'checkConsentHref': 'https://cdn.cookielaw.org/amp/consent/check',\n  'promptUISrc': ' https://amp.onetrust.mgr.consensu.org/',\n};\n\nCMP_CONFIG['opencmp'] = {\n  'consentInstanceId': 'opencmp',\n  'checkConsentHref': 'https://amp.opencmp.net/consent/check',\n  'promptUISrc': 'https://cdn.opencmp.net/tcf-v2/amp/cmp.html',\n};\n\nCMP_CONFIG['pubtech'] = {\n  'consentInstanceId': 'pubtech',\n  'checkConsentHref': 'https://amp.pubtech.it/cmp-amp-check-consent',\n  'promptUISrc': 'https://cdn.pubtech.ai/amp/index.html',\n};\n\nCMP_CONFIG['quantcast'] = {\n  'consentInstanceId': 'quantcast',\n  'checkConsentHref':\n    'https://apis.quantcast.mgr.consensu.org/amp/check-consent',\n  'promptUISrc': 'https://quantcast.mgr.consensu.org/tcfv2/amp.html',\n};\n\nCMP_CONFIG['SourcePoint'] = {\n  'consentInstanceId': 'SourcePoint',\n  'checkConsentHref': 'https://sourcepoint.mgr.consensu.org/consent/v2/amp',\n  'promptUISrc': 'https://amp.pm.sourcepoint.mgr.consensu.org/',\n};\n\nCMP_CONFIG['UniConsent'] = {\n  'consentInstanceId': 'UniConsent',\n  'checkConsentHref': 'https://edge.uniconsent.com/amp/check-consent',\n  'promptUISrc': 'https://cmp.uniconsent.com/amp/index.html',\n};\n\nCMP_CONFIG['Usercentrics'] = {\n  'consentInstanceId': 'Usercentrics',\n  'checkConsentHref': 'https://consents.usercentrics.eu/amp/checkConsent',\n  'promptUISrc': 'https://amp.usercentrics.eu/amp.html',\n};\n\nCMP_CONFIG['LiveRamp'] = {\n  'consentInstanceId': 'LiveRamp',\n  'checkConsentHref': 'https://api.privacymanager.io/amp/check-consent',\n  'promptUISrc': 'https://amp-consent-tool.privacymanager.io/1/index.html',\n};\n", "/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @enum {number}\n */\nexport const GEO_IN_GROUP = {\n  NOT_DEFINED: 1,\n  IN: 2,\n  NOT_IN: 3,\n};\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {?Window} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Registration and getter functions for AMP services.\n *\n * Invariant: Service getters never return null for registered services.\n */\n\nimport {Deferred} from './core/data-structures/promise';\nimport {dev, devAssert} from './log';\nimport {toWin} from './core/window';\n\n/**\n * Holds info about a service.\n * - obj: Actual service implementation when available.\n * - promise: Promise for the obj.\n * - resolve: Function to resolve the promise with the object.\n * - context: Argument for ctor, either a window or an ampdoc.\n * - ctor: Function that constructs and returns the service.\n * @typedef {{\n *   obj: (?Object),\n *   promise: (?Promise),\n *   resolve: (?function(!Object)),\n *   reject: (?function((*))),\n *   context: (?Window|?./service/ampdoc-impl.AmpDoc),\n *   ctor: (function(new:Object, !Window)|\n *          function(new:Object, !./service/ampdoc-impl.AmpDoc)),\n * }}\n */\nlet ServiceHolderDef;\n\n/**\n * This interface provides a `dispose` method that will be called by\n * runtime when a service needs to be disposed of.\n * @interface\n */\nexport class Disposable {\n  /**\n   * Instructs the service to release any resources it might be holding. Can\n   * be called only once in the lifecycle of a service.\n   */\n  dispose() {}\n}\n\n/**\n * Installs a service override on amp-doc level.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} id\n * @param {!Object} service The service.\n */\nexport function installServiceInEmbedDoc(ampdoc, id, service) {\n  registerServiceInternal(\n    getAmpdocServiceHolder(ampdoc),\n    ampdoc,\n    id,\n    function () {\n      return service;\n    },\n    /* override */ true\n  );\n}\n\n/**\n * Installs a service override in the scope of an embedded window.\n * @param {!Window} embedWin\n * @param {string} id\n * @param {function(new:Object, !Window)} constructor\n */\nexport function registerServiceBuilderInEmbedWin(embedWin, id, constructor) {\n  registerServiceInternal(\n    embedWin,\n    embedWin,\n    id,\n    constructor,\n    /* override */ true\n  );\n}\n\n/**\n * Registers a service given a class to be used as implementation.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {function(new:Object, !Window)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilder(win, id, constructor, opt_instantiate) {\n  win = getTopWindow(win);\n  registerServiceInternal(win, win, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(win, id);\n  }\n}\n\n/**\n * Returns a service and registers it given a class to be used as\n * implementation.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id of the service.\n * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilderForDoc(\n  nodeOrDoc,\n  id,\n  constructor,\n  opt_instantiate\n) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  registerServiceInternal(holder, ampdoc, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * Reject a service promise.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @param {*} error\n */\nexport function rejectServicePromiseForDoc(nodeOrDoc, id, error) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  rejectServicePromiseInternal(holder, id, error);\n}\n\n/**\n * Returns a service for the given id and window (a per-window singleton). Users\n * should typically wrap this as a special purpose function (e.g.\n * `Services.vsyncFor(win)`) for type safety and because the factory should not\n * be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getService(win, id) {\n  win = getTopWindow(win);\n  return getServiceInternal(win, id);\n}\n\n/**\n * Returns a service for the given id and window (a per-window singleton). But\n * it looks in the immediate window scope, not the top-level window.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getServiceInEmbedWin(win, id) {\n  return getServiceInternal(win, id);\n}\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. `Services.vsyncFor(win)`) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nexport function getServicePromise(win, id) {\n  return getServicePromiseInternal(win, id);\n}\n\n/**\n * Returns a service or null with the given id.\n * @param {!Window} win\n * @param {string} id\n * @return {?Object} The service.\n */\nexport function getExistingServiceOrNull(win, id) {\n  win = getTopWindow(win);\n  if (isServiceRegistered(win, id)) {\n    return getServiceInternal(win, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Like getServicePromise but returns null if the service was never registered.\n * @param {!Window} win\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNull(win, id) {\n  return getServicePromiseOrNullInternal(win, id);\n}\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * Expects service `id` to be registered.\n * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDoc(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * If service `id` is not registered, returns null.\n * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Object}\n */\nexport function getServiceForDocOrNull(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  if (isServiceRegistered(holder, id)) {\n    return getServiceInternal(holder, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns a promise for a service for the given id and ampdoc. Also expects\n * a service that has the actual implementation. The promise resolves when\n * the implementation loaded.\n * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {!Promise<!Object>}\n */\nexport function getServicePromiseForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseInternal(getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n/**\n * Like getServicePromiseForDoc but returns null if the service was never\n * registered for this ampdoc.\n * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseOrNullInternal(\n    getAmpdocServiceHolder(elementOrAmpDoc),\n    id\n  );\n}\n\n/**\n * Set the parent and top windows on a child window (friendly iframe).\n * @param {!Window} win\n * @param {!Window} parentWin\n */\nexport function setParentWindow(win, parentWin) {\n  win.__AMP_PARENT = parentWin;\n  win.__AMP_TOP = getTopWindow(parentWin);\n}\n\n/**\n * Returns the parent window for a child window (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getParentWindow(win) {\n  return win.__AMP_PARENT || win;\n}\n\n/**\n * Returns the top window where AMP Runtime is installed for a child window\n * (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getTopWindow(win) {\n  return win.__AMP_TOP || (win.__AMP_TOP = win);\n}\n\n/**\n * Returns the parent \"friendly\" iframe if the node belongs to a child window.\n * @param {!Node} node\n * @param {!Window=} opt_topWin\n * @return {?HTMLIFrameElement}\n */\nexport function getParentWindowFrameElement(node, opt_topWin) {\n  const childWin = (node.ownerDocument || node).defaultView;\n  const topWin = opt_topWin || getTopWindow(childWin);\n  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {\n    try {\n      return /** @type {?HTMLIFrameElement} */ (childWin.frameElement);\n    } catch (e) {\n      // Ignore the error.\n    }\n  }\n  return null;\n}\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc}\n */\nexport function getAmpdoc(nodeOrDoc) {\n  if (nodeOrDoc.nodeType) {\n    const win = toWin(\n      /** @type {!Document} */ (nodeOrDoc.ownerDocument || nodeOrDoc)\n        .defaultView\n    );\n    return getAmpdocService(win).getAmpDoc(/** @type {!Node} */ (nodeOrDoc));\n  }\n  return /** @type {!./service/ampdoc-impl.AmpDoc} */ (nodeOrDoc);\n}\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc|!Window}\n */\nfunction getAmpdocServiceHolder(nodeOrDoc) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;\n}\n\n/**\n * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid\n * circular dependencies.\n * @param {!Window} win\n * @return {!./service/ampdoc-impl.AmpDocService}\n */\nfunction getAmpdocService(win) {\n  return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n    getService(win, 'ampdoc')\n  );\n}\n\n/**\n * Get service `id` from `holder`. Assumes the service\n * has already been registered.\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {Object}\n */\nfunction getServiceInternal(holder, id) {\n  devAssert(\n    isServiceRegistered(holder, id),\n    `Expected service ${id} to be registered`\n  );\n  const services = getServices(holder);\n  const s = services[id];\n  if (!s.obj) {\n    devAssert(s.ctor, `Service ${id} registered without ctor nor impl.`);\n    devAssert(s.context, `Service ${id} registered without context.`);\n    s.obj = new s.ctor(s.context);\n    devAssert(s.obj, `Service ${id} constructed to null.`);\n    s.context = null;\n    // The service may have been requested already, in which case we have a\n    // pending promise we need to fulfill.\n    if (s.resolve) {\n      s.resolve(s.obj);\n    }\n  }\n  return s.obj;\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.\n * @param {string} id of the service.\n * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.\n * @param {boolean=} opt_override\n * @param {boolean=} opt_sharedInstance\n */\nfunction registerServiceInternal(\n  holder,\n  context,\n  id,\n  ctor,\n  opt_override,\n  opt_sharedInstance\n) {\n  const services = getServices(holder);\n  let s = services[id];\n\n  if (!s) {\n    s = services[id] = {\n      obj: null,\n      promise: null,\n      resolve: null,\n      reject: null,\n      context: null,\n      ctor: null,\n      sharedInstance: opt_sharedInstance || false,\n    };\n  }\n\n  if (!opt_override && s.ctor) {\n    // Service already registered.\n    return;\n  }\n\n  s.ctor = ctor;\n  s.context = context;\n  s.sharedInstance = opt_sharedInstance || false;\n\n  // The service may have been requested already, in which case there is a\n  // pending promise that needs to fulfilled.\n  if (s.resolve) {\n    // getServiceInternal will resolve the promise.\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nfunction getServicePromiseInternal(holder, id) {\n  const cached = getServicePromiseOrNullInternal(holder, id);\n  if (cached) {\n    return cached;\n  }\n  // Service is not registered.\n\n  // TODO(@cramforce): Add a check that if the element is eventually registered\n  // that the service is actually provided and this promise resolves.\n  const services = getServices(holder);\n  services[id] = emptyServiceHolderWithPromise();\n  return /** @type {!Promise<!Object>} */ (services[id].promise);\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @param {*} error\n */\nfunction rejectServicePromiseInternal(holder, id, error) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.reject) {\n      s.reject(error);\n    }\n    return;\n  }\n\n  services[id] = emptyServiceHolderWithPromise();\n  services[id].reject(error);\n}\n\n/**\n * Returns a promise for service `id` if the service has been registered\n * on `holder`.\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {?Promise<!Object>}\n */\nfunction getServicePromiseOrNullInternal(holder, id) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.promise) {\n      return s.promise;\n    } else {\n      // Instantiate service if not already instantiated.\n      getServiceInternal(holder, id);\n      return (s.promise = Promise.resolve(/** @type {!Object} */ (s.obj)));\n    }\n  }\n  return null;\n}\n\n/**\n * Returns the object that holds the services registered in a holder.\n * @param {!Object} holder\n * @return {!Object<string,!ServiceHolderDef>}\n */\nfunction getServices(holder) {\n  let services = holder.__AMP_SERVICES;\n  if (!services) {\n    services = holder.__AMP_SERVICES = {};\n  }\n  return services;\n}\n\n/**\n * Whether the specified service implements `Disposable` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isDisposable(service) {\n  return typeof service.dispose == 'function';\n}\n\n/**\n * Asserts that the specified service implements `Disposable` interface and\n * typecasts the instance to `Disposable`.\n * @param {!Object} service\n * @return {!Disposable}\n */\nexport function assertDisposable(service) {\n  devAssert(isDisposable(service), 'required to implement Disposable');\n  return /** @type {!Disposable} */ (service);\n}\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * ampdoc scope.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n */\nexport function disposeServicesForDoc(ampdoc) {\n  disposeServicesInternal(ampdoc);\n}\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * embed scope.\n * @param {!Window} embedWin\n */\nexport function disposeServicesForEmbed(embedWin) {\n  disposeServicesInternal(embedWin);\n}\n\n/**\n * @param {!Object} holder Object holding the service instances.\n */\nfunction disposeServicesInternal(holder) {\n  const services = getServices(holder);\n  for (const id in services) {\n    if (!Object.prototype.hasOwnProperty.call(services, id)) {\n      continue;\n    }\n    const serviceHolder = services[id];\n    if (serviceHolder.sharedInstance) {\n      continue;\n    }\n    if (serviceHolder.obj) {\n      disposeServiceInternal(id, serviceHolder.obj);\n    } else if (serviceHolder.promise) {\n      serviceHolder.promise.then((instance) =>\n        disposeServiceInternal(id, instance)\n      );\n    }\n  }\n}\n\n/**\n * @param {string} id\n * @param {!Object} service\n */\nfunction disposeServiceInternal(id, service) {\n  if (!isDisposable(service)) {\n    return;\n  }\n  try {\n    assertDisposable(service).dispose();\n  } catch (e) {\n    // Ensure that a failure to dispose a service does not disrupt other\n    // services.\n    dev().error('SERVICE', 'failed to dispose service', id, e);\n  }\n}\n\n/**\n * This adopts the service **instance** from the parent.\n *\n * This function is dangerous! Sharing an instance means data can leak to and\n * from a child ampdoc.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} id\n */\nexport function adoptServiceForEmbedDoc(ampdoc, id) {\n  const service = getServiceInternal(\n    getAmpdocServiceHolder(devAssert(ampdoc.getParent())),\n    id\n  );\n  registerServiceInternal(\n    getAmpdocServiceHolder(ampdoc),\n    ampdoc,\n    id,\n    function () {\n      return service;\n    },\n    /* override */ false,\n    /* sharedInstance */ true\n  );\n}\n\n/**\n * This adopts the service **factory** from the parent.\n *\n * This function is safer than sharing the service instance, since each ampdoc\n * will create its own instance of the factory (and each instance will have its\n * own instance data). Note that static data is still shared, so it's not 100%\n * foolproof.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} id\n */\nexport function adoptServiceFactoryForEmbedDoc(ampdoc, id) {\n  const parentHolder = getAmpdocServiceHolder(devAssert(ampdoc.getParent()));\n  devAssert(\n    isServiceRegistered(parentHolder, id),\n    `Expected service ${id} to be registered`\n  );\n  const service = getServices(parentHolder)[id];\n  registerServiceInternal(\n    getAmpdocServiceHolder(ampdoc),\n    ampdoc,\n    id,\n    devAssert(service.ctor)\n  );\n}\n\n/**\n * Resets a single service, so it gets recreated on next getService invocation.\n * @param {!Object} holder\n * @param {string} id of the service.\n */\nexport function resetServiceForTesting(holder, id) {\n  if (holder.__AMP_SERVICES) {\n    holder.__AMP_SERVICES[id] = null;\n  }\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {boolean}\n */\nfunction isServiceRegistered(holder, id) {\n  const service = holder.__AMP_SERVICES && holder.__AMP_SERVICES[id];\n  // All registered services must have a constructor.\n  return !!(service && service.ctor);\n}\n\n/** @return {!ServiceHolderDef} */\nfunction emptyServiceHolderWithPromise() {\n  const deferred = new Deferred();\n  const {promise, reject, resolve} = deferred;\n  promise.catch(() => {}); // avoid uncaught exception when service gets rejected\n  return {\n    obj: null,\n    promise,\n    resolve,\n    reject,\n    context: null,\n    ctor: null,\n  };\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Magic constant that is replaced by babel.\n// IS_MINIFIED is always replaced with true when closure compiler is used\nconst IS_MINIFIED = false;\n\n/**\n * Returns true whenever closure compiler is used.\n * @return {boolean}\n */\nexport function isMinifiedMode() {\n  return IS_MINIFIED;\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assertions from './base';\nimport {isMinifiedMode} from '../minified-mode';\n\n/**\n * @fileoverview This file provides the entrypoint for dev assertions. It's\n * designed so all functions are pure function calls to improve inlining. All\n * functions in this file get DCE'd away during compilation.\n */\n\n/**\n * This will never execute regardless, but will be included on unminified builds\n * builds. It will be DCE'd away from minified builds, and so can be used to\n * validate that Babel is properly removing dev assertions in minified builds.\n */\nfunction devAssertDceCheck() {\n  if (self.__AMP_ASSERTION_CHECK) {\n    console /*OK*/\n      .log('__devAssert_sentinel__');\n  }\n}\n\n/**\n * Throws an error if the first argument isn't trueish. Mirrors devAssert in\n * src/log.js.\n * @param {T} shouldBeTruthy\n * @param {string=} opt_message\n * @param {*=} opt_1 Optional argument (var arg as individual params for better\n * @param {*=} opt_2 Optional argument inlining)\n * @param {*=} opt_3 Optional argument\n * @param {*=} opt_4 Optional argument\n * @param {*=} opt_5 Optional argument\n * @param {*=} opt_6 Optional argument\n * @param {*=} opt_7 Optional argument\n * @param {*=} opt_8 Optional argument\n * @param {*=} opt_9 Optional argument\n * @return {T}\n * @template T\n * @throws {Error} when shouldBeTruthy is not truthy.\n * @closurePrimitive {asserts.truthy}\n */\nexport function devAssert(\n  shouldBeTruthy,\n  opt_message,\n  opt_1,\n  opt_2,\n  opt_3,\n  opt_4,\n  opt_5,\n  opt_6,\n  opt_7,\n  opt_8,\n  opt_9\n) {\n  if (isMinifiedMode()) {\n    return shouldBeTruthy;\n  }\n  devAssertDceCheck();\n\n  return assertions.assert(\n    '',\n    shouldBeTruthy,\n    opt_message,\n    opt_1,\n    opt_2,\n    opt_3,\n    opt_4,\n    opt_5,\n    opt_6,\n    opt_7,\n    opt_8,\n    opt_9\n  );\n}\n\n/**\n * Throws an error if the first argument isn't an Element.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeElement\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {!Element} The value of shouldBeTrueish.\n * @throws {Error} when shouldBeElement is not an Element\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertElement(shouldBeElement, opt_message) {\n  if (isMinifiedMode()) {\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertElement(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeElement,\n    opt_message\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a string. The string can\n * be empty.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeString\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {string} The string value. Can be an empty string.\n * @throws {Error} when shouldBeString is not an String\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertString(shouldBeString, opt_message) {\n  if (isMinifiedMode()) {\n    return /** @type {string} */ (shouldBeString);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertString(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeString,\n    opt_message\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a number. The allowed values\n * include `0` and `NaN`.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeNumber\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {number} The number value. The allowed values include `0`\n *   and `NaN`.\n * @throws {Error} when shouldBeNumber is not an Number\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertNumber(shouldBeNumber, opt_message) {\n  if (isMinifiedMode()) {\n    return /** @type {number} */ (shouldBeNumber);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertNumber(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeNumber,\n    opt_message\n  );\n}\n\n/**\n * Throws an error if the first argument is not an array.\n * The array can be empty.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeArray\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {!Array} The array value\n * @throws {Error} when shouldBeArray is not an Array\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertArray(shouldBeArray, opt_message) {\n  if (isMinifiedMode()) {\n    return /** @type {!Array} */ (shouldBeArray);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertArray(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeArray,\n    opt_message\n  );\n}\n\n/**\n * Throws an error if the first argument isn't a boolean.\n *\n * For more details see `assert`.\n *\n * @param {*} shouldBeBoolean\n * @param {!Array<*>|string=} opt_message The assertion message\n * @return {boolean} The boolean value.\n * @throws {Error} when shouldBeBoolean is not an Boolean\n * @closurePrimitive {asserts.matchesReturn}\n */\nexport function devAssertBoolean(shouldBeBoolean, opt_message) {\n  if (isMinifiedMode()) {\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n  devAssertDceCheck();\n\n  return assertions.assertBoolean(\n    /** @type {!assertions.AssertionFunctionDef} */ (devAssert),\n    shouldBeBoolean,\n    opt_message\n  );\n}\n", "/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n", "/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {cssEscape} from '../../../third_party/css-escape/css-escape';\nimport {devAssert} from '../assert';\n\n/**\n * @type {boolean|undefined}\n */\nlet scopeSelectorSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setScopeSelectorSupportedForTesting(val) {\n  scopeSelectorSupported = val;\n}\n\n/**\n * Test that the :scope selector is supported and behaves correctly.\n * @param {!Element|!ShadowRoot} el\n * @return {boolean}\n */\nexport function isScopeSelectorSupported(el) {\n  if (scopeSelectorSupported !== undefined) {\n    return scopeSelectorSupported;\n  }\n\n  return (scopeSelectorSupported = testScopeSelector(el));\n}\n\n/**\n * Test that the :scope selector is supported and behaves correctly.\n * @param {!Element|!ShadowRoot} el\n * @return {boolean}\n */\nfunction testScopeSelector(el) {\n  try {\n    const doc = el.ownerDocument;\n    const testElement = doc.createElement('div');\n    const testChild = doc.createElement('div');\n    testElement.appendChild(testChild);\n    // NOTE(cvializ, #12383): Firefox's implementation is incomplete,\n    // therefore we test actual functionality of`:scope` as well.\n    return testElement./*OK*/ querySelector(':scope div') === testChild;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Prefixes a selector for ancestor selection. Splits in subselectors and\n * applies prefix to each.\n *\n * e.g.\n * ```\n *   prependSelectorsWith('div', '.i-amphtml-scoped');\n *   // => '.i-amphtml-scoped div'\n *   prependSelectorsWith('div, ul', ':scope');\n *   // => ':scope div, :scope ul'\n *   prependSelectorsWith('div, ul', 'article >');\n *   // => 'article > div, article > ul'\n * ```\n *\n * @param {string} selector\n * @param {string} distribute\n * @return {string}\n */\nexport function prependSelectorsWith(selector, distribute) {\n  return selector.replace(/^|,/g, `$&${distribute} `);\n}\n\n/**\n * Escapes an ident (ID or a class name) to be used as a CSS selector.\n *\n * See https://drafts.csswg.org/cssom/#serialize-an-identifier.\n *\n * @param {string} ident\n * @return {string}\n * @suppress {uselessCode}\n */\nexport function escapeCssSelectorIdent(ident) {\n  // This gets rewritten to true/false during compilation. It will trigger an\n  // JSC_UNREACHABLE_CODE warning, but that's intentional for DCE.\n  if (IS_ESM) {\n    return CSS.escape(ident);\n  }\n  return cssEscape(ident);\n}\n\n/**\n * Escapes an ident in a way that can be used by :nth-child() psuedo-class.\n *\n * See https://github.com/w3c/csswg-drafts/issues/2306.\n *\n * @param {string|number} ident\n * @return {string}\n */\nexport function escapeCssSelectorNth(ident) {\n  const escaped = String(ident);\n  // Ensure it doesn't close the nth-child psuedo class.\n  devAssert(escaped.indexOf(')') === -1);\n  return escaped;\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {devAssert} from '../assert';\nimport {isScopeSelectorSupported, prependSelectorsWith} from './css-selectors';\n\n/** @fileoverview Helper functions for DOM queries. */\n\n/**\n * Asserts that name is just an alphanumeric word, and does not contain\n * advanced CSS selector features like attributes, psuedo-classes, class names,\n * nor ids.\n * @param {string} name\n */\nfunction assertIsName(name) {\n  devAssert(\n    /^[\\w-]+$/.test(name),\n    `Expected \"${name}\" to be a CSS name composed of alphanumerics and hyphens.`\n  );\n}\n\n/**\n * Finds all elements that matche `selector`, scoped inside `root`\n * for user-agents that do not support native scoping.\n *\n * This method isn't required for modern builds, can be removed.\n *\n * @param {!Element|!ShadowRoot} root\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nfunction scopedQuerySelectionFallback(root, selector) {\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const scopedSelector = prependSelectorsWith(selector, `.${unique}`);\n  const elements = root./*OK*/ querySelectorAll(scopedSelector);\n  root.classList.remove(unique);\n  return elements;\n}\n\n/**\n * Finds the first element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element|!ShadowRoot} root\n * @param {string} selector\n * @return {?Element}\n *\n * @suppress {suspiciousCode}\n */\nexport function scopedQuerySelector(root, selector) {\n  if (IS_ESM || isScopeSelectorSupported(root)) {\n    return root./*OK*/ querySelector(prependSelectorsWith(selector, ':scope'));\n  }\n\n  // Only IE.\n  const fallbackResult = scopedQuerySelectionFallback(root, selector);\n  return fallbackResult[0] === undefined ? null : fallbackResult[0];\n}\n\n/**\n * Finds every element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element|!ShadowRoot} root\n * @param {string} selector\n * @return {!NodeList<!Element>}\n *\n * @suppress {suspiciousCode}\n */\nexport function scopedQuerySelectorAll(root, selector) {\n  if (IS_ESM || isScopeSelectorSupported(root)) {\n    return root./*OK*/ querySelectorAll(\n      prependSelectorsWith(selector, ':scope')\n    );\n  }\n\n  // Only IE.\n  return scopedQuerySelectionFallback(root, selector);\n}\n\n/**\n * Checks if the given element matches the selector\n * @param  {!Element} el The element to verify\n * @param  {string} selector The selector to check against\n * @return {boolean} True if the element matched the selector. False otherwise.\n */\nexport function matches(el, selector) {\n  const matcher =\n    el.matches ||\n    el.webkitMatchesSelector ||\n    el.mozMatchesSelector ||\n    el.msMatchesSelector ||\n    el.oMatchesSelector;\n  if (matcher) {\n    return matcher.call(el, selector);\n  }\n  return false; // IE8 always returns false.\n}\n\n/**\n * Finds the closest element that satisfies the callback from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {function(!Element):boolean} callback\n * @param {Element=} opt_stopAt optional elemnt to stop the search at.\n * @return {?Element}\n */\nexport function closest(element, callback, opt_stopAt) {\n  for (let el = element; el && el !== opt_stopAt; el = el.parentElement) {\n    if (callback(el)) {\n      return el;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds the closest node that satisfies the callback from this node\n * up the DOM subtree.\n * @param {!Node} node\n * @param {function(!Node):boolean} callback\n * @return {?Node}\n */\nexport function closestNode(node, callback) {\n  for (let n = node; n; n = n.parentNode) {\n    if (callback(n)) {\n      return n;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds the closest ancestor element with the specified selector from this\n * element.\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element} closest ancestor if found.\n */\nexport function closestAncestorElementBySelector(element, selector) {\n  return element.closest\n    ? element.closest(selector)\n    : closest(element, (el) => matches(el, selector));\n}\n\n/**\n * Finds all ancestor elements that satisfy predicate.\n * @param {!Element} child\n * @param {function(!Element):boolean} predicate\n * @return {!Array<!Element>}\n */\nexport function ancestorElements(child, predicate) {\n  const ancestors = [];\n  for (\n    let ancestor = child.parentElement;\n    ancestor;\n    ancestor = ancestor.parentElement\n  ) {\n    if (predicate(ancestor)) {\n      ancestors.push(ancestor);\n    }\n  }\n  return ancestors;\n}\n\n/**\n * Finds all ancestor elements that has the specified tag name.\n * @param {!Element} child\n * @param {string} tagName\n * @return {!Array<!Element>}\n */\nexport function ancestorElementsByTag(child, tagName) {\n  assertIsName(tagName);\n  tagName = tagName.toUpperCase();\n  return ancestorElements(child, (el) => el.tagName == tagName);\n}\n\n/**\n * Finds the first child element that satisfies the callback.\n * TODO(rcebulko): Can we start using generators in childElements and defer to\n * that here?\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function childElement(parent, callback) {\n  for (\n    let child = parent.firstElementChild;\n    child;\n    child = child.nextElementSibling\n  ) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds the last child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function lastChildElement(parent, callback) {\n  for (\n    let child = parent.lastElementChild;\n    child;\n    child = child.previousElementSibling\n  ) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds all child elements that satisfy the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {!Array<!Element>}\n */\nexport function childElements(parent, callback) {\n  const children = [];\n  for (\n    let child = parent.firstElementChild;\n    child;\n    child = child.nextElementSibling\n  ) {\n    if (callback(child)) {\n      children.push(child);\n    }\n  }\n  return children;\n}\n\n/**\n * Finds all child nodes that satisfy the callback.\n * These nodes can include Text, Comment and other child nodes.\n * @param {!Node} parent\n * @param {function(!Node):boolean} callback\n * @return {!Array<!Node>}\n */\nexport function childNodes(parent, callback) {\n  const nodes = [];\n  for (let child = parent.firstChild; child; child = child.nextSibling) {\n    if (callback(child)) {\n      nodes.push(child);\n    }\n  }\n  return nodes;\n}\n\n/**\n * Finds the first child element that has the specified attribute.\n * @param {!Element|!ShadowRoot} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function childElementByAttr(parent, attr) {\n  assertIsName(attr);\n  return /*OK*/ scopedQuerySelector(parent, `> [${attr}]`);\n}\n\n/**\n * Finds the last child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function lastChildElementByAttr(parent, attr) {\n  assertIsName(attr);\n  return lastChildElement(parent, (el) => {\n    return el.hasAttribute(attr);\n  });\n}\n\n/**\n * Finds all child elements that has the specified attribute.\n * @param {!Element|!ShadowRoot} parent\n * @param {string} attr\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByAttr(parent, attr) {\n  assertIsName(attr);\n  return /*OK*/ scopedQuerySelectorAll(parent, `> [${attr}]`);\n}\n\n/**\n * Finds the first child element that has the specified tag name.\n * @param {!Element|!ShadowRoot} parent\n * @param {string} tagName\n * @return {?Element}\n */\nexport function childElementByTag(parent, tagName) {\n  assertIsName(tagName);\n  return /*OK*/ scopedQuerySelector(parent, `> ${tagName}`);\n}\n\n/**\n * Finds all child elements with the specified tag name.\n * @param {!Element|!ShadowRoot} parent\n * @param {string} tagName\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByTag(parent, tagName) {\n  assertIsName(tagName);\n  return /*OK*/ scopedQuerySelectorAll(parent, `> ${tagName}`);\n}\n\n/**\n * Finds the first descendant element with the specified name.\n * @param {!Element|!Document|!ShadowRoot} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function elementByTag(element, tagName) {\n  assertIsName(tagName);\n  return element./*OK*/ querySelector(tagName);\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './core/data-structures/promise';\nimport {dev, devAssert} from './log';\nimport {dict} from './core/types/object';\nimport {includes} from './core/types/string';\nimport {matches} from './core/dom/query';\nimport {toWin} from './core/window';\n\nconst HTML_ESCAPE_CHARS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n};\nconst HTML_ESCAPE_REGEX = /(&|<|>|\"|'|`)/g;\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_PROMISE = '__AMP_UPG_PRM';\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_RESOLVER = '__AMP_UPG_RES';\n\n/**\n * @typedef {{\n *   bubbles: (boolean|undefined),\n *   cancelable: (boolean|undefined),\n * }}\n */\nexport let CustomEventOptionsDef;\n\n/** @const {!CustomEventOptionsDef} */\nconst DEFAULT_CUSTOM_EVENT_OPTIONS = {bubbles: true, cancelable: true};\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * callback is executed.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @param {function()} callback\n * @suppress {suspiciousCode}\n */\nexport function waitForChild(parent, checkFunc, callback) {\n  if (checkFunc(parent)) {\n    callback();\n    return;\n  }\n  /** @const {!Window} */\n  const win = toWin(parent.ownerDocument.defaultView);\n  if (IS_ESM || win.MutationObserver) {\n    /** @const {MutationObserver} */\n    const observer = new win.MutationObserver(() => {\n      if (checkFunc(parent)) {\n        observer.disconnect();\n        callback();\n      }\n    });\n    observer.observe(parent, {childList: true});\n  } else {\n    /** @const {number} */\n    const interval = win.setInterval(() => {\n      if (checkFunc(parent)) {\n        win.clearInterval(interval);\n        callback();\n      }\n    }, /* milliseconds */ 5);\n  }\n}\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * promise is resolved.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @return {!Promise}\n */\nexport function waitForChildPromise(parent, checkFunc) {\n  return new Promise((resolve) => {\n    waitForChild(parent, checkFunc, resolve);\n  });\n}\n\n/**\n * Waits for document's body to be available and ready.\n * @param {!Document} doc\n * @param {function()} callback\n */\nexport function waitForBodyOpen(doc, callback) {\n  waitForChild(doc.documentElement, () => !!doc.body, callback);\n}\n\n/**\n * Waits for document's body to be available.\n * @param {!Document} doc\n * @return {!Promise}\n */\nexport function waitForBodyOpenPromise(doc) {\n  return new Promise((resolve) => waitForBodyOpen(doc, resolve));\n}\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n/**\n * Removes all child nodes of the specified element.\n * @param {!Element|!DocumentFragment} parent\n */\nexport function removeChildren(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\n/**\n * Copies all children nodes of element \"from\" to element \"to\". Child nodes\n * are deeply cloned. Notice, that this method should be used with care and\n * preferably on smaller subtrees.\n * @param {!Element} from\n * @param {!Element|!DocumentFragment} to\n */\nexport function copyChildren(from, to) {\n  const frag = to.ownerDocument.createDocumentFragment();\n  for (let n = from.firstChild; n; n = n.nextSibling) {\n    frag.appendChild(n.cloneNode(true));\n  }\n  to.appendChild(frag);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n * @param {?Node=} after\n */\nexport function insertAfterOrAtStart(root, element, after = null) {\n  if (!after) {\n    insertAtStart(root, element);\n    return;\n  }\n  const before = after.nextSibling;\n  root.insertBefore(element, before);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n */\nexport function insertAtStart(root, element) {\n  root.insertBefore(element, root.firstChild);\n}\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    element.setAttribute(attr, attributes[attr]);\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function createElementWithAttributes(doc, tagName, attributes) {\n  const element = doc.createElement(tagName);\n  return addAttributesToElement(element, attributes);\n}\n\n/**\n * Returns true if node is connected (attached).\n * @param {!Node} node\n * @return {boolean}\n * @see https://dom.spec.whatwg.org/#connected\n */\nexport function isConnectedNode(node) {\n  const connected = node.isConnected;\n  if (connected !== undefined) {\n    return connected;\n  }\n\n  // \"An element is connected if its shadow-including root is a document.\"\n  let n = node;\n  do {\n    n = rootNodeFor(n);\n    if (n.host) {\n      n = n.host;\n    } else {\n      break;\n    }\n  } while (true);\n  return n.nodeType === Node.DOCUMENT_NODE;\n}\n\n/**\n * Returns the root for a given node. Does not cross shadow DOM boundary.\n * @param {!Node} node\n * @return {!Node}\n */\nexport function rootNodeFor(node) {\n  if (Node.prototype.getRootNode) {\n    // Type checker says `getRootNode` may return null.\n    return node.getRootNode() || node;\n  }\n  let n;\n  // Check isShadowRoot() is only needed for the polyfill case.\n  for (\n    n = node;\n    !!n.parentNode && !isShadowRoot(/** @type {HTMLElement} */ (n));\n    n = n.parentNode\n  ) {}\n  return n;\n}\n\n/**\n * Determines if value is actually a `ShadowRoot` node.\n * @param {HTMLElement} value\n * @return {boolean}\n */\nexport function isShadowRoot(value) {\n  if (!value) {\n    return false;\n  }\n  // Node.nodeType == DOCUMENT_FRAGMENT to speed up the tests. Unfortunately,\n  // nodeType of DOCUMENT_FRAGMENT is used currently for ShadowRoot nodes.\n  if (value.tagName == 'I-AMPHTML-SHADOW-ROOT') {\n    return true;\n  }\n  return (\n    value.nodeType == /* DOCUMENT_FRAGMENT */ 11 &&\n    Object.prototype.toString.call(value) === '[object ShadowRoot]'\n  );\n}\n\n/**\n * Returns element data-param- attributes as url parameters key-value pairs.\n * e.g. data-param-some-attr=value -> {someAttr: value}.\n * @param {!HTMLElement} element\n * @param {function(string):string=} opt_computeParamNameFunc to compute the\n *    parameter name, get passed the camel-case parameter name.\n * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.\n * @return {!JsonObject}\n */\nexport function getDataParamsFromAttributes(\n  element,\n  opt_computeParamNameFunc,\n  opt_paramPattern\n) {\n  const computeParamNameFunc = opt_computeParamNameFunc || ((key) => key);\n  const {dataset} = element;\n  const params = dict();\n  const paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;\n  for (const key in dataset) {\n    const matches = key.match(paramPattern);\n    if (matches) {\n      const param = matches[1][0].toLowerCase() + matches[1].substr(1);\n      params[computeParamNameFunc(param)] = dataset[key];\n    }\n  }\n  return params;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while (\n    (currentElement = currentElement.parentNode) &&\n    currentElement != opt_stopNode\n  );\n  return false;\n}\n\n/**\n * Returns a clone of the content of a template element.\n *\n * Polyfill to replace .content access for browsers that do not support\n * HTMLTemplateElements natively.\n *\n * @param {!HTMLTemplateElement|!Element} template\n * @return {!DocumentFragment}\n */\nexport function templateContentClone(template) {\n  if ('content' in template) {\n    return template.content.cloneNode(true);\n  } else {\n    const content = template.ownerDocument.createDocumentFragment();\n    copyChildren(template, content);\n    return content;\n  }\n}\n\n/**\n * Iterate over an array-like.\n * Test cases: https://jsbench.github.io/#f638cacc866a1b2d6e517e6cfa900d6b\n * @param {!IArrayLike<T>} iterable\n * @param {function(T, number)} cb\n * @template T\n */\nexport function iterateCursor(iterable, cb) {\n  const {length} = iterable;\n  for (let i = 0; i < length; i++) {\n    cb(iterable[i], i);\n  }\n}\n\n/**\n * This method wraps around window's open method. It first tries to execute\n * `open` call with the provided target and if it fails, it retries the call\n * with the `_top` target. This is necessary given that in some embedding\n * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n * is blocked by default.\n *\n * @param {!Window} win\n * @param {string} url\n * @param {string} target\n * @param {string=} opt_features\n * @return {?Window}\n */\nexport function openWindowDialog(win, url, target, opt_features) {\n  // Try first with the specified target. If we're inside the WKWebView or\n  // a similar environments, this method is expected to fail by default for\n  // all targets except `_top`.\n  let res;\n  try {\n    res = win.open(url, target, opt_features);\n  } catch (e) {\n    dev().error('DOM', 'Failed to open url on target: ', target, e);\n  }\n\n  // Then try with `_top` target.\n  if (!res && target != '_top' && !includes(opt_features || '', 'noopener')) {\n    res = win.open(url, '_top');\n  }\n  return res;\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonScriptTag(element) {\n  return (\n    element.tagName == 'SCRIPT' &&\n    element.hasAttribute('type') &&\n    element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON'\n  );\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonLdScriptTag(element) {\n  return (\n    element.tagName == 'SCRIPT' &&\n    element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON'\n  );\n}\n\n/**\n * Whether the page's direction is right to left or not.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isRTL(doc) {\n  const dir =\n    doc.body.getAttribute('dir') ||\n    doc.documentElement.getAttribute('dir') ||\n    'ltr';\n  return dir == 'rtl';\n}\n\n/**\n * Escapes `<`, `>` and other HTML charcaters with their escaped forms.\n * @param {string} text\n * @return {string}\n */\nexport function escapeHtml(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);\n}\n\n/**\n * @param {string} c\n * @return {string}\n */\nfunction escapeHtmlChar(c) {\n  return HTML_ESCAPE_CHARS[c];\n}\n\n/**\n * Tries to focus on the given element; fails silently if browser throws an\n * exception.\n * @param {!Element} element\n */\nexport function tryFocus(element) {\n  try {\n    element./*OK*/ focus();\n  } catch (e) {\n    // IE <= 7 may throw exceptions when focusing on hidden items.\n  }\n}\n\n/**\n * Whether the given window is in an iframe or not.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isIframed(win) {\n  return win.parent && win.parent != win;\n}\n\n/**\n * Determines if this element is an AMP element\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isAmpElement(element) {\n  const tag = element.tagName;\n  // Use prefix to recognize AMP element. This is necessary because stub\n  // may not be attached yet.\n  return (\n    tag.startsWith('AMP-') &&\n    // Some \"amp-*\" elements are not really AMP elements. :smh:\n    !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY')\n  );\n}\n\n/**\n * Return a promise that resolve when an AMP element upgrade from HTMLElement\n * to CustomElement\n * @param {!HTMLElement} element\n * @return {!Promise<!AmpElement>}\n */\nexport function whenUpgradedToCustomElement(element) {\n  devAssert(isAmpElement(element), 'element is not AmpElement');\n  if (element.createdCallback) {\n    // Element already is CustomElement;\n    return Promise.resolve(/**@type {!AmpElement} */ (element));\n  }\n  // If Element is still HTMLElement, wait for it to upgrade to customElement\n  // Note: use pure string to avoid obfuscation between versions.\n  if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {\n    const deferred = new Deferred();\n    element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;\n    element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;\n  }\n\n  return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];\n}\n\n/**\n * Returns true if node is not disabled.\n *\n * IE8 can return false positives, see {@link matches}.\n * @param {!HTMLInputElement} element\n * @return {boolean}\n * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled\n */\nexport function isEnabled(element) {\n  return !(element.disabled || matches(element, ':disabled'));\n}\n\n/**\n * A sorting comparator that sorts elements in DOM tree order.\n * A first sibling is sorted to be before its nextSibling.\n * A parent node is sorted to be before a child.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n *\n * @param {!Element} element1\n * @param {!Element} element2\n * @return {number}\n */\nexport function domOrderComparator(element1, element2) {\n  if (element1 === element2) {\n    return 0;\n  }\n\n  const pos = element1.compareDocumentPosition(element2);\n  const precedingOrContains =\n    Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINS;\n\n  // if fe2 is preceding or contains fe1 then, fe1 is after fe2\n  if (pos & precedingOrContains) {\n    return 1;\n  }\n\n  // if fe2 is following or contained by fe1, then fe1 is before fe2\n  return -1;\n}\n\n/**\n * Like `Element.prototype.toggleAttribute`. This either toggles an attribute\n * on by adding an attribute with an empty value, or toggles it off by removing\n * the attribute. This does not mutate the element if the new state matches\n * the existing state.\n * @param {!Element} element An element to toggle the attribute for.\n * @param {string} name The name of the attribute.\n * @param {boolean=} forced Whether the attribute should be forced on/off. If\n *    not specified, it will be toggled from the current state.\n * @return {boolean} Whether or not the element now has the attribute.\n */\nexport function toggleAttribute(element, name, forced) {\n  const hasAttribute = element.hasAttribute(name);\n  const enabled = forced !== undefined ? forced : !hasAttribute;\n\n  if (enabled !== hasAttribute) {\n    if (enabled) {\n      element.setAttribute(name, '');\n    } else {\n      element.removeAttribute(name);\n    }\n  }\n\n  return enabled;\n}\n\n/**\n * Parses a string as a boolean value using the expanded rules for DOM boolean\n * attributes:\n * - a `null` or `undefined` returns `null`;\n * - an empty string returns `true`;\n * - a \"false\" string returns `false`;\n * - otherwise, `true` is returned.\n *\n * @param {?string|undefined} s\n * @return {boolean|undefined}\n */\nexport function parseBooleanAttribute(s) {\n  return s == null ? undefined : s !== 'false';\n}\n\n/**\n * @param {!Window} win\n * @return {number} The width of the vertical scrollbar, in pixels.\n */\nexport function getVerticalScrollbarWidth(win) {\n  const {documentElement} = win.document;\n  const windowWidth = win./*OK*/ innerWidth;\n  const documentWidth = documentElement./*OK*/ clientWidth;\n  return windowWidth - documentWidth;\n}\n\n/**\n * Dispatches a custom event.\n *\n * @param {!Node} node\n * @param {string} name\n * @param {!Object=} opt_data Event data.\n * @param {!CustomEventOptionsDef=} opt_options\n */\nexport function dispatchCustomEvent(node, name, opt_data, opt_options) {\n  const data = opt_data || {};\n  // Constructors of events need to come from the correct window. Sigh.\n  const event = node.ownerDocument.createEvent('Event');\n\n  // Technically .data is not a property of Event.\n  /**@type {?}*/ (event).data = data;\n\n  const {bubbles, cancelable} = opt_options || DEFAULT_CUSTOM_EVENT_OPTIONS;\n  event.initEvent(name, bubbles, cancelable);\n  node.dispatchEvent(event);\n}\n\n/**\n * Ensures the child is contained by the parent, but not the parent itself.\n *\n * @param {!Node} parent\n * @param {!Node} child\n * @return {boolean}\n */\nexport function containsNotSelf(parent, child) {\n  return child !== parent && parent.contains(child);\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from '../mode';\nimport {urls} from '../config';\n\nconst CUSTOM_TEMPLATES = ['amp-mustache'];\nconst LATEST_VERSION = 'latest';\n\n/**\n * Calculate the base url for any scripts.\n * @param {!Location} location The window's location\n * @param {boolean=} opt_isLocalDev\n * @return {string}\n */\nexport function calculateScriptBaseUrl(location, opt_isLocalDev) {\n  if (opt_isLocalDev) {\n    let prefix = `${location.protocol}//${location.host}`;\n    if (\n      location.protocol == 'about:' ||\n      location.protocol == 'blob:' ||\n      location.protocol == 'data:'\n    ) {\n      prefix = '';\n    }\n    return `${prefix}/dist`;\n  }\n  return urls.cdn;\n}\n\n/**\n * Calculate script url for an extension.\n * @param {!Location} location The window's location\n * @param {string} extensionId\n * @param {string} version\n * @param {boolean=} opt_isLocalDev\n * @return {string}\n */\nexport function calculateExtensionScriptUrl(\n  location,\n  extensionId,\n  version,\n  opt_isLocalDev\n) {\n  const fileExtension = getMode().esm ? '.mjs' : '.js';\n  const base = calculateScriptBaseUrl(location, opt_isLocalDev);\n  const rtv = getMode().rtvVersion;\n  const extensionVersion = version ? '-' + version : '';\n  return `${base}/rtv/${rtv}/v0/${extensionId}${extensionVersion}${fileExtension}`;\n}\n\n/**\n * Calculate script url for an entry point.\n * If `opt_rtv` is true, returns the URL matching the current RTV.\n * @param {!Location} location The window's location\n * @param {string} entryPoint\n * @param {boolean=} isLocalDev\n * @param {boolean=} opt_rtv\n * @return {string}\n */\nexport function calculateEntryPointScriptUrl(\n  location,\n  entryPoint,\n  isLocalDev,\n  opt_rtv\n) {\n  const fileExtension = getMode().esm ? '.mjs' : '.js';\n  const base = calculateScriptBaseUrl(location, isLocalDev);\n  if (isLocalDev) {\n    return `${base}/${entryPoint}${fileExtension}`;\n  }\n  if (opt_rtv) {\n    return `${base}/rtv/${getMode().rtvVersion}/${entryPoint}${fileExtension}`;\n  }\n  return `${base}/${entryPoint}${fileExtension}`;\n}\n\n/**\n * Parse the extension version from a given script URL.\n * @param {string} scriptUrl\n * @return {?{extensionId: string, extensionVersion: string}}\n */\nexport function parseExtensionUrl(scriptUrl) {\n  if (!scriptUrl) {\n    return null;\n  }\n  // Note that the \"(\\.max)?\" group only applies to local dev.\n  const matches = scriptUrl.match(\n    /^(.*)\\/(.*)-([0-9.]+|latest)(\\.max)?\\.(?:js|mjs)$/i\n  );\n  const extensionId = matches ? matches[2] : undefined;\n  const extensionVersion = matches ? matches[3] : undefined;\n  if (!extensionId || !extensionVersion) {\n    return null;\n  }\n  return {extensionId, extensionVersion};\n}\n\n/**\n * Create the missing amp extension HTML script element.\n * @param {!Window} win\n * @param {string} extensionId\n * @param {string} version\n * @return {!Element} Script object\n */\nexport function createExtensionScript(win, extensionId, version) {\n  const scriptElement = win.document.createElement('script');\n  scriptElement.async = true;\n  if (isIntermediateExtension(extensionId)) {\n    version = '';\n  } else {\n    scriptElement.setAttribute(\n      CUSTOM_TEMPLATES.indexOf(extensionId) >= 0\n        ? 'custom-template'\n        : 'custom-element',\n      extensionId\n    );\n  }\n  scriptElement.setAttribute('data-script', extensionId);\n  scriptElement.setAttribute('i-amphtml-inserted', '');\n  if (getMode().esm) {\n    scriptElement.setAttribute('type', 'module');\n  }\n\n  // Propagate nonce to all generated script tags.\n  const currentScript = win.document.head.querySelector('script[nonce]');\n  if (currentScript) {\n    scriptElement.setAttribute('nonce', currentScript.getAttribute('nonce'));\n  }\n\n  // Allow error information to be collected\n  // https://github.com/ampproject/amphtml/issues/7353\n  scriptElement.setAttribute('crossorigin', 'anonymous');\n  let loc = win.location;\n  if (getMode(win).test && win.testLocation) {\n    loc = win.testLocation;\n  }\n  const scriptSrc = calculateExtensionScriptUrl(\n    loc,\n    extensionId,\n    version,\n    getMode(win).localDev\n  );\n  scriptElement.src = scriptSrc;\n  return scriptElement;\n}\n\n/**\n * Returns the extension <script> element and attribute for the given\n * extension ID, if it exists. Otherwise, returns null.\n * @param {!Window} win\n * @param {string} extensionId\n * @param {string} version\n * @param {boolean} latest\n * @param {boolean=} includeInserted If true, includes script elements that\n *   are inserted by the runtime dynamically. Default is true.\n * @return {!Array<!Element>}\n */\nexport function getExtensionScripts(\n  win,\n  extensionId,\n  version,\n  latest,\n  includeInserted = true\n) {\n  // Always ignore <script> elements that have a mismatched RTV.\n  const modifier =\n    ':not([i-amphtml-loaded-new-version])' +\n    (includeInserted ? '' : ':not([i-amphtml-inserted])');\n  // We have to match against \"src\" because a few extensions, such as\n  // \"amp-viewer-integration\", do not have \"custom-element\" attribute.\n  const matches = win.document.head./*OK*/ querySelectorAll(\n    `script[src*=\"/${extensionId}-\"]${modifier}`\n  );\n  const filtered = [];\n  for (let i = 0; i < matches.length; i++) {\n    const match = matches[i];\n    const urlParts = parseExtensionUrl(match.src);\n    if (!urlParts) {\n      continue;\n    }\n    const {\n      extensionId: scriptExtensionId,\n      extensionVersion: scriptExtensionVersion,\n    } = urlParts;\n    if (\n      scriptExtensionId == extensionId &&\n      (isIntermediateExtension(extensionId) ||\n        scriptExtensionVersion == version ||\n        (scriptExtensionVersion == LATEST_VERSION && latest))\n    ) {\n      filtered.push(match);\n    }\n  }\n  return filtered;\n}\n\n/**\n * Get list of all the extension JS files.\n * @param {HTMLHeadElement|Element|ShadowRoot|Document} head\n * @return {!Array<{extensionId: string, extensionVersion: string}>}\n */\nexport function extensionScriptsInNode(head) {\n  // ampdoc.getHeadNode() can return null.\n  if (!head) {\n    return [];\n  }\n  // Note: Some extensions don't have [custom-element] or [custom-template]\n  // e.g. amp-viewer-integration.\n  const list = head.querySelectorAll(\n    'script[custom-element],script[custom-template]'\n  );\n  const scripts = [];\n  for (let i = 0; i < list.length; i++) {\n    const script = list[i];\n    const extensionId =\n      script.getAttribute('custom-element') ||\n      script.getAttribute('custom-template');\n    const urlParts = parseExtensionUrl(script.src);\n    if (extensionId && urlParts) {\n      scripts.push({extensionId, extensionVersion: urlParts.extensionVersion});\n    }\n  }\n  return scripts;\n}\n\n/**\n * Verifies that an extension script is present in head for\n * installation.\n * @param {!Window} win\n * @param {string} id\n * @param {string} version\n * @return {boolean}\n */\nexport function extensionScriptInNode(win, id, version) {\n  return extensionScriptsInNode(win.document.head).some(\n    ({extensionId, extensionVersion}) =>\n      id == extensionId && version == extensionVersion\n  );\n}\n\n/**\n * @param {string} extensionId\n * @return {boolean}\n */\nfunction isIntermediateExtension(extensionId) {\n  return extensionId.startsWith('_');\n}\n", "/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from './dom';\nimport {extensionScriptInNode} from './service/extension-script';\nimport {\n  getAmpdoc,\n  getService,\n  getServiceForDocOrNull,\n  getServicePromise,\n  getServicePromiseForDoc,\n  getServicePromiseOrNull,\n  getServicePromiseOrNullForDoc,\n} from './service';\nimport {userAssert} from './log';\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {string} version The extension version.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailable(\n  win,\n  id,\n  extension,\n  version,\n  opt_element\n) {\n  const s = getServicePromiseOrNull(win, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  return getElementServicePromiseOrNull(\n    win,\n    id,\n    extension,\n    version,\n    opt_element\n  );\n}\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Element|!ShadowRoot} element\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementServiceForDoc(element, id, extension, opt_element) {\n  return getElementServiceIfAvailableForDoc(\n    element,\n    id,\n    extension,\n    opt_element\n  ).then((service) => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Element|!ShadowRoot} element\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDoc(\n  element,\n  id,\n  extension,\n  opt_element\n) {\n  const s = getServicePromiseOrNullForDoc(element, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  const ampdoc = getAmpdoc(element);\n  return ampdoc\n    .whenExtensionsKnown()\n    .then(() => {\n      const version = ampdoc.getExtensionVersion(extension);\n      if (!version) {\n        return null;\n      }\n      const extensions = getService(ampdoc.win, 'extensions');\n      return extensions.waitForExtension(extension, version);\n    })\n    .then((ext) => {\n      if (!ext) {\n        return null;\n      }\n      // If this service is provided by an element, then we can't depend on\n      // the service (they may not use the element).\n      if (opt_element) {\n        return getServicePromiseOrNullForDoc(element, id);\n      }\n      return getServicePromiseForDoc(element, id);\n    });\n}\n\n/**\n * Returns a promise for service for the given id in the embed scope of\n * a given element, if it exists. Falls back to ampdoc scope if the element\n * is not embedded.\n *\n * @param {!Element|!ShadowRoot} element\n * @param {string} id of the service.\n * @param {string} extension Name of the custom element that provides\n *     the implementation of this service.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDocInEmbedScope(\n  element,\n  id,\n  extension\n) {\n  const s = getServiceForDocOrNull(element, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (Promise.resolve(s));\n  }\n  return getElementServiceIfAvailableForDoc(element, id, extension);\n}\n\n/**\n * Throws user error if `service` is null.\n * @param {Object} service\n * @param {string} id\n * @param {string} extension\n * @return {!Object}\n * @private\n * @closurePrimitive {asserts.matchesReturn}\n */\nfunction assertService(service, id, extension) {\n  return /** @type {!Object} */ (\n    userAssert(\n      service,\n      'Service %s was requested to be provided through %s, ' +\n        'but %s is not loaded in the current page. To fix this ' +\n        'problem load the JavaScript file for %s in this page.',\n      id,\n      extension,\n      extension,\n      extension\n    )\n  );\n}\n\n/**\n * Returns the promise for service with `id` on the given window if available.\n * Otherwise, resolves with null (service was not registered).\n * @param {!Window} win\n * @param {string} id\n * @param {string} extension\n * @param {string} version\n * @param {boolean=} opt_element\n * @return {!Promise<Object>}\n * @private\n */\nfunction getElementServicePromiseOrNull(\n  win,\n  id,\n  extension,\n  version,\n  opt_element\n) {\n  return dom\n    .waitForBodyOpenPromise(win.document)\n    .then(() => {\n      // If there is an extension script wait for it to load before trying\n      // to get the service. Prevents a race condition when everything but\n      // the extensions is in cache. If there is no script then it's either\n      // not present, or the service was defined by a test. In those cases\n      // we don't wait around for an extension that does not exist.\n      const extensions = getService(win, 'extensions');\n\n      // TODO(jpettitt) investigate registerExtension to short circuit\n      // the dom call in extensionScriptsInNode()\n      if (!extensionScriptInNode(extensions.win, extension, version)) {\n        return null;\n      }\n      return extensions.waitForExtension(extension, version);\n    })\n    .then((ext) => {\n      if (!ext) {\n        return null;\n      }\n      // If this service is provided by an element, then we can't depend on\n      // the service (they may not use the element).\n      if (opt_element) {\n        return getServicePromiseOrNull(win, id);\n      }\n      return getServicePromise(win, id);\n    });\n}\n", "/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getAmpdoc,\n  getExistingServiceOrNull,\n  getService,\n  getServiceForDoc,\n  getServiceForDocOrNull,\n  getServiceInEmbedWin,\n  getServicePromiseForDoc,\n} from './service';\nimport {\n  getElementServiceForDoc,\n  getElementServiceIfAvailable,\n  getElementServiceIfAvailableForDoc,\n  getElementServiceIfAvailableForDocInEmbedScope,\n} from './element-service';\n\n/** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */\nexport let SubscriptionService;\n\nexport class Services {\n  /**\n   * Hint: Add extensions folder path to compile.js with\n   * warnings cannot find modules.\n   */\n\n  /**\n   * Returns a promise for the Access service.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDoc(element) {\n    return /** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceForDoc(element, 'access', 'amp-access')\n    );\n  }\n\n  /**\n   * Returns a promise for the Access service or a promise for null if the\n   * service is not available on the current page.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceIfAvailableForDoc(element, 'access', 'amp-access')\n    );\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!SubscriptionService>}\n   */\n  static subscriptionsServiceForDoc(element) {\n    return /** @type {!Promise<!SubscriptionService>} */ (\n      getElementServiceForDoc(element, 'subscriptions', 'amp-subscriptions')\n    );\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?SubscriptionService>}\n   */\n  static subscriptionsServiceForDocOrNull(element) {\n    return /** @type {!Promise<?SubscriptionService>} */ (\n      getElementServiceIfAvailableForDoc(\n        element,\n        'subscriptions',\n        'amp-subscriptions'\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/action-impl.ActionService}\n   */\n  static actionServiceForDoc(element) {\n    return /** @type {!./service/action-impl.ActionService} */ (\n      getServiceForDocOrNull(element, 'action')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/standard-actions-impl.StandardActions}\n   */\n  static standardActionsForDoc(element) {\n    return /** @type {!./service/standard-actions-impl.StandardActions} */ (\n      getServiceForDocOrNull(element, 'standard-actions')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-analytics/0.1/activity-impl.Activity>}\n   */\n  static activityForDoc(element) {\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/activity-impl.Activity>} */ (\n      getElementServiceForDoc(element, 'activity', 'amp-analytics')\n    );\n  }\n\n  /**\n   * Returns the global instance of the `AmpDocService` service that can be\n   * used to resolve an ampdoc for any node: either in the single-doc or\n   * shadow-doc environment.\n   * @param {!Window} window\n   * @return {!./service/ampdoc-impl.AmpDocService}\n   */\n  static ampdocServiceFor(window) {\n    return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n      getService(window, 'ampdoc')\n    );\n  }\n\n  /**\n   * Returns the AmpDoc for the specified context node.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrAmpDoc\n   * @return {!./service/ampdoc-impl.AmpDoc}\n   */\n  static ampdoc(nodeOrAmpDoc) {\n    return getAmpdoc(nodeOrAmpDoc);\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @param {boolean=} loadAnalytics\n   * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDoc(element, loadAnalytics = false) {\n    if (loadAnalytics) {\n      // Get Extensions service and force load analytics extension.\n      const ampdoc = getAmpdoc(element);\n      Services.extensionsFor(ampdoc.win)./*OK*/ installExtensionForDoc(\n        ampdoc,\n        'amp-analytics'\n      );\n    }\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceForDoc(\n        element,\n        'amp-analytics-instrumentation',\n        'amp-analytics'\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceIfAvailableForDoc(\n        element,\n        'amp-analytics-instrumentation',\n        'amp-analytics'\n      )\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/batched-xhr-impl.BatchedXhr}\n   */\n  static batchedXhrFor(window) {\n    return /** @type {!./service/batched-xhr-impl.BatchedXhr} */ (\n      getService(window, 'batched-xhr')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}\n   */\n  static bindForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n        element,\n        'bind',\n        'amp-bind'\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-script/0.1/amp-script.AmpScriptService>}\n   */\n  static scriptForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-script/0.1/amp-script.AmpScriptService>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n        element,\n        'amp-script',\n        'amp-script'\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/cid-impl.CidDef>}\n   */\n  static cidForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/cid-impl.CidDef>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cid')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/navigation.Navigation}\n   */\n  static navigationForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/navigation.Navigation} */ (\n      getServiceForDoc(elementOrAmpDoc, 'navigation')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-loader/0.1/amp-loader.LoaderService>}\n   */\n  static loaderServiceForDoc(element) {\n    return /** @type {!Promise<!../extensions/amp-loader/0.1/amp-loader.LoaderService>} */ (\n      getElementServiceForDoc(element, 'loader', 'amp-loader')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-standalone/0.1/amp-standalone.StandaloneService>}\n   */\n  static standaloneServiceForDoc(element) {\n    return /** @type {!Promise<!../extensions/amp-standalone/0.1/amp-standalone.StandaloneService>} */ (\n      getElementServiceForDoc(element, 'standalone', 'amp-standalone')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/crypto-impl.Crypto}\n   */\n  static cryptoFor(window) {\n    return /** @type {!./service/crypto-impl.Crypto} */ (\n      getService(window, 'crypto')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc\n   */\n  static documentInfoForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/document-info-impl.DocInfo} */ (\n      getServiceForDoc(elementOrAmpDoc, 'documentInfo')\n    ).get();\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/extensions-impl.Extensions}\n   */\n  static extensionsFor(window) {\n    return /** @type {!./service/extensions-impl.Extensions} */ (\n      getService(window, 'extensions')\n    );\n  }\n\n  /**\n   * Returns a service to register callbacks we wish to execute when an\n   * amp-form is submitted.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<../extensions/amp-form/0.1/form-submit-service.FormSubmitService>}\n   */\n  static formSubmitForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<../extensions/amp-form/0.1/form-submit-service.FormSubmitService>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'form-submit-service')\n    );\n  }\n\n  /**\n   * Returns service to listen for `hidden` attribute mutations.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/hidden-observer-impl.HiddenObserver}\n   */\n  static hiddenObserverForDoc(element) {\n    return /** @type {!./service/hidden-observer-impl.HiddenObserver} */ (\n      getServiceForDocOrNull(element, 'hidden-observer')\n    );\n  }\n\n  /**\n   * Returns service implemented in service/history-impl.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/history-impl.History}\n   */\n  static historyForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/history-impl.History} */ (\n      getServiceForDoc(elementOrAmpDoc, 'history')\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!./input.Input}\n   */\n  static inputFor(win) {\n    return getService(win, 'input');\n  }\n\n  /**s\n   * Returns a promise for the Inputmask service.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-inputmask/0.1/amp-inputmask.AmpInputmaskService>}\n   */\n  static inputmaskServiceForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-inputmask/0.1/amp-inputmask.AmpInputmaskService>} */ (\n      getElementServiceIfAvailableForDoc(element, 'inputmask', 'amp-inputmask')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {?./service/loading-indicator.LoadingIndicatorImpl}\n   */\n  static loadingIndicatorOrNull(elementOrAmpDoc) {\n    return /** @type {?./service/loading-indicator.LoadingIndicatorImpl} */ (\n      getServiceForDocOrNull(elementOrAmpDoc, 'loadingIndicator')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!../extensions/amp-next-page/1.0/service.NextPageService}\n   */\n  static nextPageServiceForDoc(elementOrAmpDoc) {\n    return /** @type {!../extensions/amp-next-page/1.0/service.NextPageService} */ (\n      getServiceForDoc(elementOrAmpDoc, 'next-page')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/mutator-interface.MutatorInterface}\n   */\n  static mutatorForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/mutator-interface.MutatorInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'mutator')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/owners-interface.OwnersInterface}\n   */\n  static ownersForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/owners-interface.OwnersInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'owners')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceFor(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getService(window, 'performance')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceForOrNull(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getExistingServiceOrNull(window, 'performance')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/platform-impl.Platform}\n   */\n  static platformFor(window) {\n    return /** @type {!./service/platform-impl.Platform} */ (\n      getService(window, 'platform')\n    );\n  }\n\n  /**\n   * Not installed by default; must be installed in extension code before use.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/position-observer/position-observer-impl.PositionObserver}\n   * @throws If the service is not installed.\n   */\n  static positionObserverForDoc(element) {\n    return /** @type {!./service/position-observer/position-observer-impl.PositionObserver} */ (\n      getServiceForDoc(element, 'position-observer')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./preconnect.PreconnectService}\n   */\n  static preconnectFor(window) {\n    return getService(window, 'preconnect');\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/resources-interface.ResourcesInterface}\n   */\n  static resourcesForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/resources-interface.ResourcesInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'resources')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/resources-interface.ResourcesInterface>}\n   */\n  static resourcesPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/resources-interface.ResourcesInterface>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'resources')\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/variable-service.AmpStoryVariableService>}\n   */\n  static storyVariableServiceForOrNull(win) {\n    return (\n      /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.AmpStoryVariableService>} */\n      (getElementServiceIfAvailable(win, 'story-variable', 'amp-story', '1.0'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/variable-service.AmpStoryVariableService}\n   */\n  static storyVariableService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/variable-service.AmpStoryVariableService} */\n      (getExistingServiceOrNull(win, 'story-variable'))\n    );\n  }\n\n  /**\n   * Version of the story store service depends on which version of amp-story\n   * the publisher is loading. They all have the same implementation.\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService>}\n   */\n  static storyStoreServiceForOrNull(win) {\n    return (\n      /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService>} */\n      (getElementServiceIfAvailable(win, 'story-store', 'amp-story', '1.0'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */\n      (getExistingServiceOrNull(win, 'story-store'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-media-query-service.AmpStoryMediaQueryService}\n   */\n  static storyMediaQueryService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/amp-story-media-query-service.AmpStoryMediaQueryService} */\n      (getExistingServiceOrNull(win, 'story-media-query'))\n    );\n  }\n\n  /**\n   * Get promise with story request service\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService>}\n   */\n  static storyRequestServiceForOrNull(win) {\n    return (\n      /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService>} */\n      (getElementServiceIfAvailable(win, 'story-request', 'amp-story', '1.0'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */\n      (getExistingServiceOrNull(win, 'story-request'))\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/media-performance-metrics-service.MediaPerformanceMetricsService}\n   */\n  static mediaPerformanceMetricsService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/media-performance-metrics-service.MediaPerformanceMetricsService} */\n      (getExistingServiceOrNull(win, 'media-performance-metrics'))\n    );\n  }\n\n  /**\n   * @param {!Element} el\n   * @return {!Promise<./service/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNull(el) {\n    return /** @type {!Promise<?./service/localization.LocalizationService>} */ (\n      getServicePromiseForDoc(el, 'localization')\n    );\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {?./service/localization.LocalizationService}\n   */\n  static localizationForDoc(element) {\n    return /** @type {?./service/localization.LocalizationService} */ (\n      getServiceForDocOrNull(element, 'localization')\n    );\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService>}\n   */\n  static storyAnalyticsServiceForOrNull(win) {\n    return (\n      /** @type {!Promise<?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService>} */\n      (\n        getElementServiceIfAvailable(\n          win,\n          'story-analytics',\n          'amp-story',\n          '1.0',\n          true\n        )\n      )\n    );\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService}\n   */\n  static storyAnalyticsService(win) {\n    return (\n      /** @type {?../extensions/amp-story/1.0/story-analytics.StoryAnalyticsService} */\n      (getExistingServiceOrNull(win, 'story-analytics'))\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}\n   */\n  static webAnimationServiceFor(element) {\n    return (\n      /** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */\n      (getElementServiceForDoc(element, 'web-animation', 'amp-animation'))\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/real-time-config/real-time-config-impl.RealTimeConfigManager>}\n   */\n  static realTimeConfigForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/real-time-config/real-time-config-impl.RealTimeConfigManager>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'real-time-config')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   */\n  static storageForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'storage')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   * TODO(dmanek): Add tests for this method.\n   */\n  static storageForTopLevelDoc(elementOrAmpDoc) {\n    const thisAmpdoc = Services.ampdoc(elementOrAmpDoc);\n    const ampdocService = Services.ampdocServiceFor(thisAmpdoc.win);\n    const topAmpdoc = ampdocService.isSingleDoc()\n      ? ampdocService.getSingleDoc()\n      : null;\n    // We need to verify that ampdocs are on the same origin, therefore\n    // we compare the windows of both.\n    const ampdoc =\n      topAmpdoc && topAmpdoc.win == thisAmpdoc.win ? topAmpdoc : thisAmpdoc;\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(ampdoc, 'storage')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/template-impl.Templates}\n   */\n  static templatesForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/template-impl.Templates} */ (\n      getServiceForDoc(elementOrAmpDoc, 'templates')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/timer-impl.Timer}\n   */\n  static timerFor(window) {\n    // TODO(alabiaga): This will always return the top window's Timer service.\n    return /** @type {!./service/timer-impl.Timer} */ (\n      getServiceInEmbedWin(window, 'timer')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/url-replacements-impl.UrlReplacements}\n   */\n  static urlReplacementsForDoc(element) {\n    return /** @type {!./service/url-replacements-impl.UrlReplacements} */ (\n      getServiceForDocOrNull(element, 'url-replace')\n    );\n  }\n\n  /**\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}\n   */\n  static userNotificationManagerForDoc(element) {\n    return (\n      /** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */\n      (\n        getElementServiceForDoc(\n          element,\n          'userNotificationManager',\n          'amp-user-notification'\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns a promise for the consentPolicy Service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}\n   */\n  static consentPolicyServiceForDocOrNull(element) {\n    return (\n      /** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */\n      (\n        getElementServiceIfAvailableForDoc(\n          element,\n          'consentPolicyManager',\n          'amp-consent'\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns a promise for the geo service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}\n   */\n  static geoForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */ (\n      getElementServiceIfAvailableForDoc(element, 'geo', 'amp-geo', true)\n    );\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!./service/url-impl.Url}\n   */\n  static urlForDoc(element) {\n    return /** @type {!./service/url-impl.Url} */ (\n      getServiceForDocOrNull(element, 'url')\n    );\n  }\n\n  /**\n   * Returns a promise for the experiment variants or a promise for null if it\n   * is not available on the current page.\n   * @param {!Element|!ShadowRoot} element\n   * @return {!Promise<?../extensions/amp-experiment/0.1/variant.Variants>}\n   */\n  static variantsForDocOrNull(element) {\n    return /** @type {!Promise<?../extensions/amp-experiment/0.1/variant.Variants>} */ (\n      getElementServiceIfAvailableForDoc(\n        element,\n        'variant',\n        'amp-experiment',\n        true\n      )\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/video-manager-impl.VideoManager}\n   */\n  static videoManagerForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/video-manager-impl.VideoManager} */ (\n      getServiceForDoc(elementOrAmpDoc, 'video-manager')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/viewer-interface.ViewerInterface}\n   */\n  static viewerForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/viewer-interface.ViewerInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'viewer')\n    );\n  }\n\n  /**\n   * Returns promise for the viewer. This is an unusual case and necessary only\n   * for services that need reference to the viewer before it has been\n   * initialized. Most of the code, however, just should use `viewerForDoc`.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/viewer-interface.ViewerInterface>}\n   */\n  static viewerPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/viewer-interface.ViewerInterface>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'viewer')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/vsync-impl.Vsync}\n   */\n  static vsyncFor(window) {\n    return /** @type {!./service/vsync-impl.Vsync} */ (\n      getService(window, 'vsync')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/viewport/viewport-interface.ViewportInterface}\n   */\n  static viewportForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/viewport/viewport-interface.ViewportInterface} */ (\n      getServiceForDoc(elementOrAmpDoc, 'viewport')\n    );\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/xhr-impl.Xhr}\n   */\n  static xhrFor(window) {\n    return /** @type {!./service/xhr-impl.Xhr} */ (getService(window, 'xhr'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!../extensions/amp-google-assistant-assistjs/0.1/assistjs-frame-service.AssistjsFrameService}\n   */\n  static assistjsFrameServiceForDoc(elementOrAmpDoc) {\n    return /** @type {!../extensions/amp-google-assistant-assistjs/0.1/assistjs-frame-service.AssistjsFrameService} */ (\n      getServiceForDoc(elementOrAmpDoc, 'assistjs-frame-service')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!../extensions/amp-google-assistant-assistjs/0.1/assistjs-config-service.AssistjsConfigService}\n   */\n  static assistjsConfigServiceForDoc(elementOrAmpDoc) {\n    return /** @type {!../extensions/amp-google-assistant-assistjs/0.1/assistjs-config-service.AssistjsConfigService} */ (\n      getServiceForDoc(elementOrAmpDoc, 'assistjs-config-service')\n    );\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<../amp-cache-url/amp-cache-url.AmpCacheUrlService>}\n   */\n  static cacheUrlServicePromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<?../amp-cache-url/amp-cache-url.AmpCacheUrlService>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cache-url')\n    );\n  }\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {childElementsByTag} from './core/dom/query';\nimport {isJsonScriptTag} from './dom';\nimport {parseJson} from './core/types/object/json';\n\n/**\n * Helper method to get the json config from an element <script> tag\n * @param {!Element} element\n * @return {?JsonObject}\n * @throws {!Error} If element does not have exactly one <script> child\n * with type=\"application/json\", or if the <script> contents are not valid JSON.\n */\nexport function getChildJsonConfig(element) {\n  const scripts = childElementsByTag(element, 'script');\n  const n = scripts.length;\n  if (n !== 1) {\n    throw new Error(`Found ${scripts.length} <script> children. Expected 1.`);\n  }\n  const script = scripts[0];\n  if (!isJsonScriptTag(script)) {\n    throw new Error('<script> child must have type=\"application/json\"');\n  }\n  try {\n    return parseJson(script.textContent);\n  } catch (unusedError) {\n    throw new Error('Failed to parse <script> contents. Is it valid JSON?');\n  }\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CMP_CONFIG} from './cmps';\nimport {CONSENT_POLICY_STATE} from '../../../src/core/constants/consent-state';\nimport {GEO_IN_GROUP} from '../../amp-geo/0.1/amp-geo-in-group';\nimport {Services} from '../../../src/services';\nimport {childElementByTag} from '../../../src/core/dom/query';\nimport {deepMerge, hasOwn, map} from '../../../src/core/types/object';\nimport {devAssert, user, userAssert} from '../../../src/log';\nimport {getChildJsonConfig} from '../../../src/json';\n\nconst TAG = 'amp-consent/consent-config';\nconst AMP_STORY_CONSENT_TAG = 'amp-story-consent';\n\nconst ALLOWED_DEPR_CONSENTINSTANCE_ATTRS = {\n  'promptUI': true,\n  'checkConsentHref': true,\n  // `promptIfUnknownForGeoGroup` is legacy field\n  'promptIfUnknownForGeoGroup': true,\n  'onUpdateHref': true,\n};\n\n/** @const @type {!Object<string, boolean>} */\nconst CONSENT_VARS_ALLOWED_LIST = {\n  'CLIENT_ID': true,\n  'PAGE_VIEW_ID': true,\n  'PAGE_VIEW_ID_64': true,\n};\n\n/** @const @type {string} */\nexport const CID_SCOPE = 'AMP-CONSENT';\n\nexport class ConsentConfig {\n  /** @param {!Element} element */\n  constructor(element) {\n    /** @private {!Element} */\n    this.element_ = element;\n\n    /** @private {?string} */\n    this.matchedGeoGroup_ = null;\n\n    /** @private {?Promise<!JsonObject>} */\n    this.configPromise_ = null;\n  }\n\n  /**\n   * Read validate and return the config\n   * @return {!Promise<!JsonObject>}\n   */\n  getConsentConfigPromise() {\n    if (!this.configPromise_) {\n      this.configPromise_ = this.validateAndParseConfig_();\n    }\n    return this.configPromise_;\n  }\n\n  /**\n   * Returns the matched geoGroup. Call after getConsentConfigPromise\n   * has resolved.\n   * @return {?string}\n   */\n  getMatchedGeoGroup() {\n    return this.matchedGeoGroup_;\n  }\n\n  /**\n   * Convert the inline config to new format\n   * @param {!JsonObject} config\n   * @return {!Object}\n   */\n  convertInlineConfigFormat_(config) {\n    const consentsConfigDepr = config['consents'];\n\n    if (!config['consents']) {\n      // New format, return\n      return config;\n    }\n    // Assert single consent instance\n    const keys = Object.keys(consentsConfigDepr);\n\n    userAssert(\n      keys.length <= 1,\n      '%s: only single consent instance is supported',\n      TAG\n    );\n\n    if (keys.length > 0) {\n      config['consentInstanceId'] = keys[0];\n      // Copy config['consents']['key'] to config\n      const consentInstanceConfigDepr = config['consents'][keys[0]];\n      const attrs = Object.keys(consentInstanceConfigDepr);\n      for (let i = 0; i < attrs.length; i++) {\n        const attr = attrs[i];\n        if (!config[attr] && ALLOWED_DEPR_CONSENTINSTANCE_ATTRS[attr]) {\n          // Do not override if has been specified, or the attr is not supported\n          // in consent instance before\n          config[attrs[i]] = consentInstanceConfigDepr[attrs[i]];\n        }\n      }\n    }\n\n    delete config['consents'];\n    return config;\n  }\n\n  /**\n   * Read and parse consent config\n   * An example valid config json looks like\n   * {\n   *  \"consentInstanceId\": \"ABC\",\n   *  \"checkConsentHref\": \"https://fake.com\"\n   * }\n   * @return {!Promise<!JsonObject>}\n   */\n  validateAndParseConfig_() {\n    const inlineConfig = this.convertInlineConfigFormat_(\n      /** @type {!JsonObject} */ (\n        userAssert(this.getInlineConfig_(), '%s: Inline config not found')\n      )\n    );\n\n    const cmpConfig = this.getCMPConfig_();\n\n    const config = /** @type {!JsonObject} */ (\n      deepMerge(cmpConfig || {}, inlineConfig || {}, 1)\n    );\n\n    userAssert(\n      config['consentInstanceId'],\n      '%s: consentInstanceId to store consent info is required',\n      TAG\n    );\n\n    if (config['policy']) {\n      // Only respect 'default' consent policy;\n      const keys = Object.keys(config['policy']);\n      // TODO (@zhouyx): Validate waitFor value\n      for (let i = 0; i < keys.length; i++) {\n        if (keys[i] != 'default') {\n          user().warn(\n            TAG,\n            'policy %s is currently not supported and will be ignored',\n            keys[i]\n          );\n          delete config['policy'][keys[i]];\n        }\n      }\n    }\n\n    // `promptIfUnknownForGeoGroup` is legacy field\n    const group = config['promptIfUnknownForGeoGroup'];\n    if (typeof group === 'string') {\n      config['consentRequired'] = false;\n      config['geoOverride'] = {\n        [group]: {\n          'consentRequired': true,\n        },\n      };\n    } else if (\n      config['consentRequired'] === undefined &&\n      config['checkConsentHref']\n    ) {\n      config['consentRequired'] = 'remote';\n    }\n\n    return this.mergeGeoOverride_(config)\n      .then((mergedConfig) => this.validateMergedGeoOverride_(mergedConfig))\n      .then((validatedConfig) => this.checkStoryConsent_(validatedConfig));\n  }\n\n  /**\n   * Merge correct geoOverride object into toplevel config.\n   * @param {!JsonObject} config\n   * @return {!Promise<!JsonObject>}\n   */\n  mergeGeoOverride_(config) {\n    if (!config['geoOverride']) {\n      return Promise.resolve(config);\n    }\n    return Services.geoForDocOrNull(this.element_).then((geoService) => {\n      userAssert(\n        geoService,\n        '%s: requires <amp-geo> to use `geoOverride`',\n        TAG\n      );\n      const mergedConfig = map(config);\n      const geoGroups = Object.keys(config['geoOverride']);\n      // Stop at the first group that the geoService says we're in and then merge configs.\n      for (let i = 0; i < geoGroups.length; i++) {\n        if (geoService.isInCountryGroup(geoGroups[i]) === GEO_IN_GROUP.IN) {\n          const geoConfig = config['geoOverride'][geoGroups[i]];\n          if (hasOwn(geoConfig, 'consentInstanceId')) {\n            user().error(\n              TAG,\n              'consentInstanceId cannot be overriden in geoGroup:',\n              geoGroups[i]\n            );\n            delete geoConfig['consentInstanceId'];\n          }\n          deepMerge(mergedConfig, geoConfig, 1);\n          this.matchedGeoGroup_ = geoGroups[i];\n          break;\n        }\n      }\n      delete mergedConfig['geoOverride'];\n      return mergedConfig;\n    });\n  }\n\n  /**\n   * Validate merged geoOverride\n   * @param {!JsonObject} mergedConfig\n   * @return {!JsonObject}\n   */\n  validateMergedGeoOverride_(mergedConfig) {\n    const consentRequired = mergedConfig['consentRequired'];\n    userAssert(\n      typeof consentRequired === 'boolean' || consentRequired === 'remote',\n      '`consentRequired` is required',\n      TAG\n    );\n    if (consentRequired === 'remote') {\n      userAssert(\n        mergedConfig['checkConsentHref'],\n        '%s: `checkConsentHref` must be specified if `consentRequired` is remote',\n        TAG\n      );\n    }\n    return mergedConfig;\n  }\n\n  /**\n   * Validate if story consent then no promptUiSrc\n   * @param {!JsonObject} config\n   * @return {!JsonObject}\n   */\n  checkStoryConsent_(config) {\n    if (childElementByTag(this.element_, AMP_STORY_CONSENT_TAG)) {\n      userAssert(\n        !config['promptUISrc'],\n        '%s: `promptUiSrc` cannot be specified while using %s.',\n        TAG,\n        AMP_STORY_CONSENT_TAG\n      );\n    }\n    return config;\n  }\n\n  /**\n   * Read the inline config from publisher\n   * @return {?JsonObject}\n   */\n  getInlineConfig_() {\n    // All consent config within the amp-consent component. There will be only\n    // one single amp-consent allowed in page.\n    try {\n      return getChildJsonConfig(this.element_);\n    } catch (e) {\n      throw user(this.element_).createError(TAG, e);\n    }\n  }\n\n  /**\n   * Read and format the CMP config\n   * The returned CMP config should looks like\n   * {\n   *  \"consentInstanceId\": \"foo\",\n   *  \"checkConsentHref\": \"https://fake.com\",\n   *  \"promptUISrc\": \"https://fake.com/promptUI.html\",\n   *  \"uiConfig\": {\n   *    \"overlay\": true\n   *   }\n   * }\n   * @return {?JsonObject}\n   */\n  getCMPConfig_() {\n    const type = this.element_.getAttribute('type');\n    if (!type) {\n      return null;\n    }\n    userAssert(CMP_CONFIG[type], '%s: invalid CMP type %s', TAG, type);\n    const importConfig = CMP_CONFIG[type];\n    this.validateCMPConfig_(importConfig);\n    return importConfig;\n  }\n\n  /**\n   * Check if the CMP config is valid\n   * @param {!JsonObject} config\n   */\n  validateCMPConfig_(config) {\n    const assertValues = [\n      'consentInstanceId',\n      'checkConsentHref',\n      'promptUISrc',\n    ];\n    for (let i = 0; i < assertValues.length; i++) {\n      const attribute = assertValues[i];\n      devAssert(config[attribute], 'CMP config must specify %s', attribute);\n    }\n  }\n}\n\n/**\n * Expand consent endpoint url\n * @param {!Element|!ShadowRoot} element\n * @param {string} url\n * @return {!Promise<string>}\n */\nexport function expandConsentEndpointUrl(element, url) {\n  return Services.urlReplacementsForDoc(element).expandUrlAsync(\n    url,\n    {\n      'CLIENT_ID': getConsentCID(element),\n    },\n    CONSENT_VARS_ALLOWED_LIST\n  );\n}\n\n/**\n * Return AMP CONSENT scoped CID\n * @param {!Element|!ShadowRoot|!../../../src/service/ampdoc-impl.AmpDoc} node\n * @return {!Promise<string>}\n */\nexport function getConsentCID(node) {\n  return Services.cidForDoc(node).then((cid) => {\n    return cid.get(\n      {scope: CID_SCOPE, createCookieIfNotPresent: true},\n      /** consent */ Promise.resolve()\n    );\n  });\n}\n\n/**\n * Expand the passed in policyConfig and generate predefined policy entires\n * @param {!JsonObject} policyConfig\n * @param {string} consentId\n * @return {!JsonObject}\n */\nexport function expandPolicyConfig(policyConfig, consentId) {\n  // Generate default policy\n  const defaultWaitForItems = {};\n\n  defaultWaitForItems[consentId] = undefined;\n\n  const defaultPolicy = {\n    'waitFor': defaultWaitForItems,\n  };\n\n  // TODO(@zhouyx): unblockOn is internal now.\n  const unblockOnAll = [\n    CONSENT_POLICY_STATE.UNKNOWN,\n    CONSENT_POLICY_STATE.SUFFICIENT,\n    CONSENT_POLICY_STATE.INSUFFICIENT,\n    CONSENT_POLICY_STATE.UNKNOWN_NOT_REQUIRED,\n  ];\n\n  const predefinedNone = {\n    'waitFor': defaultWaitForItems,\n    // Experimental config, do not expose\n    'unblockOn': unblockOnAll,\n  };\n\n  const rejectAllOnZero = {\n    'waitFor': defaultWaitForItems,\n    'timeout': {\n      'seconds': 0,\n      'fallbackAction': 'reject',\n    },\n    'unblockOn': unblockOnAll,\n  };\n\n  policyConfig['_till_responded'] = predefinedNone;\n\n  policyConfig['_till_accepted'] = defaultPolicy;\n\n  policyConfig['_auto_reject'] = rejectAllOnZero;\n\n  if (policyConfig && policyConfig['default']) {\n    return policyConfig;\n  }\n\n  policyConfig['default'] = defaultPolicy;\n\n  return policyConfig;\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {removeItem} from '../types/array';\n\n/**\n * This class helps to manage observers. Observers can be added, removed or\n * fired through and instance of this class.\n * @template TYPE\n */\nexport class Observable {\n  /**\n   * Creates an instance of Observable.\n   */\n  constructor() {\n    /** @type {?Array<function(TYPE)>} */\n    this.handlers_ = null;\n  }\n\n  /**\n   * Adds the observer to this instance.\n   * @param {function(TYPE)} handler Observer's handler.\n   * @return {!UnlistenDef}\n   */\n  add(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = [];\n    }\n    this.handlers_.push(handler);\n    return () => {\n      this.remove(handler);\n    };\n  }\n\n  /**\n   * Removes the observer from this instance.\n   * @param {function(TYPE)} handler Observer's instance.\n   */\n  remove(handler) {\n    if (!this.handlers_) {\n      return;\n    }\n    removeItem(this.handlers_, handler);\n  }\n\n  /**\n   * Removes all observers.\n   */\n  removeAll() {\n    if (!this.handlers_) {\n      return;\n    }\n    this.handlers_.length = 0;\n  }\n\n  /**\n   * Fires an event. All observers are called.\n   * @param {TYPE=} opt_event\n   */\n  fire(opt_event) {\n    if (!this.handlers_) {\n      return;\n    }\n    for (const handler of this.handlers_) {\n      handler(opt_event);\n    }\n  }\n\n  /**\n   * Returns number of handlers. Mostly needed for tests.\n   * @return {number}\n   */\n  getHandlerCount() {\n    return this.handlers_?.length ?? 0;\n  }\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSENT_ITEM_STATE,\n  ConsentInfoDef,\n  PURPOSE_CONSENT_STATE,\n} from './consent-info';\nimport {CONSENT_POLICY_STATE} from '../../../src/core/constants/consent-state';\nimport {Deferred} from '../../../src/core/data-structures/promise';\nimport {Observable} from '../../../src/core/data-structures/observable';\nimport {getServicePromiseForDoc} from '../../../src/service';\nimport {hasOwn, map} from '../../../src/core/types/object';\nimport {isFiniteNumber, isObject} from '../../../src/core/types';\n\nimport {user, userAssert} from '../../../src/log';\n\nconst CONSENT_STATE_MANAGER = 'consentStateManager';\nconst TAG = 'consent-policy-manager';\n\nconst ALLOWLIST_POLICY = {\n  'default': true,\n  '_till_responded': true,\n  '_till_accepted': true,\n  '_auto_reject': true,\n};\n\nexport class ConsentPolicyManager {\n  /**\n   * Creates an instance of ConsentPolicyManager.\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @private {!../../../src/service/ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n\n    /** @private {!Object<string, ?Deferred>} */\n    this.policyInstancesDeferred_ = map();\n\n    /** @private {!Object<string, ConsentPolicyInstance>} */\n    this.instances_ = map();\n\n    /** @private {!Promise} */\n    this.ConsentStateManagerPromise_ = getServicePromiseForDoc(\n      this.ampdoc_,\n      CONSENT_STATE_MANAGER\n    );\n\n    /** @private {!Deferred} */\n    this.consentPromptInitiated_ = new Deferred();\n\n    const consentValueInitiated = new Deferred();\n\n    /** @private {!Promise} */\n    this.consentValueInitiatedPromise_ = consentValueInitiated.promise;\n\n    /** @private {?function()} */\n    this.consentValueInitiatedResolver_ = consentValueInitiated.resolve;\n\n    /** @private {!Observable} */\n    this.consentStateChangeObservables_ = new Observable();\n\n    /** @private {?string} */\n    this.consentInstanceIdDepr_ = null;\n\n    /** @private {?CONSENT_ITEM_STATE} */\n    this.consentState_ = null;\n\n    /** @private {?string} */\n    this.consentString_ = null;\n\n    /** @private {?Object|undefined} */\n    this.consentMetadata_ = null;\n\n    /** @private {?Object|undefined} */\n    this.purposeConsents_ = null;\n\n    /** @private {?function()} */\n    this.tcfConsentChangeHandler_ = null;\n  }\n\n  /**\n   *\n   * @param {string} consentInstanceId\n   */\n  setLegacyConsentInstanceId(consentInstanceId) {\n    this.consentInstanceIdDepr_ = consentInstanceId;\n    this.init_();\n  }\n\n  /**\n   * Register the policy instance\n   * Example policy config format:\n   * {\n   *   \"waitFor\": {\n   *     \"consentABC\": []\n   *   }\n   *   \"timeout\": {\n   *     \"seconds\": 1,\n   *     \"fallbackAction\": 'reject'\n   *   }\n   * }\n   *\n   * TODO: Add support to timeout\n   * @param {string} policyId\n   * @param {!JsonObject} config\n   */\n  registerConsentPolicyInstance(policyId, config) {\n    if (this.instances_[policyId]) {\n      // Note <amp-next-page> could wait for the same consent policy.\n      // Return without thowing error.\n      // TODO: Make sure multiple consentPolicyManager services is installed\n      // for every <amp-next-page>\n      return;\n    }\n\n    const waitFor = Object.keys(config['waitFor'] || {});\n    if (waitFor.length !== 1 || waitFor[0] !== this.consentInstanceIdDepr_) {\n      user().error(\n        TAG,\n        'invalid waitFor value, consent policy will never resolve'\n      );\n      return;\n    }\n\n    const instance = new ConsentPolicyInstance(config);\n\n    this.instances_[policyId] = instance;\n\n    if (this.policyInstancesDeferred_[policyId]) {\n      this.policyInstancesDeferred_[policyId].resolve();\n      this.policyInstancesDeferred_[policyId] = null;\n    }\n\n    this.consentValueInitiatedPromise_.then(() => {\n      if (this.consentState_) {\n        // Has initial consent state value. Evaluate immediately\n        instance.evaluate(this.consentState_);\n      }\n      this.consentStateChangeObservables_.add((state) => {\n        instance.evaluate(state);\n      });\n      this.consentPromptInitiated_.promise.then(() => {\n        instance.startTimeout(this.ampdoc_.win);\n      });\n    });\n  }\n\n  /**\n   * Helper method to register to listen to consent instance value change\n   * and get the initial consent value\n   */\n  init_() {\n    // Set up handler to listen to consent instance value change.\n    this.ConsentStateManagerPromise_.then((manager) => {\n      manager.whenConsentReady().then(() => {\n        manager.onConsentStateChange((info) => {\n          this.consentStateChangeHandler_(info);\n          if (this.consentValueInitiatedResolver_) {\n            this.consentValueInitiatedResolver_();\n            this.consentValueInitiatedResolver_ = null;\n          }\n        });\n      });\n    });\n  }\n\n  /**\n   * Inform consent policy manager that all consent instances\n   * state has been initiated with remote value. And ready to start timeout\n   */\n  enableTimeout() {\n    this.consentPromptInitiated_.resolve();\n  }\n\n  /**\n   * Handle initial consent instance value and following consent value change\n   * @param {!ConsentInfoDef} info\n   */\n  consentStateChangeHandler_(info) {\n    const state = info['consentState'];\n    const consentStr = info['consentString'];\n    const consentMetadata = info['consentMetadata'];\n    const purposeConsents = info['purposeConsents'];\n    const {\n      consentMetadata_: prevConsentMetadata,\n      consentString_: prevConsentStr,\n      purposeConsents_: prevPurposeConsents,\n    } = this;\n\n    this.consentString_ = consentStr;\n    this.consentMetadata_ = consentMetadata;\n    this.purposeConsents_ = purposeConsents;\n    if (state === CONSENT_ITEM_STATE.UNKNOWN) {\n      // consent state has not been resolved yet.\n      return;\n    }\n\n    if (state == CONSENT_ITEM_STATE.NOT_REQUIRED) {\n      const shouldOverwrite =\n        this.consentState_ != CONSENT_ITEM_STATE.ACCEPTED &&\n        this.consentState_ != CONSENT_ITEM_STATE.REJECTED;\n      // Ignore the consent item state and overwrite state value.\n      if (shouldOverwrite) {\n        this.consentState_ = CONSENT_ITEM_STATE.NOT_REQUIRED;\n      }\n    } else if (state == CONSENT_ITEM_STATE.DISMISSED) {\n      // When dismissed, use the old value\n      if (this.consentState_ === null) {\n        this.consentState_ = CONSENT_ITEM_STATE.UNKNOWN;\n      }\n      // None of the supplementary consent data changes with dismiss action\n      this.consentString_ = prevConsentStr;\n      this.consentMetadata_ = prevConsentMetadata;\n      this.purposeConsents_ = prevPurposeConsents;\n    } else {\n      this.consentState_ = state;\n    }\n    this.consentStateChangeObservables_.fire(this.consentState_);\n    if (this.tcfConsentChangeHandler_) {\n      this.tcfConsentChangeHandler_();\n    }\n  }\n\n  /**\n   * Sets the handler that will be called when a consent change\n   * has been fired.\n   * @param {function()} callback\n   */\n  setOnPolicyChange(callback) {\n    if (!this.tcfConsentChangeHandler_) {\n      this.tcfConsentChangeHandler_ = callback;\n    }\n  }\n\n  /**\n   * Used to wait for policy to resolve;\n   * @param {string} policyId\n   * @return {!Promise<CONSENT_POLICY_STATE>}\n   */\n  whenPolicyResolved(policyId) {\n    // If customized policy is not supported\n    if (!ALLOWLIST_POLICY[policyId]) {\n      user().error(\n        TAG,\n        'can not find policy %s, only predefined policies are supported',\n        policyId\n      );\n      return Promise.resolve(CONSENT_POLICY_STATE.UNKNOWN);\n    }\n    return this.whenPolicyInstanceRegistered_(policyId).then(() => {\n      return this.instances_[policyId].getReadyPromise().then(() => {\n        return this.instances_[policyId].getCurrentPolicyStatus();\n      });\n    });\n  }\n\n  /**\n   * Wait for policy to resolve and check if it should be unblocked\n   * @param {string} policyId\n   * @return {!Promise<boolean>}\n   */\n  whenPolicyUnblock(policyId) {\n    // If customized policy is not supported\n    if (!ALLOWLIST_POLICY[policyId]) {\n      user().error(\n        TAG,\n        'can not find policy %s, only predefined policies are supported',\n        policyId\n      );\n      return Promise.resolve(false);\n    }\n    return this.whenPolicyInstanceRegistered_(policyId).then(() => {\n      return this.instances_[policyId].getReadyPromise().then(() => {\n        return this.instances_[policyId].shouldUnblock();\n      });\n    });\n  }\n\n  /**\n   * Get shared data of a policy. If multiple consent instances return\n   * sharedData, a merge will be done. For any conflict keys, the value from\n   * later consent instance (as defined in the policy config) will override\n   * the previous ones.\n   *\n   * @param {string} policyId\n   * @return {!Promise<Object>}\n   */\n  getMergedSharedData(policyId) {\n    return this.whenPolicyResolved(policyId)\n      .then(() => this.ConsentStateManagerPromise_)\n      .then((manager) => {\n        return manager.getConsentInstanceSharedData();\n      });\n  }\n\n  /**\n   * Get the consent string value of a policy. Return a promise that resolves\n   * when the policy resolves.\n   * @param {string} policyId\n   * @return {!Promise<?string>}\n   */\n  getConsentStringInfo(policyId) {\n    return this.whenPolicyResolved(policyId).then(() => {\n      return this.consentString_;\n    });\n  }\n\n  /**\n   * Get the consent metadata value of a policy. Return a promise that resolves\n   * when the policy resolves.\n   * @param {string} policyId\n   * @return {!Promise<?Object|undefined>}\n   */\n  getConsentMetadataInfo(policyId) {\n    return this.whenPolicyResolved(policyId).then(() => {\n      return this.consentMetadata_;\n    });\n  }\n\n  /**\n   * Wait for initial consent information to be transmitted,\n   * then get consent state for this purpose.\n   *\n   * Note: Even if we have some intiial consent info, wait until all\n   * purposes have been potentially collected, then check.\n   * @param {!Array<string>} purposes\n   * @return {!Promise<boolean>}\n   */\n  whenPurposesUnblock(purposes) {\n    return this.ConsentStateManagerPromise_.then((manager) => {\n      // Wait for all purpose consents (collected through UI or update)\n      return manager.whenHasAllPurposeConsents();\n    }).then(() => {\n      if (!this.purposeConsents_) {\n        return false;\n      }\n      const shouldUnblock = (purpose) =>\n        hasOwn(this.purposeConsents_, purpose) &&\n        this.purposeConsents_[purpose] === PURPOSE_CONSENT_STATE.ACCEPTED;\n      return purposes.every(shouldUnblock);\n    });\n  }\n\n  /**\n   * Wait for policy instance to be registered.\n   * @param {string} policyId\n   * @return {!Promise}\n   */\n  whenPolicyInstanceRegistered_(policyId) {\n    if (this.instances_[policyId]) {\n      return Promise.resolve();\n    }\n    if (!this.policyInstancesDeferred_[policyId]) {\n      this.policyInstancesDeferred_[policyId] = new Deferred();\n    }\n    return /** @type {!Promise} */ (\n      this.policyInstancesDeferred_[policyId].promise\n    );\n  }\n}\n\nexport class ConsentPolicyInstance {\n  /**\n   * Creates an instance of ConsentPolicyInstance.\n   * @param {!JsonObject} config\n   */\n  constructor(config) {\n    /** @private {!JsonObject} */\n    this.config_ = config;\n\n    const readyDeferred = new Deferred();\n\n    /** @private {!Promise} */\n    this.readyPromise_ = readyDeferred.promise;\n\n    /** @private {?function()} */\n    this.readyResolver_ = readyDeferred.resolve;\n\n    /** @private {CONSENT_POLICY_STATE} */\n    this.status_ = CONSENT_POLICY_STATE.UNKNOWN;\n\n    /** @private {!Array<CONSENT_POLICY_STATE>} */\n    this.unblockStateLists_ = config['unblockOn'] || [\n      CONSENT_POLICY_STATE.SUFFICIENT,\n      CONSENT_POLICY_STATE.UNKNOWN_NOT_REQUIRED,\n    ];\n  }\n\n  /**\n   * @param {Window} win\n   */\n  startTimeout(win) {\n    const timeoutConfig = this.config_['timeout'];\n\n    let timeoutSecond = null;\n    let fallbackState;\n\n    if (timeoutConfig != undefined) {\n      // timeoutConfig could equal to 0;\n      if (isObject(timeoutConfig)) {\n        /**\n         * \"timeout\": {\n         *   \"seconds\" : 1,\n         *   \"fallbackAction\": \"reject\"\n         * }\n         */\n        if (\n          timeoutConfig['fallbackAction'] &&\n          timeoutConfig['fallbackAction'] == 'reject'\n        ) {\n          fallbackState = CONSENT_ITEM_STATE.REJECTED;\n        } else if (\n          timeoutConfig['fallbackAction'] &&\n          timeoutConfig['fallbackAction'] != 'dismiss'\n        ) {\n          user().error(\n            TAG,\n            'unsupported fallbackAction %s',\n            timeoutConfig['fallbackAction']\n          );\n        }\n        timeoutSecond = timeoutConfig['seconds'];\n      } else {\n        timeoutSecond = timeoutConfig;\n      }\n      userAssert(\n        isFiniteNumber(timeoutSecond),\n        'invalid timeout value %s',\n        timeoutSecond\n      );\n    }\n\n    if (timeoutSecond != null) {\n      win.setTimeout(() => {\n        // Force evaluate on timeout\n        fallbackState = fallbackState || CONSENT_ITEM_STATE.UNKNOWN;\n        this.evaluate(fallbackState, true);\n      }, timeoutSecond * 1000);\n    }\n  }\n\n  /**\n   * Evaluate the incoming consent state and determine if the policy instance\n   * should be resolved and what the policy state should be.\n   * @param {CONSENT_ITEM_STATE} state\n   * @param {boolean} isFallback\n   */\n  evaluate(state, isFallback = false) {\n    if (!state) {\n      // Not ready for evaluate yet\n      return;\n    }\n\n    if (isFallback && !this.readyResolver_) {\n      // Discard fallback state if consent status has resolve before timeout.\n      return;\n    }\n\n    if (state === CONSENT_ITEM_STATE.ACCEPTED) {\n      this.status_ = CONSENT_POLICY_STATE.SUFFICIENT;\n    } else if (state === CONSENT_ITEM_STATE.REJECTED) {\n      this.status_ = CONSENT_POLICY_STATE.INSUFFICIENT;\n    } else if (state === CONSENT_ITEM_STATE.NOT_REQUIRED) {\n      this.status_ = CONSENT_POLICY_STATE.UNKNOWN_NOT_REQUIRED;\n    } else {\n      this.status_ = CONSENT_POLICY_STATE.UNKNOWN;\n    }\n\n    if (this.readyResolver_) {\n      this.readyResolver_();\n      this.readyResolver_ = null;\n    }\n  }\n\n  /**\n   * Return a promise that resolved when policy ready.\n   * Note: the promise can be reset if use toggle consent state\n   * @return {!Promise}\n   */\n  getReadyPromise() {\n    return this.readyPromise_;\n  }\n\n  /**\n   * Returns the current consent policy state\n   * @return {CONSENT_POLICY_STATE}\n   */\n  getCurrentPolicyStatus() {\n    return this.status_;\n  }\n\n  /**\n   * Returns whether the current consent policy state should be unblocked\n   * Caller need to make sure that policy status has resolved\n   * @return {boolean}\n   */\n  shouldUnblock() {\n    return this.unblockStateLists_.indexOf(this.status_) > -1;\n  }\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {map} from '../types/object';\n\n/**\n * @template T\n */\nexport class LruCache {\n  /**\n   * @param {number} capacity\n   */\n  constructor(capacity) {\n    /** @private @const {number} */\n    this.capacity_ = capacity;\n\n    /** @private {number} */\n    this.size_ = 0;\n\n    /**\n     * An incrementing counter to define the last access.\n     * @private {number}\n     */\n    this.access_ = 0;\n\n    /** @private {!Object<(number|string), {payload: T, access: number}>} */\n    this.cache_ = map();\n  }\n\n  /**\n   * Returns whether key is cached.\n   *\n   * @param {number|string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return !!this.cache_[key];\n  }\n\n  /**\n   * @param {number|string} key\n   * @return {T} The cached payload.\n   */\n  get(key) {\n    const cacheable = this.cache_[key];\n    if (cacheable) {\n      cacheable.access = ++this.access_;\n      return cacheable.payload;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {number|string} key\n   * @param {T} payload The payload to cache.\n   */\n  put(key, payload) {\n    if (!this.has(key)) {\n      this.size_++;\n    }\n    this.cache_[key] = {payload, access: this.access_};\n    this.evict_();\n  }\n\n  /**\n   * Evicts the oldest cache entry, if we've exceeded capacity.\n   */\n  evict_() {\n    if (this.size_ <= this.capacity_) {\n      return;\n    }\n\n    const cache = this.cache_;\n    let oldest = this.access_ + 1;\n    let oldestKey;\n    for (const key in cache) {\n      const {access} = cache[key];\n      if (access < oldest) {\n        oldest = access;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey !== undefined) {\n      delete cache[oldestKey];\n      this.size_--;\n    }\n  }\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LruCache} from './core/data-structures/lru-cache';\nimport {dict, hasOwn} from './core/types/object';\nimport {endsWith} from './core/types/string';\nimport {getMode} from './mode';\nimport {isArray} from './core/types';\nimport {parseQueryString} from './core/types/string/url';\nimport {urls} from './config';\nimport {userAssert} from './log';\n\n/**\n * @type {!JsonObject}\n */\nconst SERVING_TYPE_PREFIX = dict({\n  // No viewer\n  'c': true,\n  // In viewer\n  'v': true,\n  // Ad landing page\n  'a': true,\n  // Ad\n  'ad': true,\n});\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {LruCache}\n */\nlet cache;\n\n/** @private @const Matches amp_js_* parameters in query string. */\nconst AMP_JS_PARAMS_REGEX = /[?&]amp_js[^&]*/;\n\n/** @private @const Matches amp_gsa parameters in query string. */\nconst AMP_GSA_PARAMS_REGEX = /[?&]amp_gsa[^&]*/;\n\n/** @private @const Matches amp_r parameters in query string. */\nconst AMP_R_PARAMS_REGEX = /[?&]amp_r[^&]*/;\n\n/** @private @const Matches amp_kit parameters in query string. */\nconst AMP_KIT_PARAMS_REGEX = /[?&]amp_kit[^&]*/;\n\n/** @private @const Matches usqp parameters from goog experiment in query string. */\nconst GOOGLE_EXPERIMENT_PARAMS_REGEX = /[?&]usqp[^&]*/;\n\nconst INVALID_PROTOCOLS = [\n  /*eslint no-script-url: 0*/ 'javascript:',\n  /*eslint no-script-url: 0*/ 'data:',\n  /*eslint no-script-url: 0*/ 'vbscript:',\n];\n\n/** @const {string} */\nexport const SOURCE_ORIGIN_PARAM = '__amp_source_origin';\n\n/**\n * Returns the correct origin for a given window.\n * @param {!Window} win\n * @return {string} origin\n */\nexport function getWinOrigin(win) {\n  return win.origin || parseUrlDeprecated(win.location.href).origin;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n *   Cache is always ignored on ESM builds, see https://go.amp.dev/pr/31594\n * @return {!Location}\n */\nexport function parseUrlDeprecated(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = IS_ESM\n      ? null\n      : self.__AMP_URL_CACHE || (self.__AMP_URL_CACHE = new LruCache(100));\n  }\n\n  return parseUrlWithA(a, url, IS_ESM || opt_nocache ? null : cache);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @param {LruCache=} opt_cache\n *   Cache is always ignored on ESM builds, see https://go.amp.dev/pr/31594\n * @return {!Location}\n * @restricted\n */\nexport function parseUrlWithA(a, url, opt_cache) {\n  if (IS_ESM) {\n    a.href = '';\n    return /** @type {?} */ (new URL(url, a.href));\n  }\n\n  if (opt_cache && opt_cache.has(url)) {\n    return opt_cache.get(url);\n  }\n\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick #3449.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  const info = /** @type {!Location} */ ({\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: null, // Set below.\n  });\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if (\n    (info.protocol == 'http:' && info.port == 80) ||\n    (info.protocol == 'https:' && info.port == 443)\n  ) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  let origin;\n  if (a.origin && a.origin != 'null') {\n    origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    origin = info.href;\n  } else {\n    origin = info.protocol + '//' + info.host;\n  }\n  info.origin = origin;\n\n  // Freeze during testing to avoid accidental mutation.\n  const frozen = getMode().test && Object.freeze ? Object.freeze(info) : info;\n\n  if (opt_cache) {\n    opt_cache.put(url, frozen);\n  }\n\n  return frozen;\n}\n\n/**\n * Appends the string just before the fragment part (or optionally\n * to the front of the query string) of the URL.\n * @param {string} url\n * @param {string} paramString\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function appendEncodedParamStringToUrl(\n  url,\n  paramString,\n  opt_addToFront\n) {\n  if (!paramString) {\n    return url;\n  }\n  const mainAndFragment = url.split('#', 2);\n  const mainAndQuery = mainAndFragment[0].split('?', 2);\n\n  let newUrl =\n    mainAndQuery[0] +\n    (mainAndQuery[1]\n      ? opt_addToFront\n        ? `?${paramString}&${mainAndQuery[1]}`\n        : `?${mainAndQuery[1]}&${paramString}`\n      : `?${paramString}`);\n  newUrl += mainAndFragment[1] ? `#${mainAndFragment[1]}` : '';\n  return newUrl;\n}\n/**\n * Appends a query string field and value to a url. `key` and `value`\n * will be ran through `encodeURIComponent` before appending.\n * @param {string} url\n * @param {string} key\n * @param {string} value\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function addParamToUrl(url, key, value, opt_addToFront) {\n  const field = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n  return appendEncodedParamStringToUrl(url, field, opt_addToFront);\n}\n\n/**\n * Appends query string fields and values to a url. The `params` objects'\n * `key`s and `value`s will be transformed into query string keys/values.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addParamsToUrl(url, params) {\n  return appendEncodedParamStringToUrl(url, serializeQueryString(params));\n}\n\n/**\n * Append query string fields and values to a url, only if the key does not\n * exist in current query string.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addMissingParamsToUrl(url, params) {\n  const location = parseUrlDeprecated(url);\n  const existingParams = parseQueryString(location.search);\n  const paramsToAdd = dict({});\n  const keys = Object.keys(params);\n  for (let i = 0; i < keys.length; i++) {\n    if (!hasOwn(existingParams, keys[i])) {\n      paramsToAdd[keys[i]] = params[keys[i]];\n    }\n  }\n  return addParamsToUrl(url, paramsToAdd);\n}\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isSecureUrlDeprecated(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return (\n    url.protocol == 'https:' ||\n    url.hostname == 'localhost' ||\n    url.hostname == '127.0.0.1' ||\n    endsWith(url.hostname, '.localhost')\n  );\n}\n\n/**\n * Asserts that a given url is HTTPS or protocol relative. It's a user-level\n * assert.\n *\n * Provides an exception for localhost.\n *\n * @param {?string|undefined} urlString\n * @param {!Element|string} elementContext Element where the url was found.\n * @param {string=} sourceName Used for error messages.\n * @return {string}\n */\nexport function assertHttpsUrl(\n  urlString,\n  elementContext,\n  sourceName = 'source'\n) {\n  userAssert(\n    urlString != null,\n    '%s %s must be available',\n    elementContext,\n    sourceName\n  );\n  // (erwinm, #4560): type cast necessary until #4560 is fixed.\n  const theUrlString = /** @type {string} */ (urlString);\n  userAssert(\n    isSecureUrlDeprecated(theUrlString) || /^(\\/\\/)/.test(theUrlString),\n    '%s %s must start with ' +\n      '\"https://\" or \"//\" or be relative and served from ' +\n      'either https or from localhost. Invalid value: %s',\n    elementContext,\n    sourceName,\n    theUrlString\n  );\n  return theUrlString;\n}\n\n/**\n * Asserts that a given url is an absolute HTTP or HTTPS URL.\n * @param {string} urlString\n * @return {string}\n */\nexport function assertAbsoluteHttpOrHttpsUrl(urlString) {\n  userAssert(\n    /^https?\\:/i.test(urlString),\n    'URL must start with \"http://\" or \"https://\". Invalid value: %s',\n    urlString\n  );\n  return parseUrlDeprecated(urlString).href;\n}\n\n/**\n * Returns the URL without fragment. If URL doesn't contain fragment, the same\n * string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function removeFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return url;\n  }\n  return url.substring(0, index);\n}\n\n/**\n * Returns the fragment from the URL. If the URL doesn't contain fragment,\n * the empty string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function getFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return '';\n  }\n  return url.substring(index);\n}\n\n/**\n * Returns whether the URL has the origin of a proxy.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isProxyOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.cdnProxyRegex.test(url.origin);\n}\n\n/**\n * @param {string} uri\n * @return {boolean}\n */\nexport function isAmpScriptUri(uri) {\n  return uri.startsWith('amp-script:');\n}\n\n/**\n * For proxy-origin URLs, returns the serving type. Otherwise, returns null.\n * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'\n * returns 'a'.\n * @param {string|!Location} url URL of an AMP document.\n * @return {?string}\n */\nexport function getProxyServingType(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  if (!isProxyOrigin(url)) {\n    return null;\n  }\n  const path = url.pathname.split('/', 2);\n  return path[1];\n}\n\n/**\n * Returns whether the URL origin is localhost.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isLocalhostOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.localhostRegex.test(url.origin);\n}\n\n/**\n * Returns whether the URL has valid protocol.\n * Deep link protocol is valid, but not javascript etc.\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isProtocolValid(url) {\n  if (!url) {\n    return true;\n  }\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return !INVALID_PROTOCOLS.includes(url.protocol);\n}\n\n/**\n * Returns a URL without AMP JS parameters.\n * @param {string} url\n * @return {string}\n */\nexport function removeAmpJsParamsFromUrl(url) {\n  const parsed = parseUrlDeprecated(url);\n  const search = removeAmpJsParamsFromSearch(parsed.search);\n  return parsed.origin + parsed.pathname + search + parsed.hash;\n}\n\n/**\n * Returns a URL without a query string.\n * @param {string} url\n * @return {string}\n */\nexport function removeSearch(url) {\n  const index = url.indexOf('?');\n  if (index == -1) {\n    return url;\n  }\n  const fragment = getFragment(url);\n  return url.substring(0, index) + fragment;\n}\n\n/**\n * Removes parameters that start with amp js parameter pattern and returns the\n * new search string.\n * @param {string} urlSearch\n * @return {string}\n */\nfunction removeAmpJsParamsFromSearch(urlSearch) {\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const search = urlSearch\n    .replace(AMP_JS_PARAMS_REGEX, '')\n    .replace(AMP_GSA_PARAMS_REGEX, '')\n    .replace(AMP_R_PARAMS_REGEX, '')\n    .replace(AMP_KIT_PARAMS_REGEX, '')\n    .replace(GOOGLE_EXPERIMENT_PARAMS_REGEX, '')\n    .replace(/^[?&]/, ''); // Removes first ? or &.\n  return search ? '?' + search : '';\n}\n\n/**\n * Removes parameters with param name and returns the new search string.\n * @param {string} urlSearch\n * @param {string} paramName\n * @return {string}\n */\nexport function removeParamsFromSearch(urlSearch, paramName) {\n  // TODO: reuse the function in removeAmpJsParamsFromSearch. Accept paramNames\n  // as an array.\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const paramRegex = new RegExp(`[?&]${paramName}=[^&]*`, 'g');\n  const search = urlSearch.replace(paramRegex, '').replace(/^[?&]/, '');\n  return search ? '?' + search : '';\n}\n\n/**\n * Returns the source URL of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string}\n */\nexport function getSourceUrl(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n\n  // Not a proxy URL - return the URL itself.\n  if (!isProxyOrigin(url)) {\n    return url.href;\n  }\n\n  // A proxy URL.\n  // Example path that is being matched here.\n  // https://cdn.ampproject.org/c/s/www.origin.com/foo/\n  // The /s/ is optional and signals a secure origin.\n  const path = url.pathname.split('/');\n  const prefix = path[1];\n  userAssert(\n    SERVING_TYPE_PREFIX[prefix],\n    'Unknown path prefix in url %s',\n    url.href\n  );\n  const domainOrHttpsSignal = path[2];\n  const origin =\n    domainOrHttpsSignal == 's'\n      ? 'https://' + decodeURIComponent(path[3])\n      : 'http://' + decodeURIComponent(domainOrHttpsSignal);\n  // Sanity test that what we found looks like a domain.\n  userAssert(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);\n  path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);\n  return (\n    origin +\n    path.join('/') +\n    removeAmpJsParamsFromSearch(url.search) +\n    (url.hash || '')\n  );\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n */\nexport function getSourceOrigin(url) {\n  return parseUrlDeprecated(getSourceUrl(url)).origin;\n}\n\n/**\n * Returns absolute URL resolved based on the relative URL and the base.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n */\nexport function resolveRelativeUrl(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  if (IS_ESM || typeof URL == 'function') {\n    return new URL(relativeUrlString, baseUrl.href).toString();\n  }\n  return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);\n}\n\n/**\n * Fallback for URL resolver when URL class is not available.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n * @private @visibleForTesting\n */\nexport function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  relativeUrlString = relativeUrlString.replace(/\\\\/g, '/');\n  const relativeUrl = parseUrlDeprecated(relativeUrlString);\n\n  // Absolute URL.\n  if (relativeUrlString.toLowerCase().startsWith(relativeUrl.protocol)) {\n    return relativeUrl.href;\n  }\n\n  // Protocol-relative URL.\n  if (relativeUrlString.startsWith('//')) {\n    return baseUrl.protocol + relativeUrlString;\n  }\n\n  // Absolute path.\n  if (relativeUrlString.startsWith('/')) {\n    return baseUrl.origin + relativeUrlString;\n  }\n\n  // Relative path.\n  return (\n    baseUrl.origin +\n    baseUrl.pathname.replace(/\\/[^/]*$/, '/') +\n    relativeUrlString\n  );\n}\n\n/**\n * Add \"__amp_source_origin\" query parameter to the URL.\n * @param {!Window} win\n * @param {string} url\n * @return {string}\n */\nexport function getCorsUrl(win, url) {\n  checkCorsUrl(url);\n  const sourceOrigin = getSourceOrigin(win.location.href);\n  return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);\n}\n\n/**\n * Checks if the url has __amp_source_origin and throws if it does.\n * @param {string} url\n */\nexport function checkCorsUrl(url) {\n  const parsedUrl = parseUrlDeprecated(url);\n  const query = parseQueryString(parsedUrl.search);\n  userAssert(\n    !(SOURCE_ORIGIN_PARAM in query),\n    'Source origin is not allowed in %s',\n    url\n  );\n}\n\n/**\n * Adds the path to the given url.\n *\n * @param {!Location} url\n * @param {string} path\n * @return {string}\n */\nexport function appendPathToUrl(url, path) {\n  const pathname = url.pathname.replace(/\\/?$/, '/') + path.replace(/^\\//, '');\n  return url.origin + pathname + url.search + url.hash;\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSENT_ITEM_STATE,\n  ConsentInfoDef,\n  ConsentMetadataDef,\n  PURPOSE_CONSENT_STATE,\n  calculateLegacyStateValue,\n  composeStoreValue,\n  constructConsentInfo,\n  getConsentStateValue,\n  getStoredConsentInfo,\n  hasDirtyBit,\n  isConsentInfoStoredValueSame,\n  recalculateConsentStateValue,\n} from './consent-info';\nimport {Deferred} from '../../../src/core/data-structures/promise';\nimport {Services} from '../../../src/services';\nimport {assertHttpsUrl} from '../../../src/url';\nimport {dev, devAssert} from '../../../src/log';\nimport {expandConsentEndpointUrl, getConsentCID} from './consent-config';\nimport {hasOwn} from '../../../src/core/types/object';\n\nconst TAG = 'CONSENT-STATE-MANAGER';\n\nexport class ConsentStateManager {\n  /**\n   * Creates an instance of ConsentStateManager.\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @private {!../../../src/service/ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n\n    /** @private {?string} */\n    this.instanceId_ = null;\n\n    /** @private {?ConsentInstance} */\n    this.instance_ = null;\n\n    /** @private {?function(!ConsentInfoDef)} */\n    this.consentChangeHandler_ = null;\n\n    /** @private {?Promise} */\n    this.consentReadyPromise_ = null;\n\n    /** @private {?function()} */\n    this.consentReadyResolver_ = null;\n\n    /** @private {Object<string, PURPOSE_CONSENT_STATE>|undefined} */\n    this.purposeConsents_ = undefined;\n\n    const allPurposeConsentsDeferred = new Deferred();\n\n    /** @private {?function()} */\n    this.hasAllPurposeConsentsResolver_ = allPurposeConsentsDeferred.resolve;\n\n    /** @private {!Promise} */\n    this.hasAllPurposeConsentsPromise_ = allPurposeConsentsDeferred.promise;\n  }\n\n  /**\n   * Register and create a consent instance to manage state\n   * @param {string} instanceId\n   * @param {!Object} config\n   */\n  registerConsentInstance(instanceId, config) {\n    if (this.instance_) {\n      dev().error(\n        TAG,\n        'Cannot register consent instance %s, ' +\n          'instance %s has already been registered.',\n        instanceId,\n        this.instanceId_\n      );\n      return;\n    }\n\n    this.instanceId_ = instanceId;\n\n    this.instance_ = new ConsentInstance(this.ampdoc_, instanceId, config);\n\n    if (this.consentReadyResolver_) {\n      this.consentReadyResolver_();\n      this.consentReadyResolver_ = null;\n    }\n  }\n\n  /**\n   * Update consent instance state\n   * @param {CONSENT_ITEM_STATE} state\n   * @param {string=} consentStr\n   * @param {ConsentMetadataDef=} opt_consentMetadata\n   */\n  updateConsentInstanceState(state, consentStr, opt_consentMetadata) {\n    if (!this.instance_) {\n      dev().error(TAG, 'instance not registered');\n      return;\n    }\n    this.instance_.update(\n      state,\n      consentStr,\n      this.purposeConsents_,\n      opt_consentMetadata,\n      false\n    );\n\n    if (this.consentChangeHandler_) {\n      this.consentChangeHandler_(\n        constructConsentInfo(\n          state,\n          consentStr,\n          opt_consentMetadata,\n          this.purposeConsents_\n        )\n      );\n      // Need to be called after handler.\n      this.hasAllPurposeConsents();\n    }\n  }\n\n  /**\n   * Update our current purposeConsents, that will be\n   * used in subsequent calls to update().\n   * @param {!Object<string, boolean>} purposeMap\n   * @param {boolean} defaultsOnly\n   */\n  updateConsentInstancePurposes(purposeMap, defaultsOnly = false) {\n    if (!this.purposeConsents_) {\n      this.purposeConsents_ = {};\n    }\n    const purposes = Object.keys(purposeMap);\n    purposes.forEach((purpose) => {\n      // If defaults only, then only update if it doesn't exist.\n      if (defaultsOnly && hasOwn(this.purposeConsents_, purpose)) {\n        return;\n      }\n      const value = !!purposeMap[purpose]\n        ? PURPOSE_CONSENT_STATE.ACCEPTED\n        : PURPOSE_CONSENT_STATE.REJECTED;\n      this.purposeConsents_[purpose] = value;\n    });\n  }\n\n  /**\n   * Get last consent instance stored.\n   * @return {Promise<!ConsentInfoDef>}\n   */\n  getLastConsentInstanceInfo() {\n    devAssert(this.instance_, '%s: cannot find the instance', TAG);\n    return this.instance_.get();\n  }\n\n  /**\n   * Get local consent instance state\n   * @return {Promise<!ConsentInfoDef>}\n   */\n  getConsentInstanceInfo() {\n    devAssert(this.instance_, '%s: cannot find the instance', TAG);\n    return this.instance_.get().then((info) => {\n      if (hasDirtyBit(info)) {\n        return constructConsentInfo(CONSENT_ITEM_STATE.UNKNOWN);\n      }\n      return info;\n    });\n  }\n\n  /**\n   * Register the handler for every consent state change.\n   * @param {function(!ConsentInfoDef)} handler\n   */\n  onConsentStateChange(handler) {\n    devAssert(this.instance_, '%s: cannot find the instance', TAG);\n\n    devAssert(\n      !this.consentChangeHandler_,\n      '%s: Duplicate consent change handler, will be ignored',\n      TAG\n    );\n\n    this.consentChangeHandler_ = handler;\n\n    // Fire first consent instance state.\n    this.getConsentInstanceInfo().then((info) => {\n      handler(info);\n    });\n  }\n\n  /**\n   * Sets a promise which resolves to a shareData object that is to be returned\n   * from the remote endpoint.\n   *\n   * @param {Promise<?Object>} sharedDataPromise\n   */\n  setConsentInstanceSharedData(sharedDataPromise) {\n    devAssert(this.instance_, '%s: cannot find the instance', TAG);\n    this.instance_.sharedDataPromise = sharedDataPromise;\n  }\n\n  /**\n   * Signifies that we collected all the purpose consents\n   * from our source of truth (i.e locally stored or updated)\n   */\n  hasAllPurposeConsents() {\n    this.hasAllPurposeConsentsResolver_();\n  }\n\n  /**\n   * Wait for our purpose consents to be collected,\n   * either locally or from update. Let amp-consent handle\n   * when to resolve the promis (via update() or directly).\n   * @return {!Promise}\n   */\n  whenHasAllPurposeConsents() {\n    return this.hasAllPurposeConsentsPromise_;\n  }\n\n  /**\n   * Sets the dirty bit so current consent info won't be used for\n   * decision making on next visit\n   */\n  setDirtyBit() {\n    this.instance_.setDirtyBit();\n  }\n\n  /**\n   * Returns a promise that resolves to a shareData object that is returned\n   * from the remote endpoint.\n   *\n   * @return {?Promise<?Object>}\n   */\n  getConsentInstanceSharedData() {\n    devAssert(this.instance_, '%s: cannot find the instance', TAG);\n    return this.instance_.sharedDataPromise;\n  }\n\n  /**\n   * Returns a promise that's resolved when consent instance is ready.\n   * @return {*} TODO(#23582): Specify return type\n   */\n  whenConsentReady() {\n    if (this.instance_) {\n      return Promise.resolve();\n    }\n    if (!this.consentReadyPromise_) {\n      const deferred = new Deferred();\n      this.consentReadyPromise_ = deferred.promise;\n      this.consentReadyResolver_ = deferred.resolve;\n    }\n    return this.consentReadyPromise_;\n  }\n\n  /**\n   * Get last consent instance stored.\n   * @visibleForTesting\n   * @return {?ConsentInfoDef}\n   */\n  getSavedInstanceForTesting() {\n    return this.instance_.savedConsentInfo_;\n  }\n}\n\n/**\n * @visibleForTesting\n */\nexport class ConsentInstance {\n  /**\n   *\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param {string} id\n   * @param {!Object} config\n   */\n  constructor(ampdoc, id, config) {\n    /** @private {!../../../src/service/ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n\n    /** @private {string} */\n    this.id_ = id;\n\n    /** @public {?Promise<Object>} */\n    this.sharedDataPromise = null;\n\n    /** @private {Promise<!../../../src/service/storage-impl.Storage>} */\n    this.storagePromise_ = Services.storageForTopLevelDoc(ampdoc);\n\n    /** @private {?ConsentInfoDef}*/\n    this.localConsentInfo_ = null;\n\n    /** @private {?ConsentInfoDef} */\n    this.savedConsentInfo_ = null;\n\n    /** @private {string} */\n    this.storageKey_ = 'amp-consent:' + id;\n\n    /** @private {?string} */\n    this.onUpdateHref_ = config['onUpdateHref'] || null;\n    if (this.onUpdateHref_) {\n      assertHttpsUrl(this.onUpdateHref_, 'AMP-CONSENT');\n    }\n\n    /** @private {boolean|undefined} */\n    this.hasDirtyBitNext_ = undefined;\n  }\n\n  /**\n   * Set dirtyBit to current consent info. Refresh stored consent value with\n   * dirtyBit\n   * @return {*} TODO(#23582): Specify return type\n   */\n  setDirtyBit() {\n    // Note: this.hasDirtyBitNext_ is only set to true when 'forcePromptNext'\n    // is set to true and we need to set dirtyBit for next visit.\n    this.hasDirtyBitNext_ = true;\n    return this.get().then((info) => {\n      if (hasDirtyBit(info)) {\n        // Current stored value has dirtyBit and is no longer valid.\n        // No need to update with dirtyBit\n        return;\n      }\n      this.update(\n        info['consentState'],\n        info['consentString'],\n        info['purposeConsents'],\n        info['consentMetadata'],\n        true\n      );\n    });\n  }\n\n  /**\n   * Update the local consent state list\n   * @param {!CONSENT_ITEM_STATE} state\n   * @param {string=} consentString\n   * @param {Object<string, PURPOSE_CONSENT_STATE>=} purposeConsents\n   * @param {ConsentMetadataDef=} opt_consentMetadata\n   * @param {boolean=} opt_systemUpdate\n   */\n  update(\n    state,\n    consentString,\n    purposeConsents,\n    opt_consentMetadata,\n    opt_systemUpdate\n  ) {\n    const localState =\n      this.localConsentInfo_ && this.localConsentInfo_['consentState'];\n    const calculatedState = recalculateConsentStateValue(state, localState);\n\n    if (state === CONSENT_ITEM_STATE.DISMISSED) {\n      // If state is dismissed, use the old consent string, metadata,\n      // and puporse consents.\n      this.localConsentInfo_ = constructConsentInfo(\n        calculatedState,\n        this.localConsentInfo_?.consentString,\n        this.localConsentInfo_?.consentMetadata,\n        this.localConsentInfo_?.purposeConsents\n      );\n      return;\n    }\n\n    // Any user update makes the current state valid, thus remove dirtyBit\n    // from localConsentInfo_\n    const oldValue = this.localConsentInfo_;\n    if (opt_systemUpdate && hasDirtyBit(oldValue)) {\n      this.localConsentInfo_ = constructConsentInfo(\n        calculatedState,\n        consentString,\n        opt_consentMetadata,\n        purposeConsents,\n        true\n      );\n    } else {\n      // Any user update makes the current state valid, thus remove dirtyBit\n      // from localConsentInfo_\n      this.localConsentInfo_ = constructConsentInfo(\n        calculatedState,\n        consentString,\n        opt_consentMetadata,\n        purposeConsents\n      );\n    }\n\n    const newConsentInfo = constructConsentInfo(\n      calculatedState,\n      consentString,\n      opt_consentMetadata,\n      purposeConsents,\n      this.hasDirtyBitNext_\n    );\n\n    if (isConsentInfoStoredValueSame(newConsentInfo, this.savedConsentInfo_)) {\n      // Only update/save to localstorage if it's not dismiss\n      // and the value is different from what is stored.\n      return;\n    }\n\n    // TODO(@zhouyx): Need force update to update timestamp\n    this.updateStoredValue_(newConsentInfo);\n  }\n\n  /**\n   * Write the new value to localStorage and send updateHrefRequest\n   * @param {!ConsentInfoDef} consentInfo\n   */\n  updateStoredValue_(consentInfo) {\n    this.storagePromise_.then((storage) => {\n      if (\n        !isConsentInfoStoredValueSame(\n          consentInfo,\n          this.localConsentInfo_,\n          this.hasDirtyBitNext_\n        )\n      ) {\n        // If state has changed. do not store outdated value.\n        return;\n      }\n\n      if (consentInfo['consentState'] === CONSENT_ITEM_STATE.UNKNOWN) {\n        // Remove stored value if the consentState is unknown\n        // Do not consilidate with the value == null check below,\n        // because UNKNOWN and DISMISS are different\n        storage.remove(this.storageKey_);\n        return;\n      }\n\n      const value = composeStoreValue(consentInfo);\n      if (value == null) {\n        // Value can be false, do not use !value check\n        // Nothing to store to localStorage\n        return;\n      }\n\n      this.savedConsentInfo_ = consentInfo;\n      storage.setNonBoolean(this.storageKey_, value);\n      this.sendUpdateHrefRequest_(consentInfo);\n    });\n  }\n\n  /**\n   * Get the local consent state list\n   * @return {!Promise<!ConsentInfoDef>}\n   */\n  get() {\n    if (this.localConsentInfo_) {\n      // Return the local value if it has been processed before\n      return Promise.resolve(this.localConsentInfo_);\n    }\n\n    let storage;\n    return this.storagePromise_\n      .then((s) => {\n        storage = s;\n        return storage.get(this.storageKey_);\n      })\n      .then((storedValue) => {\n        if (this.localConsentInfo_) {\n          // If local value has been updated, return most updated value;\n          return this.localConsentInfo_;\n        }\n\n        const consentInfo = getStoredConsentInfo(storedValue);\n        this.savedConsentInfo_ = consentInfo;\n\n        if (hasDirtyBit(consentInfo)) {\n          // clear stored value.\n          this.sendUpdateHrefRequest_(\n            constructConsentInfo(CONSENT_ITEM_STATE.UNKNOWN)\n          );\n          storage.remove(this.storageKey_);\n          this.savedConsentInfo_ = null;\n        }\n        // Note: this.localConsentInfo dirtyBit can only be set to false\n        // if the stored value has dirtyBit.\n        // Any local update reset the value to true.\n        this.localConsentInfo_ = consentInfo;\n        return this.localConsentInfo_;\n      })\n      .catch((e) => {\n        dev().error(TAG, 'Failed to read storage', e);\n        return constructConsentInfo(CONSENT_ITEM_STATE.UNKNOWN);\n      });\n  }\n\n  /**\n   * send a POST request to the updateHref with userId with fixed scope\n   * and consentInstanceIds\n   * @param {!ConsentInfoDef} consentInfo\n   */\n  sendUpdateHrefRequest_(consentInfo) {\n    if (!this.onUpdateHref_) {\n      return;\n    }\n    if (hasDirtyBit(consentInfo)) {\n      // No need to send update request if the stored consent info is dirty\n      return;\n    }\n    const legacyConsentState = calculateLegacyStateValue(\n      consentInfo['consentState']\n    );\n    getConsentCID(this.ampdoc_).then((userId) => {\n      const request = /** @type {!JsonObject} */ ({\n        // Unfortunately we need to keep the name to be backward compatible\n        'consentInstanceId': this.id_,\n        'ampUserId': userId,\n      });\n      if (legacyConsentState != null) {\n        request['consentState'] = legacyConsentState;\n      }\n      request['consentStateValue'] = getConsentStateValue(\n        consentInfo['consentState']\n      );\n      if (consentInfo['consentString']) {\n        request['consentString'] = consentInfo['consentString'];\n      }\n      if (consentInfo['consentMetadata']) {\n        request['consentMetadata'] = consentInfo['consentMetadata'];\n      }\n      if (consentInfo['purposeConsents']) {\n        request['purposeConsents'] = consentInfo['purposeConsents'];\n      }\n      const init = {\n        credentials: 'include',\n        method: 'POST',\n        body: request,\n        ampCors: false,\n      };\n      this.ampdoc_.whenFirstVisible().then(() => {\n        expandConsentEndpointUrl(\n          this.ampdoc_.getHeadNode(),\n          /** @type {string} */ (this.onUpdateHref_)\n        ).then((expandedUpdateHref) => {\n          Services.xhrFor(this.ampdoc_.win).fetchJson(expandedUpdateHref, init);\n        });\n      });\n    });\n  }\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {internalListenImplementation} from './core/dom/event-helper-listen';\nimport {lastChildElement} from './core/dom/query';\nimport {user} from './log';\n\n/** @const {string}  */\nconst LOAD_FAILURE_PREFIX = 'Failed to load:';\n\n/** @const {string} */\nexport const MEDIA_LOAD_FAILURE_SRC_PROPERTY = '__AMP_MEDIA_LOAD_FAILURE_SRC';\n\n/**\n * Returns a CustomEvent with a given type and detail; supports fallback for IE.\n * @param {!Window} win\n * @param {string} type\n * @param {!JsonObject|string|undefined|null} detail\n * @param {EventInit=} opt_eventInit\n * @return {!Event}\n */\nexport function createCustomEvent(win, type, detail, opt_eventInit) {\n  const eventInit = /** @type {!CustomEventInit} */ ({detail});\n  Object.assign(eventInit, opt_eventInit);\n  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but\n  // is an object on IE 11.\n  if (IS_ESM || typeof win.CustomEvent == 'function') {\n    return new win.CustomEvent(type, eventInit);\n  } else {\n    // Deprecated fallback for IE.\n    const e = win.document.createEvent('CustomEvent');\n    e.initCustomEvent(\n      type,\n      !!eventInit.bubbles,\n      !!eventInit.cancelable,\n      detail\n    );\n    return e;\n  }\n}\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n    element,\n    eventType,\n    listener,\n    opt_evtListenerOpts\n  );\n}\n\n/**\n * Returns the data property of an event with the correct type.\n * @param {!Event|{data: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getData(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.data);\n}\n\n/**\n * Returns the detail property of an event with the correct type.\n * @param {!Event|{detail: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getDetail(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.detail);\n}\n\n/**\n * Listens for the specified event on the element and removes the listener\n * as soon as event has been received.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listenOnce(element, eventType, listener, opt_evtListenerOpts) {\n  let localListener = listener;\n  const unlisten = internalListenImplementation(\n    element,\n    eventType,\n    (event) => {\n      try {\n        localListener(event);\n      } finally {\n        // Ensure listener is GC'd\n        localListener = null;\n        unlisten();\n      }\n    },\n    opt_evtListenerOpts\n  );\n  return unlisten;\n}\n\n/**\n * Returns  a promise that will resolve as soon as the specified event has\n * fired on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {Object=} opt_evtListenerOpts\n * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when\n *     provided, will be called with the unlistener. This gives the caller\n *     access to the unlistener, so it may be called manually when necessary.\n * @return {!Promise<!Event>}\n */\nexport function listenOncePromise(\n  element,\n  eventType,\n  opt_evtListenerOpts,\n  opt_cancel\n) {\n  let unlisten;\n  const eventPromise = new Promise((resolve) => {\n    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);\n  });\n  eventPromise.then(unlisten, unlisten);\n  if (opt_cancel) {\n    opt_cancel(unlisten);\n  }\n  return eventPromise;\n}\n\n/**\n * Whether the specified element/window has been loaded already.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nexport function isLoaded(eleOrWindow) {\n  return !!(\n    eleOrWindow.complete ||\n    eleOrWindow.readyState == 'complete' ||\n    (isHTMLMediaElement(eleOrWindow) && eleOrWindow.readyState > 0) ||\n    // If the passed in thing is a Window, infer loaded state from\n    //\n    (eleOrWindow.document && eleOrWindow.document.readyState == 'complete')\n  );\n}\n\n/**\n * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'\n * and 'error' events. Optionally this method takes a timeout, which will reject\n * the promise if the resource has not loaded by then.\n * @param {T} eleOrWindow Supports both Elements and as a special case Windows.\n * @return {!Promise<T>}\n * @template T\n */\nexport function loadPromise(eleOrWindow) {\n  let unlistenLoad;\n  let unlistenError;\n  if (isLoaded(eleOrWindow)) {\n    return Promise.resolve(eleOrWindow);\n  }\n  const isMediaElement = isHTMLMediaElement(eleOrWindow);\n  if (\n    isMediaElement &&\n    eleOrWindow[MEDIA_LOAD_FAILURE_SRC_PROPERTY] === eleOrWindow.currentSrc\n  ) {\n    return Promise.reject(eleOrWindow);\n  }\n  const loadingPromise = new Promise((resolve, reject) => {\n    // Listen once since IE 5/6/7 fire the onload event continuously for\n    // animated GIFs.\n    if (isMediaElement) {\n      // The following event can be triggered by the media or one of its\n      // sources. Using capture is required as the media events do not bubble.\n      unlistenLoad = listenOnce(eleOrWindow, 'loadedmetadata', resolve, {\n        capture: true,\n      });\n    } else {\n      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);\n    }\n    // Don't unlisten on error for Windows.\n    if (!eleOrWindow.tagName) {\n      return;\n    }\n    let errorTarget = eleOrWindow;\n    // If the media element has no `src`, it will try to load the sources in\n    // document order. If the last source errors, then the media element\n    // loading errored.\n    if (isMediaElement && !eleOrWindow.hasAttribute('src')) {\n      errorTarget = lastChildElement(\n        eleOrWindow,\n        (child) => child.tagName === 'SOURCE'\n      );\n      if (!errorTarget) {\n        return reject(new Error('Media has no source.'));\n      }\n    }\n    unlistenError = listenOnce(errorTarget, 'error', reject);\n  });\n\n  return loadingPromise.then(\n    () => {\n      if (unlistenError) {\n        unlistenError();\n      }\n      return eleOrWindow;\n    },\n    () => {\n      if (unlistenLoad) {\n        unlistenLoad();\n      }\n      failedToLoad(eleOrWindow);\n    }\n  );\n}\n\n/**\n * Emit error on load failure.\n * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special\n *     case Windows.\n */\nfunction failedToLoad(eleOrWindow) {\n  // Mark the element as errored since some elements - like HTMLMediaElement\n  // using HTMLSourceElement - do not provide any synchronous way to verify if\n  // they already errored, even though the error event was already dispatched.\n  if (isHTMLMediaElement(eleOrWindow)) {\n    eleOrWindow[MEDIA_LOAD_FAILURE_SRC_PROPERTY] =\n      eleOrWindow.currentSrc || true;\n  }\n\n  // Report failed loads as user errors so that they automatically go\n  // into the \"document error\" bucket.\n  let target = eleOrWindow;\n  if (target && target.src) {\n    target = target.src;\n  }\n  throw user().createError(LOAD_FAILURE_PREFIX, target);\n}\n\n/**\n * Returns true if the parameter is a HTMLMediaElement.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nfunction isHTMLMediaElement(eleOrWindow) {\n  return eleOrWindow.tagName === 'AUDIO' || eleOrWindow.tagName === 'VIDEO';\n}\n\n/**\n * Returns true if this error message is was created for a load error.\n * @param {string} message An error message\n * @return {boolean}\n */\nexport function isLoadErrorMessage(message) {\n  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {devAssert} from './log';\nimport {map} from './core/types/object';\n\nlet htmlContainer;\nlet svgContainer;\n\n/**\n * Creates the html helper for the doc.\n *\n * @param {!Element|!Document} nodeOrDoc\n * @return {function(!Array<string>):!Element}\n */\nexport function htmlFor(nodeOrDoc) {\n  const doc = nodeOrDoc.ownerDocument || nodeOrDoc;\n  if (!htmlContainer || htmlContainer.ownerDocument !== doc) {\n    htmlContainer = doc.createElement('div');\n  }\n\n  return html;\n}\n\n/**\n * Creates the svg helper for the doc.\n *\n * @param {!Element|!Document} nodeOrDoc\n * @return {function(!Array<string>):!Element}\n */\nexport function svgFor(nodeOrDoc) {\n  const doc = nodeOrDoc.ownerDocument || nodeOrDoc;\n  if (!svgContainer || svgContainer.ownerDocument !== svgContainer) {\n    svgContainer = doc.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  }\n\n  return svg;\n}\n\n/**\n * A tagged template literal helper to generate static SVG trees.\n * This must be used as a tagged template, ie\n *\n * ```\n * const circle = svg`<circle cx=\"60\" cy=\"60\" r=\"22\"></circle>`;\n * ```\n *\n * Only the root element and its subtree will be returned. DO NOT use this to\n * render subtree's with dynamic content, it WILL result in an error!\n *\n * @param {!Array<string>} strings\n * @return {!Element}\n */\nfunction svg(strings) {\n  return createNode(svgContainer, strings);\n}\n\n/**\n * A tagged template literal helper to generate static DOM trees.\n * This must be used as a tagged template, ie\n *\n * ```\n * const div = html`<div><span></span></div>`;\n * ```\n *\n * Only the root element and its subtree will be returned. DO NOT use this to\n * render subtree's with dynamic content, it WILL result in an error!\n *\n * @param {!Array<string>} strings\n * @return {!Element}\n */\nfunction html(strings) {\n  return createNode(htmlContainer, strings);\n}\n\n/**\n * Helper used by html and svg string literal functions.\n * @param {!Element} container\n * @param {!Array<string>} strings\n * @return {!Element}\n */\nfunction createNode(container, strings) {\n  devAssert(strings.length === 1, 'Improper html template tag usage.');\n  container./*OK*/ innerHTML = strings[0];\n\n  const el = container.firstElementChild;\n  devAssert(el, 'No elements in template');\n  devAssert(!el.nextElementSibling, 'Too many root elements in template');\n\n  // Clear to free memory.\n  container.removeChild(el);\n\n  return el;\n}\n\n/**\n * Queries an element for all elements with a \"ref\" attribute, removing\n * the attribute afterwards.\n * Returns a named map of all ref elements.\n *\n * @param {!Element} root\n * @return {!Object<string, !Element>}\n */\nexport function htmlRefs(root) {\n  const elements = root.querySelectorAll('[ref]');\n  const refs = map();\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const ref = devAssert(element.getAttribute('ref'), 'Empty ref attr');\n    element.removeAttribute('ref');\n    devAssert(refs[ref] === undefined, 'Duplicate ref');\n    refs[ref] = element;\n  }\n\n  return refs;\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Experiments system allows a developer to opt-in to test\n * features that are not yet fully tested.\n *\n * Experiments page: https://cdn.ampproject.org/experiments.html *\n */\n\nimport {dev, user} from '../log';\nimport {getMode} from '../mode';\nimport {getTopWindow} from '../service';\nimport {hasOwn, map} from '../core/types/object';\nimport {isArray} from '../core/types';\nimport {parseQueryString} from '../core/types/string/url';\n\n// typedef imports\nimport {ExperimentInfoDef} from './experiments.type';\n\n/** @const {string} */\nconst TAG = 'EXPERIMENTS';\n\n/** @const {string} */\nconst LOCAL_STORAGE_KEY = 'amp-experiment-toggles';\n\n/** @const {string} */\nconst TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';\n\n/**\n * Whether we are in canary.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCanary(win) {\n  return !!win.AMP_CONFIG?.canary;\n}\n\n/**\n * Returns binary type, e.g., canary, production, control, or rc.\n * @param {!Window} win\n * @return {string}\n */\nexport function getBinaryType(win) {\n  return win.AMP_CONFIG?.type || 'unknown';\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  const toggles = experimentToggles(win);\n  return !!toggles[experimentId];\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean=} opt_on\n * @param {boolean=} opt_transientExperiment  Whether to toggle the\n *     experiment state \"transiently\" (i.e., for this page load only) or\n *     durably (by saving the experiment IDs after toggling).\n *     Default: false (save durably).\n * @return {boolean} New state for experimentId.\n */\nexport function toggleExperiment(\n  win,\n  experimentId,\n  opt_on,\n  opt_transientExperiment\n) {\n  const currentlyOn = isExperimentOn(win, /*OK*/ experimentId);\n  const on = opt_on ?? !currentlyOn;\n  if (on != currentlyOn) {\n    const toggles = experimentToggles(win);\n    toggles[experimentId] = on;\n\n    if (!opt_transientExperiment) {\n      const storedToggles = getExperimentToggles(win);\n      storedToggles[experimentId] = on;\n      saveExperimentToggles(win, storedToggles);\n      // Avoid affecting tests that spy/stub warn().\n      if (!getMode().test) {\n        user().warn(\n          TAG,\n          '\"%s\" experiment %s for the domain \"%s\". See: https://amp.dev/documentation/guides-and-tutorials/learn/experimental',\n          experimentId,\n          on ? 'enabled' : 'disabled',\n          win.location.hostname\n        );\n      }\n    }\n  }\n  return on;\n}\n\n/**\n * Calculate whether the experiment is on or off based off of its default value,\n * stored overriden value, or the global config frequency given.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nexport function experimentToggles(win) {\n  if (win[TOGGLES_WINDOW_PROPERTY]) {\n    return win[TOGGLES_WINDOW_PROPERTY];\n  }\n  win[TOGGLES_WINDOW_PROPERTY] = map();\n  const toggles = win[TOGGLES_WINDOW_PROPERTY];\n\n  // Read the default config of this build.\n  if (win.AMP_CONFIG) {\n    for (const experimentId in win.AMP_CONFIG) {\n      const frequency = win.AMP_CONFIG[experimentId];\n      if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {\n        toggles[experimentId] = Math.random() < frequency;\n      }\n    }\n  }\n  // Read document level override from meta tag.\n  const allowedDocOptIn = win.AMP_CONFIG?.['allow-doc-opt-in'];\n  if (isArray(allowedDocOptIn) && allowedDocOptIn.length) {\n    const meta = win.document.head.querySelector(\n      'meta[name=\"amp-experiments-opt-in\"]'\n    );\n    if (meta) {\n      const optedInExperiments = meta.getAttribute('content').split(',');\n      for (const experiment of optedInExperiments) {\n        if (dev().assertArray(allowedDocOptIn).includes(experiment)) {\n          toggles[experiment] = true;\n        }\n      }\n    }\n  }\n\n  Object.assign(toggles, getExperimentToggles(win));\n\n  const allowedUrlOptIn = win.AMP_CONFIG?.['allow-url-opt-in'];\n  if (isArray(allowedUrlOptIn) && allowedUrlOptIn.length) {\n    const hash = win.location['originalHash'] || win.location.hash;\n    const params = parseQueryString(hash);\n    for (const experiment of allowedUrlOptIn) {\n      const param = params[`e-${experiment}`];\n      if (param == '1') {\n        toggles[experiment] = true;\n      }\n      if (param == '0') {\n        toggles[experiment] = false;\n      }\n    }\n  }\n  return toggles;\n}\n\n/**\n * Returns the cached experiments toggles, or null if they have not been\n * computed yet.\n * @param {!Window} win\n * @return {?Object<string, boolean>}\n */\nexport function experimentTogglesOrNull(win) {\n  return win[TOGGLES_WINDOW_PROPERTY] || null;\n}\n\n/**\n * Returns a set of experiment IDs currently on.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperimentToggles(win) {\n  let experimentsString = '';\n  try {\n    if ('localStorage' in win) {\n      experimentsString = win.localStorage.getItem(LOCAL_STORAGE_KEY);\n    }\n  } catch {\n    dev().warn(TAG, 'Failed to retrieve experiments from localStorage.');\n  }\n  const tokens = experimentsString?.split(/\\s*,\\s*/g) || [];\n\n  const toggles = map();\n  for (const token of tokens) {\n    if (!token) {\n      continue;\n    }\n    if (token[0] == '-') {\n      toggles[token.substr(1)] = false;\n    } else {\n      toggles[token] = true;\n    }\n  }\n  return toggles;\n}\n\n/**\n * Saves a set of experiment IDs currently on.\n * @param {!Window} win\n * @param {!Object<string, boolean>} toggles\n */\nfunction saveExperimentToggles(win, toggles) {\n  const experimentIds = [];\n  for (const experiment in toggles) {\n    experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);\n  }\n  try {\n    win.localStorage?.setItem(LOCAL_STORAGE_KEY, experimentIds.join(','));\n  } catch (e) {\n    user().error(TAG, 'Failed to save experiments to localStorage.');\n  }\n}\n\n/**\n * See getExperimentToggles().\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n * @visibleForTesting\n */\nexport function getExperimentTogglesForTesting(win) {\n  return getExperimentToggles(win);\n}\n\n/**\n * Resets the experimentsToggle cache for testing purposes.\n * @param {!Window} win\n * @visibleForTesting\n */\nexport function resetExperimentTogglesForTesting(win) {\n  saveExperimentToggles(win, {});\n  win[TOGGLES_WINDOW_PROPERTY] = null;\n}\n\n/**\n * In some browser implementations of Math.random(), sequential calls of\n * Math.random() are correlated and can cause a bias.  In particular,\n * if the previous random() call was < 0.001 (as it will be if we select\n * into an experiment), the next value could be less than 0.5 more than\n * 50.7% of the time.  This provides an implementation that roots down into\n * the crypto API, when available, to produce less biased samples.\n *\n * @return {number} Pseudo-random floating-point value on the range [0, 1).\n */\nfunction slowButAccuratePrng() {\n  // TODO(tdrl): Implement.\n  return Math.random();\n}\n\n/**\n * Container for alternate random number generator implementations.  This\n * allows us to set an \"accurate\" PRNG for branch selection, but to mock it\n * out easily in tests.\n *\n * @visibleForTesting\n * @const {!{accuratePrng: function():number}}\n */\nexport const RANDOM_NUMBER_GENERATORS = {\n  accuratePrng: slowButAccuratePrng,\n};\n\n/**\n * Selects, uniformly at random, a single item from the array.\n * @param {!Array<string>} arr Object to select from.\n * @return {?string} Single item from arr or null if arr was empty.\n */\nfunction selectRandomItem(arr) {\n  const rn = RANDOM_NUMBER_GENERATORS.accuratePrng();\n  return dev().assertString(arr[Math.floor(rn * arr.length)]) || null;\n}\n\n/**\n * Selects which page-level experiment branches are enabled. If a given\n * experiment name is already set (including to the null / no branches selected\n * state), this won't alter its state.\n *\n * Check whether a given experiment is set using isExperimentOn(win,\n * experimentName) and, if it is on, look for which branch is selected in\n * win.__AMP_EXPERIMENT_BRANCHES[experimentName].\n *\n * @param {!Window} win Window context on which to save experiment\n *     selection state.\n * @param {!Array<!ExperimentInfoDef>} experiments  Set of experiments to\n *     configure for this page load.\n * @return {!Object<string, string>} Map of experiment names to selected\n *     branches.\n */\nexport function randomlySelectUnsetExperiments(win, experiments) {\n  win.__AMP_EXPERIMENT_BRANCHES = win.__AMP_EXPERIMENT_BRANCHES || {};\n  const selectedExperiments = {};\n  for (const experiment of experiments) {\n    const experimentName = experiment.experimentId;\n    if (hasOwn(win.__AMP_EXPERIMENT_BRANCHES, experimentName)) {\n      selectedExperiments[experimentName] =\n        win.__AMP_EXPERIMENT_BRANCHES[experimentName];\n      continue;\n    }\n\n    if (!experiment.isTrafficEligible?.(win)) {\n      win.__AMP_EXPERIMENT_BRANCHES[experimentName] = null;\n      continue;\n    }\n\n    // If we're in the experiment, but we haven't already forced a specific\n    // experiment branch (e.g., via a test setup), then randomize the branch\n    // choice.\n    if (\n      !win.__AMP_EXPERIMENT_BRANCHES[experimentName] &&\n      isExperimentOn(win, /*OK*/ experimentName)\n    ) {\n      win.__AMP_EXPERIMENT_BRANCHES[experimentName] = selectRandomItem(\n        experiment.branches\n      );\n      selectedExperiments[experimentName] =\n        win.__AMP_EXPERIMENT_BRANCHES[experimentName];\n    }\n  }\n  return selectedExperiments;\n}\n\n/**\n * Returns the experiment branch enabled for the given experiment ID.\n * For example, 'control' or 'experiment'.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @return {?string} Active experiment branch ID for experimentName (possibly\n *     null if experimentName has been tested but no branch was enabled).\n */\nexport function getExperimentBranch(win, experimentName) {\n  return win.__AMP_EXPERIMENT_BRANCHES\n    ? win.__AMP_EXPERIMENT_BRANCHES[experimentName]\n    : null;\n}\n\n/**\n * Returns an object containing all active experiment branches on the\n * top Window.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @return {!Object} contains all experiment branches and their ids.\n */\nexport function getActiveExperimentBranches(win) {\n  const topWin = getTopWindow(win);\n  if (!topWin.__AMP_EXPERIMENT_BRANCHES) {\n    topWin.__AMP_EXPERIMENT_BRANCHES = {};\n  }\n  return {...topWin.__AMP_EXPERIMENT_BRANCHES};\n}\n\n/**\n * Force enable (or disable) a specific branch of a given experiment name.\n * Disables the experiment name altogether if branchId is falseish.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @param {?string} branchId ID of branch to force or null to disable\n *     altogether.\n * @visibleForTesting\n */\nexport function forceExperimentBranch(win, experimentName, branchId) {\n  win.__AMP_EXPERIMENT_BRANCHES = win.__AMP_EXPERIMENT_BRANCHES || {};\n  toggleExperiment(win, experimentName, !!branchId, true);\n  win.__AMP_EXPERIMENT_BRANCHES[experimentName] = branchId;\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {dev, devAssert} from './log';\nimport {map} from './core/types/object';\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\nconst EMPTY_CSS_DECLARATION = /** @type {!CSSStyleDeclaration} */ ({\n  'getPropertyPriority': () => '',\n  'getPropertyValue': () => '',\n});\n\n/**\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n  Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (isVar(camelCase)) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  const {style} = element;\n  for (const k in styles) {\n    style.setProperty(\n      getVendorJsPropertyName(style, k),\n      String(styles[k]),\n      'important'\n    );\n  }\n}\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    opt_bypassCache\n  );\n  if (!propertyName) {\n    return;\n  }\n  const styleValue = /** @type {string} */ (\n    opt_units ? value + opt_units : value\n  );\n  if (isVar(propertyName)) {\n    element.style.setProperty(propertyName, styleValue);\n  } else {\n    element.style[propertyName] = styleValue;\n  }\n}\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(\n    element.style,\n    property,\n    opt_bypassCache\n  );\n  if (!propertyName) {\n    return undefined;\n  }\n  if (isVar(propertyName)) {\n    return element.style.getPropertyValue(propertyName);\n  }\n  return element.style[propertyName];\n}\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n/**\n * Asserts that the style is not the `display` style.\n * This is the only possible way to pass a dynamic style to setStyle.\n *\n * If you wish to set `display`, use the `toggle` helper instead. This is so\n * changes to display can trigger necessary updates. See #17475.\n *\n * @param {string} style\n * @return {string}\n */\nexport function assertNotDisplay(style) {\n  if (style === 'display') {\n    dev().error(\n      'STYLE',\n      '`display` style detected. You must use toggle instead.'\n    );\n  }\n  return style;\n}\n\n/**\n * Asserts that the styles does not contain the `display` style.\n * This is the only possible way to pass a dynamic styles object to setStyles\n * and setImportantStyles.\n *\n * If you wish to set `display`, use the `toggle` helper instead. This is so\n * changes to display can trigger necessary updates. See #17475.\n *\n * @param {!Object<string, *>} styles\n * @return {!Object<string, *>}\n */\nexport function assertDoesNotContainDisplay(styles) {\n  if ('display' in styles) {\n    dev().error(\n      'STYLE',\n      '`display` style detected in styles. You must use toggle instead.'\n    );\n  }\n  return styles;\n}\n\n/**\n * Sets the initial display style of an element. This is a last resort. If you\n * can set the initial display using CSS, YOU MUST.\n * DO NOT USE THIS TO ARBITRARILY SET THE DISPLAY STYLE AFTER INITIAL SETUP.\n *\n * @param {!Element} el\n * @param {string} value\n */\nexport function setInitialDisplay(el, value) {\n  const {style} = el;\n  devAssert(\n    value !== '' && value !== 'none',\n    'Initial display value must not be \"none\". Use toggle instead.'\n  );\n  devAssert(\n    !style['display'],\n    'setInitialDisplay MUST NOT be used for ' +\n      'resetting the display style. If you are looking for display:none ' +\n      'toggling, use toggle instead.'\n  );\n  style['display'] = value;\n}\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = element.hasAttribute('hidden');\n  }\n  if (opt_display) {\n    element.removeAttribute('hidden');\n  } else {\n    element.setAttribute('hidden', '');\n  }\n}\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  if (typeof value == 'number') {\n    value = deg(value);\n  }\n  return `rotate(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n    /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g,\n    '($1,$2,$3, 1)'\n  );\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!CSSStyleDeclaration}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */ (win.getComputedStyle(el));\n  return style || EMPTY_CSS_DECLARATION;\n}\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  for (let i = 0; i < properties.length; i++) {\n    setStyle(element, properties[i], null);\n  }\n}\n\n/**\n * Propagates the object-fit/position element attributes as styles.\n * @param {!Element} fromEl ie: amp-img\n * @param {!Element} toEl ie: the img within amp-img\n */\nexport function propagateObjectFitStyles(fromEl, toEl) {\n  if (fromEl.hasAttribute('object-fit')) {\n    setStyle(toEl, 'object-fit', fromEl.getAttribute('object-fit'));\n  }\n\n  if (fromEl.hasAttribute('object-position')) {\n    setStyle(toEl, 'object-position', fromEl.getAttribute('object-position'));\n  }\n}\n\n/**\n * @param {string} property\n * @return {boolean}\n */\nfunction isVar(property) {\n  return property.startsWith('--');\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from '../../../src/core/data-structures/promise';\nimport {Services} from '../../../src/services';\nimport {assertHttpsUrl} from '../../../src/url';\nimport {dev, user} from '../../../src/log';\nimport {dict} from '../../../src/core/types/object';\nimport {elementByTag} from '../../../src/core/dom/query';\nimport {expandConsentEndpointUrl} from './consent-config';\nimport {getConsentStateValue} from './consent-info';\nimport {getData} from '../../../src/event-helper';\nimport {getServicePromiseForDoc} from '../../../src/service';\nimport {htmlFor} from '../../../src/static-template';\nimport {\n  insertAtStart,\n  isAmpElement,\n  removeElement,\n  tryFocus,\n  whenUpgradedToCustomElement,\n} from '../../../src/dom';\nimport {isExperimentOn} from '../../../src/experiments';\nimport {setImportantStyles, setStyles, toggle} from '../../../src/style';\n\nconst TAG = 'amp-consent-ui';\nconst CONSENT_STATE_MANAGER = 'consentStateManager';\nconst MINIMUM_INITIAL_HEIGHT = 10;\nconst DEFAULT_INITIAL_HEIGHT = 30;\nconst MODAL_HEIGHT_ENABLED = 60;\nconst MAX_INITIAL_HEIGHT = 80;\nconst DEFAULT_ENABLE_BORDER = true;\nconst FULLSCREEN_SUCCESS = 'Entering fullscreen.';\nconst FULLSCREEN_ERROR =\n  'Could not enter fullscreen. Fullscreen is only supported ' +\n  'when the iframe is visible as a bottom sheet and after ' +\n  'user interaction.';\nconst CONSENT_PROMPT_CAPTION = 'User Consent Prompt';\nconst BUTTON_ACTION_CAPTION = 'Focus Prompt';\nconst CANCEL_OVERLAY = 'cancelFullOverlay';\nconst REQUEST_OVERLAY = 'requestFullOverlay';\n\nconst IFRAME_RUNNING_TIMEOUT = 1000;\n\nexport const actionState = {\n  error: 'error',\n  success: 'success',\n};\n\nexport const ampConsentMessageType = {\n  response: 'amp-consent-response',\n};\n\n// Classes for consent UI\nexport const consentUiClasses = {\n  iframeFullscreen: 'i-amphtml-consent-ui-iframe-fullscreen',\n  iframeActive: 'i-amphtml-consent-ui-iframe-active',\n  modal: 'i-amphtml-consent-ui-modal',\n  in: 'i-amphtml-consent-ui-in',\n  loading: 'i-amphtml-consent-ui-loading',\n  fill: 'i-amphtml-consent-ui-fill',\n  placeholder: 'i-amphtml-consent-ui-placeholder',\n  mask: 'i-amphtml-consent-ui-mask',\n  borderEnabled: 'i-amphtml-consent-ui-border-enabled',\n  screenReaderDialog: 'i-amphtml-consent-alertdialog',\n  iframeTransform: 'i-amphtml-consent-ui-iframe-transform',\n};\n\nexport class ConsentUI {\n  /**\n   * @param {!AMP.BaseElement} baseInstance\n   * @param {!JsonObject} config\n   * @param {string=} opt_postPromptUI\n   */\n  constructor(baseInstance, config, opt_postPromptUI) {\n    /** @private {!AMP.BaseElement} */\n    this.baseInstance_ = baseInstance;\n\n    /** @private {boolean} */\n    this.isCreatedIframe_ = false;\n\n    /** @private {boolean} */\n    this.isPostPrompt_ = false;\n\n    /** @private {boolean} */\n    this.isVisible_ = false;\n\n    /** @private {boolean} */\n    this.isIframeVisible_ = false;\n\n    /** @private {boolean} */\n    this.isFullscreen_ = false;\n\n    /** @private {?Element} */\n    this.ui_ = null;\n\n    /** @private {boolean} */\n    this.overlayEnabled_ =\n      config['uiConfig'] && config['uiConfig']['overlay'] === true;\n\n    /** @private {string} */\n    this.consentPromptCaption_ =\n      (config['captions'] && config['captions']['consentPromptCaption']) ||\n      CONSENT_PROMPT_CAPTION;\n\n    /** @private {string} */\n    this.buttonActionCaption_ =\n      (config['captions'] && config['captions']['buttonActionCaption']) ||\n      BUTTON_ACTION_CAPTION;\n\n    /** @private {boolean} */\n    this.srAlertShown_ = false;\n\n    /** @private {boolean} */\n    this.scrollEnabled_ = true;\n\n    /** @private {?Element} */\n    this.maskElement_ = null;\n\n    /** @private {?Element} */\n    this.srAlert_ = null;\n\n    /** @private {?Element} */\n    this.elementWithFocusBeforeShowing_ = null;\n\n    /** @private {!../../../src/service/ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = baseInstance.getAmpDoc();\n\n    /** @private {!../../../src/service/viewport/viewport-interface.ViewportInterface} */\n    this.viewport_ = Services.viewportForDoc(this.ampdoc_);\n\n    /** @private {?../../../src/service/viewer-interface.ViewerInterface} */\n    this.viewer_ = Services.viewerForDoc(this.ampdoc_);\n\n    /** @private {!Element} */\n    this.parent_ = baseInstance.element;\n\n    /** @private {!Window} */\n    this.win_ = baseInstance.win;\n\n    /** @private @const {!Document} */\n    this.document_ = this.win_.document;\n\n    /** @private {?Deferred} */\n    this.iframeReady_ = null;\n\n    /** @private {boolean} */\n    this.removeIframe_ = false;\n\n    /** @private {?JsonObject} */\n    this.clientConfig_ = null;\n\n    /** @private {?Element} */\n    this.placeholder_ = null;\n\n    /** @private {string} */\n    this.initialHeight_ = `${DEFAULT_INITIAL_HEIGHT}vh`;\n\n    /** @private {boolean} */\n    this.borderEnabled_ = DEFAULT_ENABLE_BORDER;\n\n    /** @private {boolean} */\n    this.modalEnabled_ = false;\n\n    /** @private {boolean} */\n    this.isActionPromptTrigger_ = false;\n\n    /** @private @const {!Function} */\n    this.boundHandleIframeMessages_ = this.handleIframeMessages_.bind(this);\n\n    /** @private {?Promise<string>} */\n    this.promptUISrcPromise_ = null;\n\n    this.isGranularConsentExperimentOn_ = isExperimentOn(\n      this.win_,\n      'amp-consent-granular-consent'\n    );\n\n    this.init_(config, opt_postPromptUI);\n  }\n\n  /**\n   * @param {!JsonObject} config\n   * @param {string=} opt_postPromptUI\n   */\n  init_(config, opt_postPromptUI) {\n    if (opt_postPromptUI) {\n      const postPromptUI = this.ampdoc_.getElementById(opt_postPromptUI);\n      if (!postPromptUI) {\n        user().error(\n          TAG,\n          'postPromptUI element with id=%s not found',\n          opt_postPromptUI\n        );\n      }\n      this.ui_ = dev().assertElement(postPromptUI);\n      this.isPostPrompt_ = true;\n      return;\n    }\n    const promptUI = config['promptUI'];\n    const promptUISrc = config['promptUISrc'];\n    if (promptUI) {\n      // Always respect promptUI first\n      const promptElement = this.ampdoc_.getElementById(promptUI);\n      if (!promptElement || !this.parent_.contains(promptElement)) {\n        user().error(\n          TAG,\n          'child element of <amp-consent> with promptUI id %s not found',\n          promptUI\n        );\n      }\n      this.ui_ = dev().assertElement(promptElement);\n    } else if (promptUISrc) {\n      // Create an iframe element with the provided src\n      this.isCreatedIframe_ = true;\n      assertHttpsUrl(promptUISrc, this.parent_);\n      // TODO: Preconnect to the promptUISrc?\n      this.promptUISrcPromise_ = expandConsentEndpointUrl(\n        this.parent_,\n        promptUISrc\n      );\n      this.ui_ = this.createPromptIframe_(promptUISrc);\n      this.placeholder_ = this.createPlaceholder_();\n      this.clientConfig_ = config['clientConfig'] || null;\n    }\n  }\n\n  /**\n   * Display the UI.\n   * @param {boolean} isActionPromptTrigger\n   */\n  show(isActionPromptTrigger) {\n    if (!this.ui_) {\n      // No prompt UI specified, nothing to do\n      return;\n    }\n    if (this.isPostPrompt_ && !this.parent_.contains(this.ui_)) {\n      toggle(this.ui_, true);\n      return;\n    }\n    toggle(dev().assertElement(this.parent_), true);\n    const {classList} = this.parent_;\n    classList.add('amp-active');\n    classList.remove('amp-hidden');\n    // Add to fixed layer\n    this.baseInstance_.getViewport().addToFixedLayer(this.parent_);\n    if (this.isCreatedIframe_ && this.promptUISrcPromise_) {\n      // show() can be called multiple times, but notificationsUiManager\n      // ensures that only 1 is shown at a time, so no race condition here\n      this.isActionPromptTrigger_ = isActionPromptTrigger;\n      this.loadIframe_().then(() => {\n        // It is safe to assume that the loadIframe_ promise will resolve\n        // before resetIframe_. Because the iframe needs to be shown first\n        // being hidden. CMP iframe is responsible to call consent-iframe-ready\n        // API before consent-response API.\n        this.baseInstance_.mutateElement(() => {\n          if (!this.isPostPrompt_) {\n            this.elementWithFocusBeforeShowing_ = this.document_.activeElement;\n          }\n\n          this.maybeShowOverlay_();\n\n          // Create and append SR alert for the when iframe\n          // initially loads.\n          this.maybeShowSrAlert_();\n\n          this.showIframe_();\n        });\n      });\n    } else {\n      const show = () => {\n        if (!this.ui_) {\n          return;\n        }\n\n        toggle(this.ui_, true);\n\n        if (!this.isPostPrompt_) {\n          this.elementWithFocusBeforeShowing_ = this.document_.activeElement;\n\n          this.maybeShowOverlay_();\n          this.resume();\n          this.ui_./*OK*/ focus();\n        }\n      };\n\n      // If the UI is an AMP Element, wait until it's built before showing it,\n      // to avoid race conditions where the UI would be hidden by the runtime\n      // at build time. (see #18841).\n      if (isAmpElement(this.ui_)) {\n        whenUpgradedToCustomElement(this.ui_)\n          .then(() => this.ui_.build())\n          .then(() => show());\n      } else {\n        show();\n      }\n    }\n\n    this.isVisible_ = true;\n  }\n\n  /**\n   * Hide the UI\n   */\n  hide() {\n    if (!this.ui_) {\n      // Nothing to hide from;\n      return;\n    }\n\n    this.pause();\n\n    this.baseInstance_.mutateElement(() => {\n      if (this.isCreatedIframe_) {\n        this.resetIframe_();\n      }\n\n      if (!this.isPostPrompt_) {\n        const {classList} = this.parent_;\n        classList.remove('amp-active');\n        classList.add('amp-hidden');\n      }\n\n      // Hide the overlay\n      this.maybeHideOverlay_();\n      // Remove the SR alert from DOM\n      this.maybeRemoveSrAlert_();\n      // Enable the scroll, in case we were fullscreen with no overlay\n      this.enableScroll_();\n      // Reset any animation styles set by style attribute\n      this.resetAnimationStyles_();\n\n      // NOTE (torch2424): This is very sensitive. Fixed layer applies\n      // a `top: calc(0px)` in order to fix some bugs, thus\n      // We should be careful in moving this around as\n      // `removeFromFixedLayer` will remove the `top` styling.\n      // This will preserve The animation,\n      // and prevent element flashing.\n      this.baseInstance_.getViewport().removeFromFixedLayer(this.parent_);\n      toggle(dev().assertElement(this.ui_), false);\n      this.isVisible_ = false;\n\n      if (this.elementWithFocusBeforeShowing_) {\n        this.elementWithFocusBeforeShowing_./*OK*/ focus();\n        this.elementWithFocusBeforeShowing_ = null;\n      } else if (this.win_.document.body.children.length > 0) {\n        // TODO (torch2424): Find if the first child can not be\n        // focusable due to styling.\n        this.win_.document.body.children[0]./*OK*/ focus();\n      }\n    });\n  }\n\n  /** */\n  pause() {\n    if (this.ui_) {\n      Services.ownersForDoc(this.baseInstance_.element).schedulePause(\n        this.baseInstance_.element,\n        this.ui_\n      );\n    }\n  }\n\n  /** */\n  resume() {\n    if (this.ui_) {\n      // scheduleLayout is required everytime because some AMP element may\n      // get un laid out after toggle display (#unlayoutOnPause)\n      // for example <amp-iframe>\n      Services.ownersForDoc(this.baseInstance_.element).scheduleLayout(\n        this.baseInstance_.element,\n        this.ui_\n      );\n      Services.ownersForDoc(this.baseInstance_.element).scheduleResume(\n        this.baseInstance_.element,\n        this.ui_\n      );\n    }\n  }\n\n  /**\n   * Handle the ready event from the CMP iframe\n   * @param {!JsonObject} data\n   */\n  handleReady_(data) {\n    this.initialHeight_ = `${DEFAULT_INITIAL_HEIGHT}vh`;\n    this.borderEnabled_ = DEFAULT_ENABLE_BORDER;\n    this.modalEnabled_ = false;\n\n    // Set our initial height\n    if (data['initialHeight']) {\n      if (\n        typeof data['initialHeight'] === 'string' &&\n        data['initialHeight'].indexOf('vh') >= 0\n      ) {\n        const dataHeight = parseInt(data['initialHeight'], 10);\n        // Set initialHeight to max height fallback if applicable\n        this.initialHeight_ =\n          dataHeight >= MAX_INITIAL_HEIGHT\n            ? `${MAX_INITIAL_HEIGHT}vh`\n            : this.initialHeight_;\n\n        if (\n          dataHeight >= MINIMUM_INITIAL_HEIGHT &&\n          dataHeight <= MAX_INITIAL_HEIGHT\n        ) {\n          this.initialHeight_ = `${dataHeight}vh`;\n          this.modalEnabled_ = dataHeight > MODAL_HEIGHT_ENABLED;\n          // Force overlay if modal is enabled.\n          this.overlayEnabled_ = this.modalEnabled_ || this.overlayEnabled_;\n        } else {\n          user().error(\n            TAG,\n            `Inavlid initial height: ${data['initialHeight']}.` +\n              `Minimum: ${MINIMUM_INITIAL_HEIGHT}vh. Maximum: ${MAX_INITIAL_HEIGHT}vh.`\n          );\n        }\n      } else {\n        user().error(\n          TAG,\n          `Inavlid initial height: ${data['initialHeight']}.` +\n            'Must be a string in \"vh\" units.'\n        );\n      }\n    }\n\n    // Disable our border, if set to false and not modal view.\n    if (data['border'] === false && !this.modalEnabled_) {\n      this.borderEnabled_ = false;\n    }\n\n    this.iframeReady_.resolve();\n  }\n\n  /**\n   * Enter the fullscreen state for the UI\n   */\n  enterFullscreen_() {\n    if (!this.ui_ || !this.isVisible_ || this.isFullscreen_) {\n      return;\n    }\n\n    this.resetAnimationStyles_();\n\n    this.sendViewerEvent_(REQUEST_OVERLAY);\n\n    const {classList} = this.parent_;\n    classList.add(consentUiClasses.iframeFullscreen);\n\n    this.disableScroll_();\n\n    this.isFullscreen_ = true;\n  }\n\n  /**\n   * Send viewer an event.\n   * @param {string} event\n   */\n  sendViewerEvent_(event) {\n    this.viewer_.sendMessage(event, dict(), /* cancelUnsent */ true);\n  }\n\n  /**\n   * Create the iframe if promptUISrc is valid\n   * @param {string} promptUISrc\n   * @return {!Element}\n   */\n  createPromptIframe_(promptUISrc) {\n    const iframe = this.parent_.ownerDocument.createElement('iframe');\n    const sandbox = ['allow-scripts', 'allow-popups'];\n    const allowSameOrigin = this.allowSameOrigin_(promptUISrc);\n    if (allowSameOrigin) {\n      sandbox.push('allow-same-origin');\n    }\n    iframe.setAttribute('sandbox', sandbox.join(' '));\n    const {classList} = iframe;\n    classList.add(consentUiClasses.fill);\n    // Append iframe lazily to save resources.\n    return iframe;\n  }\n\n  /**\n   * Determines if allow-same-origin should be enabled for the prompt iframe\n   * @param {string} src\n   * @return {boolean}\n   */\n  allowSameOrigin_(src) {\n    const urlService = Services.urlForDoc(this.parent_);\n    const srcUrl = urlService.parse(src);\n    const containerUrl = urlService.parse(this.ampdoc_.getUrl());\n    return srcUrl.origin != containerUrl.origin;\n  }\n\n  /**\n   * Create the default placeholder\n   * @return {!Element}\n   */\n  createPlaceholder_() {\n    const placeholder = this.parent_.ownerDocument.createElement('placeholder');\n    toggle(placeholder, false);\n    placeholder.classList.add(consentUiClasses.placeholder);\n\n    const loadingSpinner = htmlFor(placeholder)`\n      <svg viewBox=\"0 0 40 40\">\n        <defs>\n          <linearGradient id=\"grad\">\n            <stop stop-color=\"rgb(105, 105, 105)\"></stop>\n            <stop offset=\"100%\"\n            stop-color=\"rgb(105, 105, 105)\"\n            stop-opacity=\"0\"></stop>\n          </linearGradient>\n        </defs>\n        <path d=\"M11,4.4 A18,18, 0,1,0, 38,20\" stroke=\"url(#grad)\"></path>\n      </svg>`;\n\n    placeholder.appendChild(loadingSpinner);\n    return placeholder;\n  }\n\n  /**\n   * Get the client information that needs to be passed to cmp iframe\n   * @return {!Promise<JsonObject>}\n   */\n  getClientInfoPromise_() {\n    const consentStatePromise = getServicePromiseForDoc(\n      this.ampdoc_,\n      CONSENT_STATE_MANAGER\n    );\n    return consentStatePromise.then((consentStateManager) => {\n      return consentStateManager\n        .getLastConsentInstanceInfo()\n        .then((consentInfo) => {\n          const returnValue = dict({\n            'clientConfig': this.clientConfig_,\n            // consentState to be deprecated\n            'consentState': getConsentStateValue(consentInfo['consentState']),\n            'consentStateValue': getConsentStateValue(\n              consentInfo['consentState']\n            ),\n            'consentMetadata': consentInfo['consentMetadata'],\n            'consentString': consentInfo['consentString'],\n            'promptTrigger': this.isActionPromptTrigger_ ? 'action' : 'load',\n            'isDirty': !!consentInfo['isDirty'],\n          });\n          if (this.isGranularConsentExperimentOn_) {\n            returnValue['purposeConsents'] = consentInfo['purposeConsents'];\n          }\n          return returnValue;\n        });\n    });\n  }\n\n  /**\n   * Apply placeholder\n   * Set up event listener to handle UI related messages.\n   * @return {!Promise}\n   */\n  loadIframe_() {\n    this.iframeReady_ = new Deferred();\n    const {classList} = this.parent_;\n    if (!elementByTag(this.parent_, 'placeholder')) {\n      insertAtStart(this.parent_, dev().assertElement(this.placeholder_));\n    }\n    classList.add(consentUiClasses.loading);\n    toggle(dev().assertElement(this.ui_), false);\n\n    const iframePromise = this.promptUISrcPromise_.then((expandedSrc) => {\n      this.removeIframe_ = false;\n      this.ui_.src = expandedSrc;\n      return this.getClientInfoPromise_().then((clientInfo) => {\n        this.ui_.setAttribute('name', JSON.stringify(clientInfo));\n        this.win_.addEventListener('message', this.boundHandleIframeMessages_);\n        insertAtStart(this.parent_, dev().assertElement(this.ui_));\n      });\n    });\n\n    return Promise.all([\n      iframePromise,\n      this.iframeReady_.promise,\n      this.baseInstance_.mutateElement(() => {\n        toggle(dev().assertElement(this.placeholder_), true);\n      }),\n    ]);\n  }\n\n  /**\n   * Hide the placeholder\n   * Apply animation to show the iframe\n   */\n  showIframe_() {\n    const {classList} = this.parent_;\n    classList.add(consentUiClasses.iframeActive);\n    toggle(dev().assertElement(this.placeholder_), false);\n    toggle(dev().assertElement(this.ui_), true);\n    if (this.modalEnabled_) {\n      classList.add(consentUiClasses.modal);\n      tryFocus(dev().assertElement(this.ui_));\n    }\n\n    // Remove transition styles added by the fixed layer\n    // Transform styles applied by us for the animation.\n    this.resetAnimationStyles_();\n\n    /**\n     * Waiting for mutation twice here.\n     * First mutation is for when the correct elements,\n     * are shown/hidden, and the iframe active class\n     * pushes it out of view.\n     * Second, is for the loading class to be removed.\n     * This will avoid race conditions with the slidein transition.\n     */\n    this.baseInstance_.mutateElement(() => {\n      classList.remove(consentUiClasses.loading);\n      this.baseInstance_.mutateElement(() => {\n        classList.add(consentUiClasses.in);\n        this.isIframeVisible_ = true;\n        this.applyInitialStyles_();\n      });\n    });\n  }\n\n  /**\n   * Remove the iframe from doc\n   * Remove event listener\n   * Reset UI state\n   * Takes in a function to call after our transition has ended\n   */\n  resetIframe_() {\n    const {classList} = this.parent_;\n    // It is ok to remove classes even when they're not present\n    classList.remove(consentUiClasses.iframeActive);\n    classList.remove(consentUiClasses.modal);\n    classList.remove(consentUiClasses.borderEnabled);\n\n    this.win_.removeEventListener('message', this.boundHandleIframeMessages_);\n    classList.remove(consentUiClasses.iframeFullscreen);\n    // TODO(micajuineho) consolidate code to user viewport\n    if (this.isFullscreen_) {\n      this.sendViewerEvent_(CANCEL_OVERLAY);\n    } else if (this.modalEnabled_) {\n      this.viewport_.leaveLightboxMode();\n    }\n    this.isFullscreen_ = false;\n    classList.remove(consentUiClasses.in);\n    this.isIframeVisible_ = false;\n    this.ui_.removeAttribute('name');\n    toggle(dev().assertElement(this.placeholder_), false);\n    this.removeIframe_ = true;\n    this.win_.setTimeout(() => {\n      if (this.removeIframe_) {\n        removeElement(dev().assertElement(this.ui_));\n      }\n    }, IFRAME_RUNNING_TIMEOUT);\n  }\n\n  /**\n   * If this is the first time viewing the iframe, create\n   * an 'invisible' alert dialog with a title and a button.\n   * Clicking on the button will transfer focus to the iframe.\n   *\n   * This only applies for bottom pane iframes.\n   */\n  maybeShowSrAlert_() {\n    // If the SR alert has been shown, don't show it again\n    if (this.srAlertShown_ || this.modalEnabled_) {\n      return;\n    }\n\n    const alertDialog = this.document_.createElement('div');\n    const button = this.document_.createElement('button');\n    const titleDiv = this.document_.createElement('div');\n\n    alertDialog.setAttribute('role', 'alertdialog');\n\n    titleDiv.textContent = this.consentPromptCaption_;\n    button.textContent = this.buttonActionCaption_;\n    button.onclick = () => {\n      tryFocus(dev().assertElement(this.ui_));\n    };\n\n    alertDialog.appendChild(titleDiv);\n    alertDialog.appendChild(button);\n\n    // Style to be visiblly hidden, but not hidden from the SR\n    const {classList} = alertDialog;\n    classList.add(consentUiClasses.screenReaderDialog);\n\n    this.baseInstance_.element.appendChild(alertDialog);\n    tryFocus(button);\n\n    // SR alert was shown when consent prompt loaded for\n    // the first time. Don't show it again\n    this.srAlertShown_ = true;\n\n    // Keep reference of the SR alert to remove later\n    this.srAlert_ = alertDialog;\n  }\n\n  /**\n   * Remove the SR alert from the DOM once it has been shown once\n   */\n  maybeRemoveSrAlert_() {\n    if (this.srAlert_) {\n      removeElement(this.srAlert_);\n      delete this.srAlert_;\n    }\n  }\n\n  /**\n   * Reset transition and transform styles\n   * Set by the fixed layer, and us\n   */\n  resetAnimationStyles_() {\n    setStyles(this.parent_, {\n      transform: '',\n      transition: '',\n    });\n  }\n\n  /**\n   * Apply styles for ready event\n   */\n  applyInitialStyles_() {\n    const {classList} = this.parent_;\n    // Apply our initial height and border\n    if (this.ui_) {\n      setStyles(this.ui_, {\n        height: this.initialHeight_,\n      });\n    }\n    setImportantStyles(this.parent_, {\n      '--i-amphtml-modal-height': `${this.initialHeight_}`,\n    });\n    classList.add(consentUiClasses.iframeTransform);\n    // Border is default with modal enabled and option with non-modal\n    if (this.borderEnabled_ || this.modalEnabled_) {\n      classList.add(consentUiClasses.borderEnabled);\n    }\n    if (this.modalEnabled_) {\n      this.viewport_.enterLightboxMode();\n    }\n  }\n\n  /**\n   * Shows the overlay (mask element, and lock scrolling)\n   * if the overlay is enabled\n   * @private\n   */\n  maybeShowOverlay_() {\n    if (!this.overlayEnabled_) {\n      return;\n    }\n\n    if (!this.maskElement_) {\n      const mask = this.win_.document.createElement('div');\n      mask.classList.add(consentUiClasses.mask);\n      this.parent_.ownerDocument.body.appendChild(mask);\n      this.maskElement_ = mask;\n    }\n    toggle(this.maskElement_, /* display */ true);\n    this.disableScroll_();\n  }\n\n  /**\n   * Hides the overlay (mask element, and lock scrolling)\n   * if the overlay is enabled\n   * @private\n   */\n  maybeHideOverlay_() {\n    if (!this.overlayEnabled_) {\n      return;\n    }\n\n    if (this.maskElement_) {\n      toggle(this.maskElement_, /* display */ false);\n    }\n    this.enableScroll_();\n  }\n\n  /**\n   * Disables scrolling on the document\n   * @private\n   */\n  disableScroll_() {\n    if (this.scrollEnabled_) {\n      this.viewport_.enterOverlayMode();\n      this.scrollEnabled_ = false;\n    }\n  }\n\n  /**\n   * Disables scrolling on the document\n   * @private\n   */\n  enableScroll_() {\n    if (!this.scrollEnabled_) {\n      this.viewport_.leaveOverlayMode();\n      this.scrollEnabled_ = true;\n    }\n  }\n\n  /**\n   * Listen to iframe messages and handle events.\n   * Current supported APIs:\n   *\n   * Required message from iframe to hide placeholder and display iframe\n   * {\n   *   type: 'consent-ui',\n   *   action: 'ready',\n   *   initialHeight: '30vh',\n   *   border: true\n   * }\n   *\n   * Enter Fullscreen\n   * {\n   *   type: 'consent-ui',\n   *   action: 'enter-fullscreen'\n   * }\n   *\n   * @param {!Event} event\n   */\n  handleIframeMessages_(event) {\n    if (this.ui_.contentWindow !== event.source) {\n      // Ignore messages from else where\n      return;\n    }\n\n    const data = getData(event);\n    if (!data || data['type'] != 'consent-ui') {\n      return;\n    }\n\n    const requestAction = data['action'];\n    const requestType = data['type'];\n\n    if (requestAction === 'ready') {\n      this.handleReady_(/** @type {!JsonObject} */ (data));\n    }\n\n    if (requestAction === 'enter-fullscreen') {\n      // Do nothing iff:\n      // - iframe not visible or\n      // - iframe not active element && not called via actionPromptTrigger\n      // - iframe is not modalEnabled\n      if (\n        !this.isIframeVisible_ ||\n        this.modalEnabled_ ||\n        (this.document_.activeElement !== this.ui_ &&\n          !this.isActionPromptTrigger_)\n      ) {\n        user().warn(TAG, FULLSCREEN_ERROR);\n        this.sendEnterFullscreenResponse_(requestType, requestAction, true);\n        return;\n      }\n      this.sendEnterFullscreenResponse_(requestType, requestAction);\n\n      this.baseInstance_.mutateElement(() => {\n        this.enterFullscreen_();\n      });\n    }\n  }\n\n  /**\n   * @param {string} requestType\n   * @param {string} requestAction\n   * @param {boolean} isError\n   * */\n  sendEnterFullscreenResponse_(requestType, requestAction, isError = false) {\n    this.sendIframeMessage_(\n      ampConsentMessageType.response,\n      requestType,\n      requestAction,\n      isError ? actionState.error : actionState.success,\n      isError ? FULLSCREEN_ERROR : FULLSCREEN_SUCCESS\n    );\n  }\n\n  /**\n   * Send message to iframe, regarding action response or other info.\n   * Silently die if iframe does not have content window.\n   *\n   * Example message:\n   * {\n   *  type: 'amp-consent-response'\n   *  requestType:'consent-ui'\n   *  requestAction: 'enter-fullscreen'\n   *  state: 'error/success'\n   *  info: 'msg'\n   * }\n   * @param {string} type\n   * @param {string} requestType\n   * @param {string} requestAction\n   * @param {string} state\n   * @param {string} info\n   */\n  sendIframeMessage_(type, requestType, requestAction, state, info) {\n    const iframeWindow = this.ui_.contentWindow;\n    if (iframeWindow) {\n      // No sensitive information sent, so safe to use '*'\n      iframeWindow./*OK*/ postMessage(\n        /** @type {!JsonObject} */ ({\n          type,\n          requestType,\n          requestAction,\n          state,\n          info,\n        }),\n        '*'\n      );\n    }\n  }\n}\n", "/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An interface to interact with browser window object.\n * Mainly used to mock out read only APIs in test.\n * See test-helper.js#mockWindowInterface\n */\nexport class WindowInterface {\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {!Window}\n   */\n  static getTop(win) {\n    return win.top;\n  }\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {!Location}\n   */\n  static getLocation(win) {\n    return win.location;\n  }\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {string}\n   */\n  static getDocumentReferrer(win) {\n    return win.document.referrer;\n  }\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {string}\n   */\n  static getHostname(win) {\n    return win.location.hostname;\n  }\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {string}\n   */\n  static getUserAgent(win) {\n    return win.navigator.userAgent;\n  }\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {string}\n   */\n  static getUserLanguage(win) {\n    // The `navigator.userLanguage` is only supported by IE. The standard is\n    // the `navigator.language`.\n    return win.navigator['userLanguage'] || win.navigator.language;\n  }\n\n  /**\n   * @static\n   * @return {number}\n   */\n  static getDevicePixelRatio() {\n    // No matter the window, the device-pixel-ratio is always one.\n    return self.devicePixelRatio || 1;\n  }\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {function(string,(ArrayBufferView|Blob|FormData|null|string)=):boolean|undefined}\n   */\n  static getSendBeacon(win) {\n    if (!win.navigator.sendBeacon) {\n      return undefined;\n    }\n    return win.navigator.sendBeacon.bind(win.navigator);\n  }\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {typeof XMLHttpRequest}\n   */\n  static getXMLHttpRequest(win) {\n    return win.XMLHttpRequest;\n  }\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {typeof Image}\n   */\n  static getImage(win) {\n    return win.Image;\n  }\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {endsWith} from './core/types/string';\nimport {getSourceOrigin, isProxyOrigin, parseUrlDeprecated} from './url';\nimport {tryDecodeUriComponent} from './core/types/string/url';\nimport {urls} from './config';\nimport {userAssert} from './log';\n\nconst TEST_COOKIE_NAME = '-test-amp-cookie-tmp';\n\n/** @enum {string} */\nexport const SameSite = {\n  LAX: 'Lax',\n  STRICT: 'Strict',\n  NONE: 'None',\n};\n\n/**\n * Returns the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * Returns the cookie's value or `null`.\n *\n * @param {!Window} win\n * @param {string} name\n * @return {?string}\n */\nexport function getCookie(win, name) {\n  const cookieString = tryGetDocumentCookie_(win);\n  if (!cookieString) {\n    return null;\n  }\n  const cookies = cookieString.split(';');\n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i].trim();\n    const eq = cookie.indexOf('=');\n    if (eq == -1) {\n      continue;\n    }\n    if (tryDecodeUriComponent(cookie.substring(0, eq).trim()) == name) {\n      const value = cookie.substring(eq + 1).trim();\n      return tryDecodeUriComponent(value, value);\n    }\n  }\n  return null;\n}\n\n/**\n * This method should not be inlined to prevent TryCatch deoptimization.\n * @param {!Window} win\n * @return {string}\n */\nfunction tryGetDocumentCookie_(win) {\n  try {\n    return win.document.cookie;\n  } catch (e) {\n    // Act as if no cookie is available. Exceptions can be thrown when\n    // AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n    return '';\n  }\n}\n\n/**\n * Sets the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {{\n *   highestAvailableDomain:(boolean|undefined),\n *   domain:(string|undefined),\n *   sameSite: (!SameSite|undefined),\n *   secure: (boolean|undefined),\n * }=} options\n *     - highestAvailableDomain: If true, set the cookie at the widest domain\n *       scope allowed by the browser. E.g. on example.com if we are currently\n *       on www.example.com.\n *     - domain: Explicit domain to set. domain overrides HigestAvailableDomain\n *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.\n *     - sameSite: The SameSite value to use when setting the cookie.\n *     - secure: Whether the cookie should contain Secure (only sent over https).\n */\nexport function setCookie(win, name, value, expirationTime, options = {}) {\n  checkOriginForSettingCookie(win, options, name);\n  let domain = undefined;\n  // Respect explicitly set domain over higestAvailabeDomain\n  if (options.domain) {\n    domain = options.domain;\n  } else if (options.highestAvailableDomain) {\n    domain = /** @type {string} */ (getHighestAvailableDomain(win));\n  }\n  trySetCookie(\n    win,\n    name,\n    value,\n    expirationTime,\n    domain,\n    options.sameSite,\n    options.secure\n  );\n}\n\n/**\n * Attemp to find the HighestAvailableDomain on\n * @param {!Window} win\n * @return {?string}\n */\nexport function getHighestAvailableDomain(win) {\n  // <meta name='amp-cookie-scope'>. Need to respect the meta first.\n\n  // Note: The same logic applies to shadow docs. Where all shadow docs are\n  // considered to be in the same origin. And only the <meta> from\n  // shell will be respected. (Header from shadow doc will be removed)\n  const metaTag =\n    win.document.head &&\n    win.document.head.querySelector(\"meta[name='amp-cookie-scope']\");\n\n  if (metaTag) {\n    // The content value could be an empty string. Return null instead\n    const cookieScope = metaTag.getAttribute('content') || '';\n    // Verify the validness of the amp-cookie-scope meta value\n    const sourceOrigin = getSourceOrigin(win.location.href);\n    // Verify the meta tag content value is valid\n    if (endsWith(sourceOrigin, '.' + cookieScope)) {\n      return cookieScope;\n    } else {\n      // When the amp-cookie-scope value is invalid, fallback to the exact origin\n      // the document is contained in.\n      // sourceOrigin in the format of 'https://xxx or http://xxx'\n      return sourceOrigin.split('://')[1];\n    }\n  }\n\n  if (!isProxyOrigin(win.location.href)) {\n    const parts = win.location.hostname.split('.');\n    let domain = parts[parts.length - 1];\n    const testCookieName = getTempCookieName(win);\n    for (let i = parts.length - 2; i >= 0; i--) {\n      domain = parts[i] + '.' + domain;\n      // Try set a cookie for testing only, expire after 1 sec\n      trySetCookie(win, testCookieName, 'delete', Date.now() + 1000, domain);\n      if (getCookie(win, testCookieName) == 'delete') {\n        // Remove the cookie for testing\n        trySetCookie(win, testCookieName, 'delete', Date.now() - 1000, domain);\n        return domain;\n      }\n    }\n  }\n\n  // Proxy origin w/o <meta name='amp-cookie-scope>\n  // We cannot calculate the etld+1 without the public suffix list.\n  // Return null instead.\n  // Note: This should not affect cookie writing because we don't allow writing\n  // cookie to highestAvailableDomain on proxy origin\n  // In the case of link decoration on proxy origin,\n  // we expect the correct meta tag to be\n  // set by publisher or cache order for AMP runtime to find all subdomains.\n  return null;\n}\n\n/**\n * Attempt to set a cookie with the given params.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {string|undefined} domain\n * @param {!SameSite=} sameSite\n * @param {boolean|undefined=} secure\n */\nfunction trySetCookie(\n  win,\n  name,\n  value,\n  expirationTime,\n  domain,\n  sameSite,\n  secure\n) {\n  // We do not allow setting cookies on the domain that contains both\n  // the cdn. and www. hosts.\n  // Note: we need to allow cdn.ampproject.org in order to optin to experiments\n  if (domain == 'ampproject.org') {\n    // Actively delete them.\n    value = 'delete';\n    expirationTime = 0;\n  }\n  const cookie =\n    encodeURIComponent(name) +\n    '=' +\n    encodeURIComponent(value) +\n    '; path=/' +\n    (domain ? '; domain=' + domain : '') +\n    '; expires=' +\n    new Date(expirationTime).toUTCString() +\n    getSameSiteString(win, sameSite) +\n    (secure ? '; Secure' : '');\n  try {\n    win.document.cookie = cookie;\n  } catch (ignore) {\n    // Do not throw if setting the cookie failed Exceptions can be thrown\n    // when AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n  }\n}\n\n/**\n * Gets the cookie string to use for SameSite. This only sets the SameSite\n * value if specified, falling back to the browser default. The default value\n * is equivalent to SameSite.NONE, but is planned to be set to SameSite.LAX in\n * Chrome 80.\n *\n * Note: In Safari 12, if the value is set to SameSite.NONE, it is treated by\n * the browser as SameSite.STRICT.\n * @param {Window} win\n * @param {!SameSite|undefined} sameSite\n * @return {string} The string to use when setting the cookie.\n */\nfunction getSameSiteString(win, sameSite) {\n  if (!sameSite) {\n    return '';\n  }\n\n  return `; SameSite=${sameSite}`;\n}\n\n/**\n * Throws if a given cookie should not be set on the given origin.\n * This is a defense-in-depth. Callers should never run into this.\n *\n * @param {!Window} win\n * @param {!Object} options\n * @param {string} name For the error message.\n */\nfunction checkOriginForSettingCookie(win, options, name) {\n  if (options.allowOnProxyOrigin) {\n    userAssert(\n      !options.highestAvailableDomain,\n      'Could not support highestAvailable Domain on proxy origin, ' +\n        'specify domain explicitly'\n    );\n    return;\n  }\n  userAssert(\n    !isProxyOrigin(win.location.href),\n    `Should never attempt to set cookie on proxy origin: ${name}`\n  );\n  const current = parseUrlDeprecated(win.location.href).hostname.toLowerCase();\n  const proxy = parseUrlDeprecated(urls.cdn).hostname.toLowerCase();\n  userAssert(\n    !(current == proxy || endsWith(current, '.' + proxy)),\n    'Should never attempt to set cookie on proxy origin. (in depth check): ' +\n      name\n  );\n}\n\n/**\n * Return a temporary cookie name for testing only\n * @param {!Window} win\n * @return {string}\n */\nfunction getTempCookieName(win) {\n  let testCookieName = TEST_COOKIE_NAME;\n  const counter = 0;\n  while (getCookie(win, testCookieName)) {\n    // test cookie name conflict, append counter to test cookie name\n    testCookieName = TEST_COOKIE_NAME + counter;\n  }\n  return testCookieName;\n}\n", "/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../services';\nimport {WindowInterface} from '../core/window/interface';\nimport {dev} from '../log';\nimport {dict} from '../core/types/object';\nimport {getCookie, setCookie} from '../cookies';\nimport {isProxyOrigin, parseUrlDeprecated} from '../url';\n\nconst GOOGLE_API_URL =\n  'https://ampcid.google.com/v1/publisher:getClientId?key=';\n\nconst TAG = 'GoogleCidApi';\nconst AMP_TOKEN = 'AMP_TOKEN';\n\n/** @enum {string} */\nexport const TokenStatus = {\n  RETRIEVING: '$RETRIEVING',\n  OPT_OUT: '$OPT_OUT',\n  NOT_FOUND: '$NOT_FOUND',\n  ERROR: '$ERROR',\n};\n\nconst TIMEOUT = 30000;\nconst HOUR = 60 * 60 * 1000;\nconst DAY = 24 * HOUR;\nconst YEAR = 365 * DAY;\n\n/**\n * Client impl for Google CID API\n */\nexport class GoogleCidApi {\n  /** @param {!./ampdoc-impl.AmpDoc} ampdoc */\n  constructor(ampdoc) {\n    /**\n     * @private {!Window}\n     */\n    this.win_ = ampdoc.win;\n    /**\n     * @private {!./timer-impl.Timer}\n     */\n    this.timer_ = Services.timerFor(this.win_);\n\n    /**\n     * @private {!Object<string, !Promise<?string>>}\n     */\n    this.cidPromise_ = {};\n\n    const {canonicalUrl} = Services.documentInfoForDoc(ampdoc);\n\n    /** @private {?string} */\n    this.canonicalOrigin_ = canonicalUrl\n      ? parseUrlDeprecated(canonicalUrl).origin\n      : null;\n  }\n\n  /**\n   * @param {string} apiKey\n   * @param {string} scope\n   * @return {!Promise<?string>}\n   */\n  getScopedCid(apiKey, scope) {\n    if (this.cidPromise_[scope]) {\n      return this.cidPromise_[scope];\n    }\n    let token;\n    // Block the request if a previous request is on flight\n    // Poll every 200ms. Longer interval means longer latency for the 2nd CID.\n    return (this.cidPromise_[scope] = this.timer_\n      .poll(200, () => {\n        token = getCookie(this.win_, AMP_TOKEN);\n        return token !== TokenStatus.RETRIEVING;\n      })\n      .then(() => {\n        if (token === TokenStatus.OPT_OUT) {\n          return TokenStatus.OPT_OUT;\n        }\n        // If the page referrer is proxy origin, we force to use API even the\n        // token indicates a previous fetch returned nothing\n        const forceFetch =\n          token === TokenStatus.NOT_FOUND && this.isReferrerProxyOrigin_();\n\n        // Token is in a special state, fallback to existing cookie\n        if (!forceFetch && this.isStatusToken_(token)) {\n          return null;\n        }\n\n        if (!token || this.isStatusToken_(token)) {\n          this.persistToken_(TokenStatus.RETRIEVING, TIMEOUT);\n        }\n\n        const url = GOOGLE_API_URL + apiKey;\n        return this.fetchCid_(dev().assertString(url), scope, token)\n          .then((response) => {\n            const cid = this.handleResponse_(response);\n            if (!cid && response['alternateUrl']) {\n              // If an alternate url is provided, try again with the alternate\n              // url The client is still responsible for appending API keys to\n              // the URL.\n              const altUrl = `${response['alternateUrl']}?key=${apiKey}`;\n              return this.fetchCid_(\n                dev().assertString(altUrl),\n                scope,\n                token\n              ).then(this.handleResponse_.bind(this));\n            }\n            return cid;\n          })\n          .catch((e) => {\n            this.persistToken_(TokenStatus.ERROR, TIMEOUT);\n            if (e && e.response) {\n              e.response.json().then((res) => {\n                dev().error(TAG, JSON.stringify(res));\n              });\n            } else {\n              dev().error(TAG, e);\n            }\n            return null;\n          });\n      }));\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} scope\n   * @param {?string} token\n   * @return {!Promise<!JsonObject>}\n   */\n  fetchCid_(url, scope, token) {\n    const payload = dict({\n      'originScope': scope,\n      'canonicalOrigin': this.canonicalOrigin_,\n    });\n    if (token) {\n      payload['securityToken'] = token;\n    }\n    return this.timer_.timeoutPromise(\n      TIMEOUT,\n      Services.xhrFor(this.win_)\n        .fetchJson(url, {\n          method: 'POST',\n          ampCors: false,\n          credentials: 'include',\n          mode: 'cors',\n          body: payload,\n        })\n        .then((res) => res.json())\n    );\n  }\n\n  /**\n   * @param {!JsonObject} res\n   * @return {?string}\n   */\n  handleResponse_(res) {\n    if (res['optOut']) {\n      this.persistToken_(TokenStatus.OPT_OUT, YEAR);\n      return TokenStatus.OPT_OUT;\n    }\n    if (res['clientId']) {\n      this.persistToken_(res['securityToken'], YEAR);\n      return res['clientId'];\n    }\n    if (res['alternateUrl']) {\n      return null;\n    }\n    this.persistToken_(TokenStatus.NOT_FOUND, HOUR);\n    return null;\n  }\n\n  /**\n   * @param {string|undefined} tokenValue\n   * @param {number} expires\n   */\n  persistToken_(tokenValue, expires) {\n    if (tokenValue) {\n      setCookie(this.win_, AMP_TOKEN, tokenValue, this.expiresIn_(expires), {\n        highestAvailableDomain: true,\n      });\n    }\n  }\n\n  /**\n   * @param {number} time\n   * @return {number}\n   */\n  expiresIn_(time) {\n    return this.win_.Date.now() + time;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isReferrerProxyOrigin_() {\n    return isProxyOrigin(WindowInterface.getDocumentReferrer(this.win_));\n  }\n\n  /**\n   * @param {?string} token\n   * @return {boolean}\n   */\n  isStatusToken_(token) {\n    return /** @type {boolean} */ (token && token[0] === '$');\n  }\n}\n", "/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {devAssert} from '../../assert';\n\n/**\n * Interpret a byte array as a UTF-8 string.\n * @param {!BufferSource} bytes\n * @return {string}\n */\nexport function utf8Decode(bytes) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder('utf-8').decode(bytes);\n  }\n  const asciiString = bytesToString(new Uint8Array(bytes.buffer || bytes));\n  return decodeURIComponent(escape(asciiString));\n}\n\n/**\n * Turn a string into UTF-8 bytes.\n * @param {string} string\n * @return {!Uint8Array}\n */\nexport function utf8Encode(string) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder('utf-8').encode(string);\n  }\n  return stringToBytes(unescape(encodeURIComponent(string)));\n}\n\n/**\n * Converts a string which holds 8-bit code points, such as the result of atob,\n * into a Uint8Array with the corresponding bytes.\n * If you have a string of characters, you probably want to be using utf8Encode.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function stringToBytes(str) {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    devAssert(charCode <= 255, 'Characters must be in range [0,255]');\n    bytes[i] = charCode;\n  }\n  return bytes;\n}\n\n/**\n * Converts a 8-bit bytes array into a string\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function bytesToString(bytes) {\n  // Intentionally avoids String.fromCharCode.apply so we don't suffer a\n  // stack overflow. #10495, https://jsperf.com/bytesToString-2\n  const array = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = String.fromCharCode(bytes[i]);\n  }\n  return array.join('');\n}\n\n/**\n * Converts a 4-item byte array to an unsigned integer.\n * Assumes bytes are big endian.\n * @param {!Uint8Array} bytes\n * @return {number}\n */\nexport function bytesToUInt32(bytes) {\n  if (bytes.length != 4) {\n    throw new Error('Received byte array with length != 4');\n  }\n  const val =\n    ((bytes[0] & 0xff) << 24) |\n    ((bytes[1] & 0xff) << 16) |\n    ((bytes[2] & 0xff) << 8) |\n    (bytes[3] & 0xff);\n  // Convert to unsigned.\n  return val >>> 0;\n}\n\n/**\n * Generate a random bytes array with specific length using\n * win.crypto.getRandomValues. Return null if it is not available.\n * @param {!Window} win\n * @param {number} length\n * @return {?Uint8Array}\n */\nexport function getCryptoRandomBytesArray(win, length) {\n  let {crypto} = win;\n\n  // Support IE 11\n  if (!IS_ESM) {\n    crypto = /** @type {!webCrypto.Crypto|undefined} */ (\n      crypto || win.msCrypto\n    );\n    if (!crypto || !crypto.getRandomValues) {\n      return null;\n    }\n  }\n\n  // Widely available in browsers we support:\n  // http://caniuse.com/#search=getRandomValues\n  const uint8array = new Uint8Array(length);\n  crypto.getRandomValues(uint8array);\n  return uint8array;\n}\n", "/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {bytesToString, stringToBytes, utf8Decode, utf8Encode} from './bytes';\n\n/**\n * Character mapping from base64url to base64.\n * @const {!Object<string, string>}\n */\nconst base64UrlDecodeSubs = {'-': '+', '_': '/', '.': '='};\n\n/**\n * Character mapping from base64 to base64url.\n * @const {!Object<string, string>}\n */\nconst base64UrlEncodeSubs = {'+': '-', '/': '_', '=': '.'};\n\n/**\n * Converts a string which is in base64url encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64UrlDecodeToBytes(str) {\n  const encoded = atob(str.replace(/[-_.]/g, (ch) => base64UrlDecodeSubs[ch]));\n  return stringToBytes(encoded);\n}\n\n/**\n * Converts a string which is in base64 encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64DecodeToBytes(str) {\n  return stringToBytes(atob(str));\n}\n\n/**\n * Converts a bytes array into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64UrlEncodeFromBytes(bytes) {\n  const str = bytesToString(bytes);\n  return btoa(str).replace(/[+/=]/g, (ch) => base64UrlEncodeSubs[ch]);\n}\n\n/**\n * Converts a string into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {string} str\n * @return {string}\n */\nexport function base64UrlEncodeFromString(str) {\n  const bytes = utf8Encode(str);\n  return base64UrlEncodeFromBytes(bytes);\n}\n\n/**\n * Decode a base64url encoded string by `base64UrlEncodeFromString`\n * @param {string} str\n * @return {string}\n */\nexport function base64UrlDecodeFromString(str) {\n  const bytes = base64UrlDecodeToBytes(str);\n  return utf8Decode(bytes);\n}\n\n/**\n * Converts a bytes array into base64 encoded string.\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64EncodeFromBytes(bytes) {\n  return btoa(bytesToString(bytes));\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides per AMP document source origin and use case\n * persistent client identifiers for use in analytics and similar use\n * cases.\n *\n * For details, see https://goo.gl/Mwaacs\n */\n\nimport {CacheCidApi} from './cache-cid-api';\nimport {GoogleCidApi, TokenStatus} from './cid-api';\nimport {Services} from '../services';\nimport {ViewerCidApi} from './viewer-cid-api';\nimport {base64UrlEncodeFromBytes} from '../core/types/string/base64';\nimport {dev, user, userAssert} from '../log';\nimport {dict} from '../core/types/object';\nimport {getCookie, setCookie} from '../cookies';\nimport {getCryptoRandomBytesArray} from '../core/types/string/bytes';\nimport {getServiceForDoc, registerServiceBuilderForDoc} from '../service';\nimport {getSourceOrigin, isProxyOrigin, parseUrlDeprecated} from '../url';\nimport {isExperimentOn} from '../../src/experiments';\nimport {isIframed} from '../dom';\nimport {parseJson, tryParseJson} from '../core/types/object/json';\nimport {rethrowAsync} from '../core/error';\nimport {tryResolve} from '../core/data-structures/promise';\n\nconst ONE_DAY_MILLIS = 24 * 3600 * 1000;\n\n/**\n * We ignore base cids that are older than (roughly) one year.\n */\nexport const BASE_CID_MAX_AGE_MILLIS = 365 * ONE_DAY_MILLIS;\n\nconst SCOPE_NAME_VALIDATOR = /^[a-zA-Z0-9-_.]+$/;\n\nconst CID_OPTOUT_STORAGE_KEY = 'amp-cid-optout';\n\nconst CID_OPTOUT_VIEWER_MESSAGE = 'cidOptOut';\n\nconst CID_BACKUP_STORAGE_KEY = 'amp-cid:';\n\n/**\n * Tag for debug logging.\n * @const @private {string}\n */\nconst TAG_ = 'CID';\n\n/**\n * The name of the Google CID API as it appears in the meta tag to opt-in.\n * @const @private {string}\n */\nconst GOOGLE_CID_API_META_NAME = 'amp-google-client-id-api';\n\n/**\n * The mapping from analytics providers to CID scopes.\n * @const @private {Object<string, string>}\n */\nconst CID_API_SCOPE_ALLOWLIST = {\n  'googleanalytics': 'AMP_ECID_GOOGLE',\n};\n\n/**\n * The mapping from analytics providers to their CID API service keys.\n * @const @private {Object<string, string>}\n */\nconst API_KEYS = {\n  'googleanalytics': 'AIzaSyA65lEHUEizIsNtlbNo-l2K18dT680nsaM',\n};\n\n/**\n * A base cid string value and the time it was last read / stored.\n * @typedef {{time: time, cid: string}}\n */\nlet BaseCidInfoDef;\n\n/**\n * The \"get CID\" parameters.\n * - createCookieIfNotPresent: Whether CID is allowed to create a cookie when.\n *   Default value is `false`.\n * - cookieName: Name of the cookie to be used if defined for non-proxy case.\n * - disableBackup: Whether CID should not be backed up in Storage.\n *   Default value is `false`.\n * @typedef {{\n *   scope: string,\n *   createCookieIfNotPresent: (boolean|undefined),\n *   cookieName: (string|undefined),\n *   disableBackup: (boolean|undefined),\n * }}\n */\nlet GetCidDef;\n\n/**\n * @interface\n */\nexport class CidDef {\n  /**\n   * @param {!GetCidDef} unusedGetCidStruct an object provides CID scope name for\n   *     proxy case and cookie name for non-proxy case.\n   * @param {!Promise} unusedConsent Promise for when the user has given consent\n   *     (if deemed necessary by the publisher) for use of the client\n   *     identifier.\n   * @param {!Promise=} opt_persistenceConsent Dedicated promise for when\n   *     it is OK to persist a new tracking identifier. This could be\n   *     supplied ONLY by the code that supplies the actual consent\n   *     cookie.\n   *     If this is given, the consent param should be a resolved promise\n   *     because this call should be only made in order to get consent.\n   *     The consent promise passed to other calls should then itself\n   *     depend on the opt_persistenceConsent promise (and the actual\n   *     consent, of course).\n   * @return {!Promise<?string>} A client identifier that should be used\n   *      within the current source origin and externalCidScope. Might be\n   *      null if user has opted out of cid or no identifier was found\n   *      or it could be made.\n   *      This promise may take a long time to resolve if consent isn't\n   *      given.\n   */\n  get(unusedGetCidStruct, unusedConsent, opt_persistenceConsent) {}\n\n  /**\n   * User will be opted out of Cid issuance for all scopes.\n   * When opted-out Cid service will reject all `get` requests.\n   *\n   * @return {!Promise}\n   */\n  optOut() {}\n}\n\n/**\n * @implements {CidDef}\n */\nclass Cid {\n  /** @param {!./ampdoc-impl.AmpDoc} ampdoc */\n  constructor(ampdoc) {\n    /** @const */\n    this.ampdoc = ampdoc;\n\n    /**\n     * Cached base cid once read from storage to avoid repeated\n     * reads.\n     * @private {?Promise<string>}\n     * @restricted\n     */\n    this.baseCid_ = null;\n\n    /**\n     * Cache to store external cids. Scope is used as the key and cookie value\n     * is the value.\n     * @private {!Object<string, !Promise<string>>}\n     * @restricted\n     */\n    this.externalCidCache_ = Object.create(null);\n\n    /**\n     * @private @const {!CacheCidApi}\n     */\n    this.cacheCidApi_ = new CacheCidApi(ampdoc);\n\n    /**\n     * @private {!ViewerCidApi}\n     */\n    this.viewerCidApi_ = new ViewerCidApi(ampdoc);\n\n    this.cidApi_ = new GoogleCidApi(ampdoc);\n\n    /** @private {?Object<string, string>} */\n    this.apiKeyMap_ = null;\n\n    /** @const {boolean} */\n    this.isBackupCidExpOn = isExperimentOn(this.ampdoc.win, 'amp-cid-backup');\n  }\n\n  /** @override */\n  get(getCidStruct, consent, opt_persistenceConsent) {\n    userAssert(\n      SCOPE_NAME_VALIDATOR.test(getCidStruct.scope) &&\n        SCOPE_NAME_VALIDATOR.test(getCidStruct.cookieName),\n      'The CID scope and cookie name must only use the characters ' +\n        '[a-zA-Z0-9-_.]+\\nInstead found: %s',\n      getCidStruct.scope\n    );\n    return consent\n      .then(() => {\n        return this.ampdoc.whenFirstVisible();\n      })\n      .then(() => {\n        // Check if user has globally opted out of CID, we do this after\n        // consent check since user can optout during consent process.\n        return isOptedOutOfCid(this.ampdoc);\n      })\n      .then((optedOut) => {\n        if (optedOut) {\n          return '';\n        }\n        const cidPromise = this.getExternalCid_(\n          getCidStruct,\n          opt_persistenceConsent || consent\n        );\n        // Getting the CID might involve an HTTP request. We timeout after 10s.\n        return Services.timerFor(this.ampdoc.win)\n          .timeoutPromise(\n            10000,\n            cidPromise,\n            `Getting cid for \"${getCidStruct.scope}\" timed out`\n          )\n          .catch((error) => {\n            rethrowAsync(error);\n          });\n      });\n  }\n\n  /** @override */\n  optOut() {\n    return optOutOfCid(this.ampdoc);\n  }\n\n  /**\n   * Returns the \"external cid\". This is a cid for a specific purpose\n   * (Say Analytics provider X). It is unique per user, userAssert, that purpose\n   * and the AMP origin site.\n   * @param {!GetCidDef} getCidStruct\n   * @param {!Promise} persistenceConsent\n   * @return {!Promise<?string>}\n   */\n  getExternalCid_(getCidStruct, persistenceConsent) {\n    const {scope} = getCidStruct;\n    /** @const {!Location} */\n    const url = parseUrlDeprecated(this.ampdoc.win.location.href);\n    if (!isProxyOrigin(url)) {\n      const apiKey = this.isScopeOptedIn_(scope);\n      if (apiKey) {\n        return this.cidApi_.getScopedCid(apiKey, scope).then((scopedCid) => {\n          if (scopedCid == TokenStatus.OPT_OUT) {\n            return null;\n          }\n          if (scopedCid) {\n            const cookieName = getCidStruct.cookieName || scope;\n            setCidCookie(this.ampdoc.win, cookieName, scopedCid);\n            return scopedCid;\n          }\n          return getOrCreateCookie(this, getCidStruct, persistenceConsent);\n        });\n      }\n      return getOrCreateCookie(this, getCidStruct, persistenceConsent);\n    }\n\n    return this.viewerCidApi_.isSupported().then((supported) => {\n      if (supported) {\n        const apiKey = this.isScopeOptedIn_(scope);\n        return this.viewerCidApi_.getScopedCid(apiKey, scope);\n      }\n\n      if (this.cacheCidApi_.isSupported() && this.isScopeOptedIn_(scope)) {\n        return this.cacheCidApi_.getScopedCid(scope).then((scopedCid) => {\n          if (scopedCid) {\n            return scopedCid;\n          }\n          return this.scopeBaseCid_(persistenceConsent, scope, url);\n        });\n      }\n      return this.scopeBaseCid_(persistenceConsent, scope, url);\n    });\n  }\n\n  /**\n   *\n   * @param {!Promise} persistenceConsent\n   * @param {*} scope\n   * @param {!Location} url\n   * @return {*}\n   */\n  scopeBaseCid_(persistenceConsent, scope, url) {\n    return getBaseCid(this, persistenceConsent).then((baseCid) => {\n      return Services.cryptoFor(this.ampdoc.win).sha384Base64(\n        baseCid + getProxySourceOrigin(url) + scope\n      );\n    });\n  }\n\n  /**\n   * Checks if the page has opted in CID API for the given scope.\n   * Returns the API key that should be used, or null if page hasn't opted in.\n   *\n   * @param {string} scope\n   * @return {string|undefined}\n   */\n  isScopeOptedIn_(scope) {\n    if (!this.apiKeyMap_) {\n      this.apiKeyMap_ = this.getOptedInScopes_();\n    }\n    return this.apiKeyMap_[scope];\n  }\n\n  /**\n   * Reads meta tags for opted in scopes.  Meta tags will have the form\n   * <meta name=\"provider-api-name\" content=\"provider-name\">\n   * @return {!Object<string, string>}\n   */\n  getOptedInScopes_() {\n    const apiKeyMap = {};\n    const optInMeta = this.ampdoc.getMetaByName(GOOGLE_CID_API_META_NAME);\n    if (optInMeta) {\n      optInMeta.split(',').forEach((item) => {\n        item = item.trim();\n        if (item.indexOf('=') > 0) {\n          const pair = item.split('=');\n          const scope = pair[0].trim();\n          apiKeyMap[scope] = pair[1].trim();\n        } else {\n          const clientName = item;\n          const scope = CID_API_SCOPE_ALLOWLIST[clientName];\n          if (scope) {\n            apiKeyMap[scope] = API_KEYS[clientName];\n          } else {\n            user().warn(\n              TAG_,\n              `Unsupported client for Google CID API: ${clientName}.` +\n                `Please remove or correct meta[name=\"${GOOGLE_CID_API_META_NAME}\"]`\n            );\n          }\n        }\n      });\n    }\n    return apiKeyMap;\n  }\n}\n\n/**\n * User will be opted out of Cid issuance for all scopes.\n * When opted-out Cid service will reject all `get` requests.\n *\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @return {!Promise}\n * @visibleForTesting\n */\nexport function optOutOfCid(ampdoc) {\n  // Tell the viewer that user has opted out.\n  Services.viewerForDoc(ampdoc)./*OK*/ sendMessage(\n    CID_OPTOUT_VIEWER_MESSAGE,\n    dict()\n  );\n\n  // Store the optout bit in storage\n  return Services.storageForDoc(ampdoc).then((storage) => {\n    return storage.set(CID_OPTOUT_STORAGE_KEY, true);\n  });\n}\n\n/**\n * Whether user has opted out of Cid issuance for all scopes.\n *\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @return {!Promise<boolean>}\n * @visibleForTesting\n */\nexport function isOptedOutOfCid(ampdoc) {\n  return Services.storageForDoc(ampdoc)\n    .then((storage) => {\n      return storage.get(CID_OPTOUT_STORAGE_KEY).then((val) => !!val);\n    })\n    .catch(() => {\n      // If we fail to read the flag, assume not opted out.\n      return false;\n    });\n}\n\n/**\n * Sets a new CID cookie for expire 1 year from now.\n * @param {!Window} win\n * @param {string} scope\n * @param {string} cookie\n */\nfunction setCidCookie(win, scope, cookie) {\n  const expiration = Date.now() + BASE_CID_MAX_AGE_MILLIS;\n  setCookie(win, scope, cookie, expiration, {\n    highestAvailableDomain: true,\n  });\n}\n\n/**\n * Sets a new CID backup in Storage\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @param {string} cookieName\n * @param {string} cookie\n */\nfunction setCidBackup(ampdoc, cookieName, cookie) {\n  Services.storageForDoc(ampdoc).then((storage) => {\n    const isViewerStorage = storage.isViewerStorage();\n    if (!isViewerStorage) {\n      const key = getStorageKey(cookieName);\n      storage.setNonBoolean(key, cookie);\n    }\n  });\n}\n\n/**\n * @param {string} cookieName\n * @return {string}\n */\nfunction getStorageKey(cookieName) {\n  return CID_BACKUP_STORAGE_KEY + cookieName;\n}\n\n/**\n * Maybe gets the CID from cookie or, if allowed, gets backup CID\n * from Storage.\n * @param {!Cid} cid\n * @param {!GetCidDef} getCidStruct\n * @return {!Promise<?string>}\n */\nfunction maybeGetCidFromCookieOrBackup(cid, getCidStruct) {\n  const {ampdoc, isBackupCidExpOn} = cid;\n  const {win} = ampdoc;\n  const {disableBackup, scope} = getCidStruct;\n  const cookieName = getCidStruct.cookieName || scope;\n  const existingCookie = getCookie(win, cookieName);\n\n  if (existingCookie) {\n    return Promise.resolve(existingCookie);\n  }\n  if (isBackupCidExpOn && !disableBackup) {\n    return Services.storageForDoc(ampdoc)\n      .then((storage) => {\n        const key = getStorageKey(cookieName);\n        return storage.get(key, BASE_CID_MAX_AGE_MILLIS);\n      })\n      .then((backupCid) => {\n        if (!backupCid || typeof backupCid != 'string') {\n          return null;\n        }\n        return backupCid;\n      });\n  }\n  return Promise.resolve(null);\n}\n\n/**\n * If cookie exists it's returned immediately. Otherwise, if instructed, the\n * new cookie is created.\n * @param {!Cid} cid\n * @param {!GetCidDef} getCidStruct\n * @param {!Promise} persistenceConsent\n * @return {!Promise<?string>}\n */\nfunction getOrCreateCookie(cid, getCidStruct, persistenceConsent) {\n  const {ampdoc, isBackupCidExpOn} = cid;\n  const {win} = ampdoc;\n  const {disableBackup, scope} = getCidStruct;\n  const cookieName = getCidStruct.cookieName || scope;\n\n  return maybeGetCidFromCookieOrBackup(cid, getCidStruct).then(\n    (existingCookie) => {\n      if (!existingCookie && !getCidStruct.createCookieIfNotPresent) {\n        return /** @type {!Promise<?string>} */ (Promise.resolve(null));\n      }\n\n      if (existingCookie) {\n        // If we created the cookie, update it's expiration time.\n        if (/^amp-/.test(existingCookie)) {\n          setCidCookie(win, cookieName, existingCookie);\n          if (isBackupCidExpOn && !disableBackup) {\n            setCidBackup(ampdoc, cookieName, existingCookie);\n          }\n        }\n        return /** @type {!Promise<?string>} */ (\n          Promise.resolve(existingCookie)\n        );\n      }\n\n      if (cid.externalCidCache_[scope]) {\n        return /** @type {!Promise<?string>} */ (cid.externalCidCache_[scope]);\n      }\n\n      const newCookiePromise = getRandomString64(win)\n        // Create new cookie, always prefixed with \"amp-\", so that we can see from\n        // the value whether we created it.\n        .then((randomStr) => 'amp-' + randomStr);\n\n      // Store it as a cookie based on the persistence consent.\n      Promise.all([newCookiePromise, persistenceConsent]).then((results) => {\n        // The initial CID generation is inherently racy. First one that gets\n        // consent wins.\n        const newCookie = results[0];\n        const relookup = getCookie(win, cookieName);\n        if (!relookup) {\n          setCidCookie(win, cookieName, newCookie);\n          if (isBackupCidExpOn && !disableBackup) {\n            setCidBackup(ampdoc, cookieName, newCookie);\n          }\n        }\n      });\n      return (cid.externalCidCache_[scope] = newCookiePromise);\n    }\n  );\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin. Throws an error if the doc is not on a proxy origin.\n * @param {!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n * @visibleForTesting BUT if this is needed elsewhere it could be\n *     factored into its own package.\n */\nexport function getProxySourceOrigin(url) {\n  userAssert(isProxyOrigin(url), 'Expected proxy origin %s', url.origin);\n  return getSourceOrigin(url);\n}\n\n/**\n * Returns the base cid for the current user(). This string must not\n * be exposed to users without hashing with the current source origin\n * and the externalCidScope.\n * On a proxy this value is the same for a user across all source\n * origins.\n * @param {!Cid} cid\n * @param {!Promise} persistenceConsent\n * @return {!Promise<string>}\n */\nfunction getBaseCid(cid, persistenceConsent) {\n  if (cid.baseCid_) {\n    return cid.baseCid_;\n  }\n  const {win} = cid.ampdoc;\n\n  return (cid.baseCid_ = read(cid.ampdoc).then((stored) => {\n    let needsToStore = false;\n    let baseCid;\n\n    // See if we have a stored base cid and whether it is still valid\n    // in terms of expiration.\n    if (stored && !isExpired(stored)) {\n      baseCid = Promise.resolve(stored.cid);\n      if (shouldUpdateStoredTime(stored)) {\n        needsToStore = true;\n      }\n    } else {\n      // We need to make a new one.\n      baseCid = Services.cryptoFor(win).sha384Base64(getEntropy(win));\n      needsToStore = true;\n    }\n\n    if (needsToStore) {\n      baseCid.then((baseCid) => {\n        store(cid.ampdoc, persistenceConsent, baseCid);\n      });\n    }\n\n    return baseCid;\n  }));\n}\n\n/**\n * Stores a new cidString in localStorage. Adds the current time to the\n * stored value.\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @param {!Promise} persistenceConsent\n * @param {string} cidString Actual cid string to store.\n */\nfunction store(ampdoc, persistenceConsent, cidString) {\n  const {win} = ampdoc;\n  if (isIframed(win)) {\n    // If we are being embedded, try to save the base cid to the viewer.\n    viewerBaseCid(ampdoc, createCidData(cidString));\n  } else {\n    // To use local storage, we need user's consent.\n    persistenceConsent.then(() => {\n      try {\n        win.localStorage.setItem('amp-cid', createCidData(cidString));\n      } catch (ignore) {\n        // Setting localStorage may fail. In practice we don't expect that to\n        // happen a lot (since we don't go anywhere near the quota, but\n        // in particular in Safari private browsing mode it always fails.\n        // In that case we just don't store anything, which is just fine.\n      }\n    });\n  }\n}\n\n/**\n * Get/set the Base CID from/to the viewer.\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @param {string=} opt_data Stringified JSON object {cid, time}.\n * @return {!Promise<string|undefined>}\n */\nexport function viewerBaseCid(ampdoc, opt_data) {\n  const viewer = Services.viewerForDoc(ampdoc);\n  return viewer.isTrustedViewer().then((trusted) => {\n    if (!trusted) {\n      return undefined;\n    }\n    // TODO(lannka, #11060): clean up when all Viewers get migrated\n    dev().expectedError('CID', 'Viewer does not provide cap=cid');\n    return viewer.sendMessageAwaitResponse('cid', opt_data).then((data) => {\n      // For backward compatibility: #4029\n      if (data && !tryParseJson(data)) {\n        // TODO(lannka, #11060): clean up when all Viewers get migrated\n        dev().expectedError('CID', 'invalid cid format');\n        return JSON.stringify(\n          dict({\n            'time': Date.now(), // CID returned from old API is always fresh\n            'cid': data,\n          })\n        );\n      }\n      return data;\n    });\n  });\n}\n\n/**\n * Creates a JSON object that contains the given CID and the current time as\n * a timestamp.\n * @param {string} cidString\n * @return {string}\n */\nfunction createCidData(cidString) {\n  return JSON.stringify(\n    dict({\n      'time': Date.now(),\n      'cid': cidString,\n    })\n  );\n}\n\n/**\n * Gets the persisted CID data as a promise. It tries to read from\n * localStorage first then from viewer if it is in embedded mode.\n * Returns null if none was found.\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @return {!Promise<?BaseCidInfoDef>}\n */\nfunction read(ampdoc) {\n  const {win} = ampdoc;\n  let data;\n  try {\n    data = win.localStorage.getItem('amp-cid');\n  } catch (ignore) {\n    // If reading from localStorage fails, we assume it is empty.\n  }\n  let dataPromise = Promise.resolve(data);\n  if (!data && isIframed(win)) {\n    // If we are being embedded, try to get the base cid from the viewer.\n    dataPromise = viewerBaseCid(ampdoc);\n  }\n  return dataPromise.then((data) => {\n    if (!data) {\n      return null;\n    }\n    const item = parseJson(data);\n    return {\n      time: item['time'],\n      cid: item['cid'],\n    };\n  });\n}\n\n/**\n * Whether the retrieved cid object is expired and should be ignored.\n * @param {!BaseCidInfoDef} storedCidInfo\n * @return {boolean}\n */\nfunction isExpired(storedCidInfo) {\n  const createdTime = storedCidInfo.time;\n  const now = Date.now();\n  return createdTime + BASE_CID_MAX_AGE_MILLIS < now;\n}\n\n/**\n * Whether we should write a new timestamp to the stored cid value.\n * We say yes if it is older than 1 day, so we only do this max once\n * per day to avoid writing to localStorage all the time.\n * @param {!BaseCidInfoDef} storedCidInfo\n * @return {boolean}\n */\nfunction shouldUpdateStoredTime(storedCidInfo) {\n  const createdTime = storedCidInfo.time;\n  const now = Date.now();\n  return createdTime + ONE_DAY_MILLIS < now;\n}\n\n/**\n * Returns an array with a total of 128 of random values based on the\n * `win.crypto.getRandomValues` API. If that is not available concatenates\n * a string of other values that might be hard to guess including\n * `Math.random` and the current time.\n * @param {!Window} win\n * @return {!Uint8Array|string} Entropy.\n */\nfunction getEntropy(win) {\n  // Use win.crypto.getRandomValues to get 128 bits of random value\n  const uint8array = getCryptoRandomBytesArray(win, 16); // 128 bit\n  if (uint8array) {\n    return uint8array;\n  }\n\n  // Support for legacy browsers.\n  return String(\n    win.location.href +\n      Date.now() +\n      win.Math.random() +\n      win.screen.width +\n      win.screen.height\n  );\n}\n\n/**\n * Produces an external CID for use in a cookie.\n * @param {!Window} win\n * @return {!Promise<string>} The cid\n */\nexport function getRandomString64(win) {\n  const entropy = getEntropy(win);\n  if (typeof entropy == 'string') {\n    return Services.cryptoFor(win).sha384Base64(entropy);\n  } else {\n    // If our entropy is a pure random number, we can just directly turn it\n    // into base 64\n    const cast = /** @type {!Uint8Array} */ (entropy);\n    return tryResolve(() =>\n      base64UrlEncodeFromBytes(cast)\n        // Remove trailing padding\n        .replace(/\\.+$/, '')\n    );\n  }\n}\n\n/**\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @return {*} TODO(#23582): Specify return type\n */\nexport function installCidService(ampdoc) {\n  return registerServiceBuilderForDoc(ampdoc, 'cid', Cid);\n}\n\n/**\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @return {!Cid}\n * @private visible for testing\n */\nexport function cidServiceForDocForTesting(ampdoc) {\n  registerServiceBuilderForDoc(ampdoc, 'cid', Cid);\n  return getServiceForDoc(ampdoc, 'cid');\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {utf8Encode} from '../../../src/core/types/string/bytes';\n\n/**\n * Standard key for CRC32\n * https://en.wikipedia.org/wiki/Cyclic_redundancy_check#Polynomial_representations_of_cyclic_redundancy_checks\n * @const {number}\n */\nconst CRC32_KEY = 0xedb88320;\n\n/** @private {?Array<number>} */\nlet crcTable = null;\n\n/**\n * Returns CRC32 checksum for provided string.\n * @param {string} str\n * @return {number}\n */\nexport function crc32(str) {\n  if (!crcTable) {\n    crcTable = makeCrcTable();\n  }\n\n  const bytes = utf8Encode(str);\n\n  // Shrink to 32 bits.\n  let crc = -1 >>> 0;\n  for (let i = 0; i < bytes.length; i++) {\n    const lookupIndex = (crc ^ bytes[i]) & 0xff;\n    crc = (crc >>> 8) ^ crcTable[lookupIndex];\n  }\n  return (crc ^ -1) >>> 0;\n}\n\n/**\n * Generates CRC lookup table.\n * @return {!Array<number>}\n */\nfunction makeCrcTable() {\n  const crcTable = new Array(256);\n  for (let i = 0; i < 256; i++) {\n    let c = i;\n    for (let j = 0; j < 8; j++) {\n      if (c & 1) {\n        c = (c >>> 1) ^ CRC32_KEY;\n      } else {\n        c = c >>> 1;\n      }\n    }\n    crcTable[i] = c;\n  }\n  return crcTable;\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WindowInterface} from '../../../src/core/window/interface';\nimport {\n  base64UrlDecodeFromString,\n  base64UrlEncodeFromString,\n} from '../../../src/core/types/string/base64';\nimport {crc32} from './crc32';\nimport {user} from '../../../src/log';\n\n/** @const {string} */\nconst DELIMITER = '*';\nconst KEY_VALIDATOR = /^[a-zA-Z0-9\\-_.]+$/;\nconst CHECKSUM_OFFSET_MAX_MIN = 1;\nconst VALID_VERSION = 1;\nconst TAG = 'amp-analytics/linker';\n\n/**\n * Creates the linker string, in the format of\n * <version>*<checksum>*<serializedIds>\n *\n * where\n *   checksum: base36(CRC32(<fingerprint>*<minuteSinceEpoch>*<serializedIds>))\n *   serializedIds: <id1>*<idValue1>*<id2>*<idValue2>...\n *                  values are base64 encoded\n *   fingerprint: <userAgent>*<timezoneOffset>*<userLanguage>\n *\n * @param {string} version\n * @param {!Object} ids\n * @return {string}\n */\nexport function createLinker(version, ids) {\n  const serializedIds = serialize(ids);\n  if (serializedIds === '') {\n    return '';\n  }\n  const checksum = getCheckSum(serializedIds);\n  return [version, checksum, serializedIds].join(DELIMITER);\n}\n\n/**\n * Return the key value pairs\n * @param {string} value\n * @return {?Object<string, string>}\n */\nexport function parseLinker(value) {\n  const linkerObj = parseLinkerParamValue(value);\n  if (!linkerObj) {\n    return null;\n  }\n  const {checksum, serializedIds} = linkerObj;\n  if (!isCheckSumValid(serializedIds, checksum)) {\n    user().error(TAG, 'LINKER_PARAM value checksum not valid');\n    return null;\n  }\n  return deserialize(serializedIds);\n}\n\n/**\n * Parse the linker param value to version checksum and serializedParams\n * @param {string} value\n * @return {?Object}\n */\nfunction parseLinkerParamValue(value) {\n  const parts = value.split(DELIMITER);\n  const isEven = parts.length % 2 == 0;\n\n  if (parts.length < 4 || !isEven) {\n    // Format <version>*<checksum>*<key1>*<value1>\n    // Note: linker makes sure there's at least one pair of non empty key value\n    // Make sure there is at least three delimiters.\n    user().error(TAG, `Invalid linker_param value ${value}`);\n    return null;\n  }\n\n  const version = Number(parts.shift());\n  if (version !== VALID_VERSION) {\n    user().error(TAG, `Invalid version number ${version}`);\n    return null;\n  }\n\n  const checksum = parts.shift();\n  const serializedIds = parts.join(DELIMITER);\n  return {\n    checksum,\n    serializedIds,\n  };\n}\n\n/**\n * Check if the checksum is valid with time offset tolerance.\n * @param {string} serializedIds\n * @param {string} checksum\n * @return {boolean}\n */\nfunction isCheckSumValid(serializedIds, checksum) {\n  for (let i = 0; i <= CHECKSUM_OFFSET_MAX_MIN; i++) {\n    const calculateCheckSum = getCheckSum(serializedIds, i);\n    if (calculateCheckSum == checksum) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Create a unique checksum hashing the fingerprint and a few other values.\n * @param {string} serializedIds\n * @param {number=} opt_offsetMin\n * @return {string}\n */\nfunction getCheckSum(serializedIds, opt_offsetMin) {\n  const fingerprint = getFingerprint();\n  const offset = opt_offsetMin || 0;\n  const timestamp = getMinSinceEpoch() - offset;\n  const crc = crc32([fingerprint, timestamp, serializedIds].join(DELIMITER));\n  // Encoded to base36 for less bytes.\n  return crc.toString(36);\n}\n\n/**\n * Generates a semi-unique value for page visitor.\n * @return {string}\n */\nfunction getFingerprint() {\n  const date = new Date();\n  const timezone = date.getTimezoneOffset();\n\n  const language = WindowInterface.getUserLanguage(window);\n  return [WindowInterface.getUserAgent(window), timezone, language].join(\n    DELIMITER\n  );\n}\n\n/**\n * Encode all values & join them together\n * @param {!Object} pairs\n * @return {string}\n */\nfunction serialize(pairs) {\n  if (!pairs) {\n    return '';\n  }\n  return Object.keys(pairs)\n    .filter((key) => {\n      const valid = KEY_VALIDATOR.test(key);\n      if (!valid) {\n        user().error(TAG, 'Invalid linker key: ' + key);\n      }\n      return valid;\n    })\n    .map((key) => key + DELIMITER + encode(pairs[key]))\n    .join(DELIMITER);\n}\n\n/**\n * Deserialize the serializedIds and return keyValue pairs.\n * @param {string} serializedIds\n * @return {!Object<string, string>}\n */\nfunction deserialize(serializedIds) {\n  const keyValuePairs = {};\n  const params = serializedIds.split(DELIMITER);\n  for (let i = 0; i < params.length; i += 2) {\n    const key = params[i];\n    const valid = KEY_VALIDATOR.test(key);\n    if (!valid) {\n      user().error(TAG, `Invalid linker key ${key}, value ignored`);\n      continue;\n    }\n    const value = decode(params[i + 1]);\n    keyValuePairs[key] = value;\n  }\n  return keyValuePairs;\n}\n\n/**\n * Rounded time used to check if t2 - t1 is within our time tolerance.\n * @return {number}\n */\nfunction getMinSinceEpoch() {\n  // Timestamp in minutes, floored.\n  return Math.floor(Date.now() / 60000);\n}\n\n/**\n * Function that encodesURIComponent but also tilde, since we are using it as\n * our delimiter.\n * @param {string} value\n * @return {*} TODO(#23582): Specify return type\n */\nfunction encode(value) {\n  return base64UrlEncodeFromString(String(value));\n}\n\n/**\n * @param {string} value\n * @return {string}\n */\nfunction decode(value) {\n  return base64UrlDecodeFromString(String(value));\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {hasOwn} from '../../../src/core/types/object';\nimport {parseLinker} from './linker';\nimport {parseQueryString} from '../../../src/core/types/string/url';\nimport {user} from '../../../src/log';\n\nconst TAG = 'amp-consent/linker-reader';\n\nexport class ConsentLinkerReader {\n  /**\n   * Creates an instance of ConsentLinkerReader.\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private {!Window} */\n    this.win_ = win;\n\n    /** @private {!Object<string, ?Object<string, string>>} */\n    this.linkerParams_ = {};\n  }\n\n  /**\n   * Get the LINKER_PARAM(name, id) value from url and clean the value\n   * @param {string} name\n   * @param {string} id\n   * @return {?string}\n   */\n  get(name, id) {\n    if (!name || !id) {\n      user().error(TAG, 'LINKER_PARAM requires two params, name and id');\n      return null;\n    }\n\n    if (!hasOwn(this.linkerParams_, name)) {\n      this.linkerParams_[name] = this.maybeParseQueryString_(name);\n    }\n\n    if (this.linkerParams_[name] && this.linkerParams_[name][id]) {\n      return this.linkerParams_[name][id];\n    }\n\n    return null;\n  }\n\n  /**\n   * Maybe parse the url if the key is found. Return the value\n   * if found, null otherwise. Do no remove LINKER_PARAM from\n   * window location.\n   * @param {string} name\n   * @return {?Object<string, string>}\n   */\n  maybeParseQueryString_(name) {\n    const params = parseQueryString(this.win_.location.search);\n    if (!hasOwn(params, name)) {\n      // Linker param not found.\n      return null;\n    }\n    const value = params[name];\n    return parseLinker(value);\n  }\n}\n", "/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {addAttributesToElement} from './dom';\nimport {closestAncestorElementBySelector} from './core/dom/query';\nimport {deserializeMessage, isAmpMessage} from './3p-frame-messaging';\nimport {dev, devAssert} from './log';\nimport {dict} from './core/types/object';\nimport {getData} from './event-helper';\nimport {parseUrlDeprecated} from './url';\nimport {remove} from './core/types/array';\nimport {setStyle} from './style';\nimport {tryParseJson} from './core/types/object/json';\n\n/**\n * Sentinel used to force unlistening after a iframe is detached.\n * @type {string}\n */\nconst UNLISTEN_SENTINEL = 'unlisten';\n\n/**\n * @typedef {{\n *   frame: !Element,\n *   events: !Object<string, !Array<function(!JsonObject)>>\n * }}\n */\nlet WindowEventsDef;\n\n/**\n * Returns a mapping from a URL's origin to an array of windows and their\n * listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {boolean=} opt_create create the mapping if it does not exist\n * @return {?Object<string, !Array<!WindowEventsDef>>}\n */\nfunction getListenFors(parentWin, opt_create) {\n  let {listeningFors} = parentWin;\n\n  if (!listeningFors && opt_create) {\n    listeningFors = parentWin.listeningFors = Object.create(null);\n  }\n  return listeningFors || null;\n}\n\n/**\n * Returns an array of WindowEventsDef that have had any listenFor listeners\n * registered for this sentinel.\n * @param {?Window} parentWin the window that created the iframe\n * @param {string} sentinel the sentinel of the message\n * @param {boolean=} opt_create create the array if it does not exist\n * @return {?Array<!WindowEventsDef>}\n */\nfunction getListenForSentinel(parentWin, sentinel, opt_create) {\n  const listeningFors = getListenFors(parentWin, opt_create);\n  if (!listeningFors) {\n    return listeningFors;\n  }\n\n  let listenSentinel = listeningFors[sentinel];\n  if (!listenSentinel && opt_create) {\n    listenSentinel = listeningFors[sentinel] = [];\n  }\n  return listenSentinel || null;\n}\n\n/**\n * Returns an mapping of event names to listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {!Element} iframe the iframe element who's context will trigger the\n *     event\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @return {?Object<string, !Array<function(!JsonObject, !Window, string, !MessageEvent)>>}\n */\nfunction getOrCreateListenForEvents(parentWin, iframe, opt_is3P) {\n  const sentinel = getSentinel_(iframe, opt_is3P);\n  const listenSentinel = getListenForSentinel(parentWin, sentinel, true);\n\n  let windowEvents;\n  for (let i = 0; i < listenSentinel.length; i++) {\n    const we = listenSentinel[i];\n    if (we.frame === iframe) {\n      windowEvents = we;\n      break;\n    }\n  }\n\n  if (!windowEvents) {\n    windowEvents = {\n      frame: iframe,\n      events: Object.create(null),\n    };\n    listenSentinel.push(windowEvents);\n  }\n\n  return windowEvents.events;\n}\n\n/**\n * Returns an mapping of event names to listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {string} sentinel the sentinel of the message\n * @param {string} origin the source window's origin\n * @param {?Window} triggerWin the window that triggered the event\n * @return {?Object<string, !Array<function(!JsonObject, !Window, string, !MessageEvent)>>}\n */\nfunction getListenForEvents(parentWin, sentinel, origin, triggerWin) {\n  const listenSentinel = getListenForSentinel(parentWin, sentinel);\n\n  if (!listenSentinel) {\n    return listenSentinel;\n  }\n\n  // Find the entry for the frame.\n  // TODO(@nekodo): Add a WeakMap<Window, WindowEventsDef> cache to\n  //     speed up this process.\n  let windowEvents;\n  for (let i = 0; i < listenSentinel.length; i++) {\n    const we = listenSentinel[i];\n    const {contentWindow} = we.frame;\n    if (!contentWindow) {\n      setTimeout(dropListenSentinel, 0, listenSentinel);\n    } else if (\n      triggerWin == contentWindow ||\n      isDescendantWindow(contentWindow, triggerWin)\n    ) {\n      // 3p code path, we may accept messages from nested frames.\n      windowEvents = we;\n      break;\n    }\n  }\n\n  return windowEvents ? windowEvents.events : null;\n}\n\n/**\n * Checks whether one window is a descendant of another by climbing\n * the parent chain.\n * @param {?Window} ancestor potential ancestor window\n * @param {?Window} descendant potential descendant window\n * @return {boolean}\n */\nfunction isDescendantWindow(ancestor, descendant) {\n  for (let win = descendant; win && win != win.parent; win = win.parent) {\n    if (win == ancestor) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Removes any listenFors registed on listenSentinel that do not have\n * a contentWindow (the frame was removed from the DOM tree).\n * @param {!Array<!WindowEventsDef>} listenSentinel\n */\nfunction dropListenSentinel(listenSentinel) {\n  const noopData = dict({'sentinel': UNLISTEN_SENTINEL});\n\n  for (let i = listenSentinel.length - 1; i >= 0; i--) {\n    const windowEvents = listenSentinel[i];\n\n    if (!windowEvents.frame.contentWindow) {\n      listenSentinel.splice(i, 1);\n\n      const {events} = windowEvents;\n      for (const name in events) {\n        // Splice here, so that each unlisten does not shift the array\n        events[name].splice(0, Infinity).forEach((event) => {\n          event(noopData);\n        });\n      }\n    }\n  }\n}\n\n/**\n * Registers the global listenFor event listener if it has yet to be.\n * @param {?Window} parentWin\n */\nfunction registerGlobalListenerIfNeeded(parentWin) {\n  if (parentWin.listeningFors) {\n    return;\n  }\n  const listenForListener = function (event) {\n    if (!getData(event)) {\n      return;\n    }\n    const data = parseIfNeeded(getData(event));\n\n    if (!data || !data['sentinel']) {\n      return;\n    }\n\n    const listenForEvents = getListenForEvents(\n      parentWin,\n      data['sentinel'],\n      event.origin,\n      event.source\n    );\n    if (!listenForEvents) {\n      return;\n    }\n\n    let listeners = listenForEvents[data['type']];\n    if (!listeners) {\n      return;\n    }\n\n    // We slice to avoid issues with adding another listener or unlistening\n    // during iteration. We could move to a Doubly Linked List with\n    // backtracking, but that's overly complicated.\n    listeners = listeners.slice();\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener(data, event.source, event.origin, event);\n    }\n  };\n\n  parentWin.addEventListener('message', listenForListener);\n}\n\n/**\n * Allows listening for message from the iframe. Returns an unlisten\n * function to remove the listener.\n *\n * @param {?Element} iframe\n * @param {string} typeOfMessage\n * @param {?function(!JsonObject, !Window, string, !MessageEvent)} callback Called when a\n *     message of this type arrives for this iframe.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @param {boolean=} opt_includingNestedWindows set to true if messages from\n *     nested frames should also be accepted.\n * @param {boolean=} opt_allowOpaqueOrigin set to true if messages from\n       opaque origins (origin == null) are allowed.\n * @return {!UnlistenDef}\n */\nexport function listenFor(\n  iframe,\n  typeOfMessage,\n  callback,\n  opt_is3P,\n  opt_includingNestedWindows,\n  opt_allowOpaqueOrigin\n) {\n  devAssert(iframe.src, 'only iframes with src supported');\n  devAssert(\n    !iframe.parentNode,\n    'cannot register events on an attached ' +\n      'iframe. It will cause hair-pulling bugs like #2942'\n  );\n  devAssert(callback);\n  const parentWin = iframe.ownerDocument.defaultView;\n\n  registerGlobalListenerIfNeeded(parentWin);\n\n  const listenForEvents = getOrCreateListenForEvents(\n    parentWin,\n    iframe,\n    opt_is3P\n  );\n\n  const iframeOrigin = parseUrlDeprecated(iframe.src).origin;\n  let events =\n    listenForEvents[typeOfMessage] || (listenForEvents[typeOfMessage] = []);\n\n  let unlisten;\n  let listener = function (data, source, origin, event) {\n    const sentinel = data['sentinel'];\n\n    // Exclude messages that don't satisfy amp sentinel rules.\n    if (sentinel == 'amp') {\n      // For `amp` sentinel, nested windows are not allowed\n      if (source != iframe.contentWindow) {\n        return;\n      }\n\n      // For `amp` sentinel origin must match unless opaque origin is allowed\n      const isOpaqueAndAllowed = origin == 'null' && opt_allowOpaqueOrigin;\n      if (iframeOrigin != origin && !isOpaqueAndAllowed) {\n        return;\n      }\n    }\n\n    // Exclude nested frames if necessary.\n    // Note that the source was already verified to be either the contentWindow\n    // of the iframe itself or a descendant window within it.\n    if (!opt_includingNestedWindows && source != iframe.contentWindow) {\n      return;\n    }\n\n    if (data.sentinel == UNLISTEN_SENTINEL) {\n      unlisten();\n      return;\n    }\n    callback(data, source, origin, event);\n  };\n\n  events.push(listener);\n\n  return (unlisten = function () {\n    if (listener) {\n      const index = events.indexOf(listener);\n      if (index > -1) {\n        events.splice(index, 1);\n      }\n      // Make sure references to the unlisten function do not keep\n      // alive too much.\n      listener = null;\n      events = null;\n      callback = null;\n    }\n  });\n}\n\n/**\n * Returns a promise that resolves when one of given messages has been observed\n * for the first time. And remove listener for all other messages.\n * @param {!Element} iframe\n * @param {string|!Array<string>} typeOfMessages\n * @param {boolean=} opt_is3P\n * @return {!Promise<!{data: !JsonObject, source: !Window, origin: string, event: !MessageEvent}>}\n */\nexport function listenForOncePromise(iframe, typeOfMessages, opt_is3P) {\n  const unlistenList = [];\n  if (typeof typeOfMessages == 'string') {\n    typeOfMessages = [typeOfMessages];\n  }\n  return new Promise((resolve) => {\n    for (let i = 0; i < typeOfMessages.length; i++) {\n      const message = typeOfMessages[i];\n      const unlisten = listenFor(\n        iframe,\n        message,\n        (data, source, origin, event) => {\n          for (let i = 0; i < unlistenList.length; i++) {\n            unlistenList[i]();\n          }\n          resolve({data, source, origin, event});\n        },\n        opt_is3P\n      );\n      unlistenList.push(unlisten);\n    }\n  });\n}\n\n/**\n * Posts a message to the iframe.\n * @param {!Element} iframe The iframe.\n * @param {string} type Type of the message.\n * @param {!JsonObject} object Message payload.\n * @param {string} targetOrigin origin of the target.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n */\nexport function postMessage(iframe, type, object, targetOrigin, opt_is3P) {\n  postMessageToWindows(\n    iframe,\n    [{win: iframe.contentWindow, origin: targetOrigin}],\n    type,\n    object,\n    opt_is3P\n  );\n}\n\n/**\n * Posts an identical message to multiple target windows with the same\n * sentinel.\n * The message is serialized only once.\n * @param {!Element} iframe The iframe.\n * @param {!Array<{win: !Window, origin: string}>} targets to send the message\n *     to, pairs of window and its origin.\n * @param {string} type Type of the message.\n * @param {!JsonObject} object Message payload.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n */\nexport function postMessageToWindows(iframe, targets, type, object, opt_is3P) {\n  if (!iframe.contentWindow) {\n    return;\n  }\n  object['type'] = type;\n  object['sentinel'] = getSentinel_(iframe, opt_is3P);\n  let payload = object;\n  if (opt_is3P) {\n    // Serialize ourselves because that is much faster in Chrome.\n    payload = 'amp-' + JSON.stringify(object);\n  }\n  for (let i = 0; i < targets.length; i++) {\n    const target = targets[i];\n    target.win./*OK*/ postMessage(payload, target.origin);\n  }\n}\n\n/**\n * Gets the sentinel string.\n * @param {!Element} iframe The iframe.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @return {string} Sentinel string.\n * @private\n */\nfunction getSentinel_(iframe, opt_is3P) {\n  return opt_is3P ? iframe.getAttribute('data-amp-3p-sentinel') : 'amp';\n}\n\n/**\n * JSON parses event.data if it needs to be\n * @param {*} data\n * @return {?JsonObject} object message\n * @private\n * @visibleForTesting\n */\nexport function parseIfNeeded(data) {\n  if (typeof data == 'string') {\n    if (data.charAt(0) == '{') {\n      data =\n        tryParseJson(data, (e) => {\n          dev().warn(\n            'IFRAME-HELPER',\n            'Postmessage could not be parsed. ' +\n              'Is it in a valid JSON format?',\n            e\n          );\n        }) || null;\n    } else if (isAmpMessage(data)) {\n      data = deserializeMessage(data);\n    } else {\n      data = null;\n    }\n  }\n  return /** @type {?JsonObject} */ (data);\n}\n\n/**\n * Manages a postMessage API for an iframe with a subscription message and\n * a way to broadcast messages to all subscribed windows, which\n * in turn must all be descendants of the contentWindow of the iframe.\n */\nexport class SubscriptionApi {\n  /**\n   * @param {!Element} iframe The iframe.\n   * @param {string} type Type of the subscription message.\n   * @param {boolean} is3p set to true if the iframe is 3p.\n   * @param {function(!JsonObject, !Window, string)} requestCallback Callback\n   *     invoked whenever a new window subscribes.\n   */\n  constructor(iframe, type, is3p, requestCallback) {\n    /** @private @const {!Element} */\n    this.iframe_ = iframe;\n    /** @private @const {boolean} */\n    this.is3p_ = is3p;\n    /** @private @const {!Array<{win: !Window, origin: string}>} */\n    this.clientWindows_ = [];\n\n    /** @private @const {!UnlistenDef} */\n    this.unlisten_ = listenFor(\n      this.iframe_,\n      type,\n      (data, source, origin) => {\n        // This message might be from any window within the iframe, we need\n        // to keep track of which windows want to be sent updates.\n        if (!this.clientWindows_.some((entry) => entry.win == source)) {\n          this.clientWindows_.push({win: source, origin});\n        }\n        requestCallback(data, source, origin);\n      },\n      this.is3p_,\n      // For 3P frames we also allow nested frames within them to subscribe..\n      this.is3p_ /* opt_includingNestedWindows */\n    );\n  }\n\n  /**\n   * Sends a message to all subscribed windows.\n   * @param {string} type Type of the message.\n   * @param {!JsonObject} data Message payload.\n   */\n  send(type, data) {\n    // Remove clients that have been removed from the DOM.\n    remove(this.clientWindows_, (client) => !client.win.parent);\n    postMessageToWindows(\n      this.iframe_,\n      this.clientWindows_,\n      type,\n      data,\n      this.is3p_\n    );\n  }\n\n  /**\n   * Destroys iframe.\n   */\n  destroy() {\n    this.unlisten_();\n    this.clientWindows_.length = 0;\n  }\n}\n\n/**\n * @param {!Element} element\n * @return {boolean}\n */\nexport function looksLikeTrackingIframe(element) {\n  const {height, width} = element.getLayoutSize();\n  // This heuristic is subject to change.\n  if (width > 10 || height > 10) {\n    return false;\n  }\n  // Iframe is not tracking iframe if open with user interaction\n  return !closestAncestorElementBySelector(element, '.i-amphtml-overlay');\n}\n\n// Most common ad sizes\n// Array of [width, height] pairs.\nconst adSizes = [\n  [300, 250],\n  [320, 50],\n  [300, 50],\n  [320, 100],\n];\n\n/**\n * Guess whether this element might be an ad.\n * @param {!Element} element An amp-iframe element.\n * @return {boolean}\n * @visibleForTesting\n */\nexport function isAdLike(element) {\n  const {height, width} = element.getLayoutSize();\n  for (let i = 0; i < adSizes.length; i++) {\n    const refWidth = adSizes[i][0];\n    const refHeight = adSizes[i][1];\n    if (refHeight > height) {\n      continue;\n    }\n    if (refWidth > width) {\n      continue;\n    }\n    // Fuzzy matching to account for padding.\n    if (height - refHeight <= 20 && width - refWidth <= 20) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * @param {!Element} iframe\n * @return {!Element}\n */\nexport function disableScrollingOnIframe(iframe) {\n  addAttributesToElement(iframe, dict({'scrolling': 'no'}));\n\n  // This shouldn't work, but it does on Firefox.\n  // https://stackoverflow.com/a/15494969\n  setStyle(iframe, 'overflow', 'hidden');\n\n  return iframe;\n}\n\n/**\n * Returns true if win's properties can be accessed and win is defined.\n * This functioned is used to determine if a window is cross-domained\n * from the perspective of the current window.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function canInspectWindow(win) {\n  // TODO: this is not reliable.  The compiler assumes that property reads are\n  // side-effect free.  The recommended fix is to use goog.reflect.sinkValue\n  // but since we're not using the closure library I'm not sure how to do this.\n  // See https://github.com/google/closure-compiler/issues/3156\n  try {\n    // win['test'] could be truthy but not true the compiler shouldn't be able\n    // to optimize this check away.\n    return !!win.location.href && (win['test'] || true);\n  } catch (unusedErr) {\n    return false;\n  }\n}\n\n/** @const {string} */\nexport const FIE_EMBED_PROP = '__AMP_EMBED__';\n\n/**\n * Returns the embed created using `installFriendlyIframeEmbed` or `null`.\n * Caution: This will only return the FIE after the iframe has 'loaded'. If you\n * are checking before this signal you may be in a race condition that returns\n * null.\n * @param {!HTMLIFrameElement} iframe\n * @return {?./friendly-iframe-embed.FriendlyIframeEmbed}\n */\nexport function getFriendlyIframeEmbedOptional(iframe) {\n  return /** @type {?./friendly-iframe-embed.FriendlyIframeEmbed} */ (\n    iframe[FIE_EMBED_PROP]\n  );\n}\n\n/**\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isInFie(element) {\n  return (\n    element.classList.contains('i-amphtml-fie') ||\n    !!closestAncestorElementBySelector(element, '.i-amphtml-fie')\n  );\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BASE_CID_MAX_AGE_MILLIS} from '../../../src/service/cid-impl';\nimport {ConsentLinkerReader} from './linker-reader';\nimport {Services} from '../../../src/services';\nimport {getMode} from '../../../src/mode';\nimport {hasOwn} from '../../../src/core/types/object';\nimport {isInFie} from '../../../src/iframe-helper';\nimport {isObject} from '../../../src/core/types';\nimport {isProxyOrigin} from '../../../src/url';\nimport {setCookie} from '../../../src/cookies';\nimport {user} from '../../../src/log';\n\nconst TAG = 'amp-consent/cookie-writer';\n\nconst RESERVED_KEYS = {\n  'referrerDomains': true,\n  'enabled': true,\n  'cookiePath': true,\n  'cookieMaxAge': true,\n  'cookieSecure': true,\n  'cookieDomain': true,\n};\n\n/** @const @type {!Object<string, boolean>} */\nconst CONSENT_COOKIE_WRITE_VARS_ALLOWED_LIST = {\n  'LINKER_PARAM': true,\n};\n\nexport class CookieWriter {\n  /**\n   * @param {!Window} win\n   * @param {!Element} element\n   * @param {!JsonObject} config\n   */\n  constructor(win, element, config) {\n    /** @private {!Window} */\n    this.win_ = win;\n\n    /** @private {!Element} */\n    this.element_ = element;\n\n    /** @private {?Promise} */\n    this.writePromise_ = null;\n\n    /** @private {!JsonObject} */\n    this.config_ = config;\n\n    this.linkerReader_ = new ConsentLinkerReader(win);\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  write() {\n    if (!this.writePromise_) {\n      this.writePromise_ = this.init_();\n    }\n    return this.writePromise_;\n  }\n\n  /**\n   * Parse the config and write to cookie\n   * Config looks like\n   * cookies: {\n   *   enabled: true/false, //Default to true\n   *   cookieNameA: {\n   *     value: cookieValueA (LINKER_PARAM)\n   *   },\n   *   cookieValueB: {\n   *     value: cookieValueB\n   *   }\n   *   ...\n   * }\n   * @return {!Promise}\n   */\n  init_() {\n    // TODO: Need the consider the case for shadow doc.\n    if (!this.isCookieAllowed_(this.win_, this.element_)) {\n      // Note: It's important to check origin here so that setCookie doesn't\n      // throw error \"should not attempt ot set cookie on proxy origin\"\n      return Promise.resolve();\n    }\n\n    if (!hasOwn(this.config_, 'cookies')) {\n      return Promise.resolve();\n    }\n\n    if (!isObject(this.config_['cookies'])) {\n      user().error(TAG, 'cookies config must be an object');\n      return Promise.resolve();\n    }\n\n    const inputConfig = this.config_['cookies'];\n\n    if (inputConfig['enabled'] === false) {\n      // Enabled by default\n      // TODO: Allow indiviual cookie object to override the value\n      return Promise.resolve();\n    }\n\n    const cookieExpireDateMs = this.getCookieMaxAgeMs_(inputConfig);\n\n    const ids = Object.keys(inputConfig);\n    const promises = [];\n    for (let i = 0; i < ids.length; i++) {\n      const cookieName = ids[i];\n      const cookieObj = inputConfig[cookieName];\n      if (this.isValidCookieConfig_(cookieName, cookieObj)) {\n        promises.push(\n          this.expandAndWrite_(\n            cookieName,\n            cookieObj['value'],\n            cookieExpireDateMs\n          )\n        );\n      }\n    }\n    return Promise.all(promises);\n  }\n\n  /**\n   * Retrieves cookieMaxAge from given config, provides default value if no\n   * value is found or value is invalid\n   * @param {JsonObject} inputConfig\n   * @return {number}\n   */\n  getCookieMaxAgeMs_(inputConfig) {\n    if (!hasOwn(inputConfig, 'cookieMaxAge')) {\n      return BASE_CID_MAX_AGE_MILLIS;\n    }\n\n    const cookieMaxAge = Number(inputConfig['cookieMaxAge']);\n\n    // 0 is a special case which we allow\n    if (!cookieMaxAge && cookieMaxAge !== 0) {\n      user().error(\n        TAG,\n        'invalid cookieMaxAge %s, falling back to default value (1 year)',\n        inputConfig['cookieMaxAge']\n      );\n      return BASE_CID_MAX_AGE_MILLIS;\n    }\n\n    if (cookieMaxAge <= 0) {\n      user().warn(\n        TAG,\n        'cookieMaxAge %s less than or equal to 0, cookie will immediately expire',\n        inputConfig['cookieMaxAge']\n      );\n    }\n\n    // convert cookieMaxAge (sec) to milliseconds\n    return cookieMaxAge * 1000;\n  }\n\n  /**\n   * Check whether the cookie value is supported. Currently only\n   * support LINKER_PARAM(***, ***)\n   *\n   * CookieObj should looks like\n   * cookieName: {\n   *  value: string (cookieValue),\n   * }\n   * @param {string} cookieName\n   * @param {*} cookieConfig\n   * @return {boolean}\n   */\n  isValidCookieConfig_(cookieName, cookieConfig) {\n    if (RESERVED_KEYS[cookieName]) {\n      return false;\n    }\n\n    if (!isObject(cookieConfig)) {\n      user().error(TAG, 'cookieValue must be configured in an object');\n      return false;\n    }\n\n    if (!hasOwn(cookieConfig, 'value')) {\n      user().error(TAG, 'value is required in the cookieValue object');\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Expand the value and write to cookie if necessary\n   * @param {string} cookieName\n   * @param {string} cookieValue\n   * @param {number} cookieExpireDateMs\n   * @return {!Promise}\n   */\n  expandAndWrite_(cookieName, cookieValue, cookieExpireDateMs) {\n    return Services.urlReplacementsForDoc(this.element_)\n      .expandStringAsync(\n        cookieValue,\n        {\n          'LINKER_PARAM': (name, id) => this.linkerReader_.get(name, id),\n        },\n        CONSENT_COOKIE_WRITE_VARS_ALLOWED_LIST\n      )\n      .then((value) => {\n        // Note: We ignore empty cookieValue, that means currently we don't\n        // provide a way to overwrite or erase existing cookie\n        if (value) {\n          const expireDate = Date.now() + cookieExpireDateMs;\n          setCookie(this.win_, cookieName, value, expireDate, {\n            highestAvailableDomain: true,\n          });\n        }\n      })\n      .catch((e) => {\n        user().error(TAG, 'Error expanding cookie string', e);\n      });\n  }\n\n  /**\n   * Determine if cookie writing/reading feature is supported in current\n   * environment.\n   * Disable cookie writer in friendly iframe and proxy origin and inabox.\n   * @return {boolean}\n   */\n  isCookieAllowed_() {\n    return (\n      !isInFie(this.element_) &&\n      !isProxyOrigin(this.win_.location) &&\n      !(getMode(this.win_).runtime == 'inabox')\n    );\n  }\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const NOTIFICATION_UI_MANAGER = 'notificationUIManager';\n\nexport class NotificationUiManager {\n  /**\n   * Creates an instance of NotificationUiManager.\n   */\n  constructor() {\n    /** @private {number} */\n    this.queueSize_ = 0;\n\n    /** @private {!Promise} */\n    this.queuePromise_ = Promise.resolve();\n\n    /** @private {function()} */\n    this.queueEmptyHandler_ = () => {}; // Make this an observable if requested\n\n    /** @private {function()} */\n    this.queueNotEmptyHandler_ = () => {};\n  }\n\n  /**\n   * Register handler to be called when UI queue becomes empty\n   * @param {function()} handler\n   */\n  onQueueEmpty(handler) {\n    this.queueEmptyHandler_ = handler;\n    if (this.queueSize_ == 0) {\n      handler();\n    }\n  }\n\n  /**\n   * Register handler to be called when UI queue becomes not empty\n   * @param {function()} handler\n   */\n  onQueueNotEmpty(handler) {\n    this.queueNotEmptyHandler_ = handler;\n    if (this.queueSize_ > 0) {\n      handler();\n    }\n  }\n\n  /**\n   * Register to display UI. Notification will be blocked until previous one has\n   * been dismissed.\n   * @param {function():!Promise} show\n   * @return {!Promise}\n   */\n  registerUI(show) {\n    if (this.queueSize_ == 0) {\n      this.queueNotEmptyHandler_();\n    }\n    this.queueSize_++;\n    const promise = this.queuePromise_.then(() => {\n      return show().then(() => {\n        this.queueSize_--;\n        if (this.queueSize_ == 0) {\n          this.queueEmptyHandler_();\n        }\n      });\n    });\n    this.queuePromise_ = promise;\n    return promise;\n  }\n}\n", "/**\n * Copyright 2021 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConsentPolicyManager} from './consent-policy-manager'; // eslint-disable-line no-unused-vars\nimport {TCF_POST_MESSAGE_API_COMMANDS} from './consent-info';\nimport {hasOwn, map} from '../../../src/core/types/object';\nimport {isEnumValue, isObject} from '../../../src/core/types';\n\nimport {user} from '../../../src/log';\n\n/**\n * Event status is only defined for addEventListener command.\n * @typedef {{\n *  tcfPolicyVersion: number,\n *  gdprApplies: (boolean|undefined),\n *  tcString: (string|undefined),\n *  listenerId: (string|undefined),\n *  cmpStatus: (string),\n *  eventStatus: (string),\n *  additionalData: (Object),\n * }}\n */\nexport let MinimalTcData;\n\n/**\n * @typedef {{\n *  gdprApplies: (boolean|undefined),\n *  cmpLoaded: (boolean),\n *  cmpStatus: (string|undefined),\n *  tcfPolicyVersion: number,\n * }}\n */\nexport let MinimalPingReturn;\n\nconst TAG = 'amp-consent';\nconst TCF_POLICY_VERSION = 2;\nconst CMP_STATUS = 'loaded';\nconst CMP_LOADED = true;\nconst EVENT_STATUS = 'tcloaded';\n\nexport class TcfApiCommandManager {\n  /**\n   * Creates an instance of TcfApiCommandManager.\n   * @param {!./consent-policy-manager.ConsentPolicyManager} policyManager\n   */\n  constructor(policyManager) {\n    /** @private {!./consent-policy-manager.ConsentPolicyManager} */\n    this.policyManager_ = policyManager;\n\n    /** @private {!Object<number, Object>} */\n    this.changeListeners_ = map();\n\n    /** @private {?string} */\n    this.currentTcString_ = null;\n\n    /** @private {number} */\n    this.listenerId_ = 0;\n\n    // Set the policy manager to signal to us\n    // when a new TC has potentially been stored.\n    policyManager.setOnPolicyChange(() => {\n      this.handleTcDataChange_();\n    });\n  }\n\n  /**\n   * @param {!Object} data\n   * @param {!Window} win\n   */\n  handleTcfCommand(data, win) {\n    if (!this.isValidTcfApiCall_(data['__tcfapiCall'])) {\n      return;\n    }\n\n    const payload = data['__tcfapiCall'];\n    const {command} = payload;\n    switch (command) {\n      case TCF_POST_MESSAGE_API_COMMANDS.PING:\n        this.handlePingEvent_(payload, win);\n        break;\n      case TCF_POST_MESSAGE_API_COMMANDS.GET_TC_DATA:\n        this.handleGetTcData_(payload, win);\n        break;\n      case TCF_POST_MESSAGE_API_COMMANDS.ADD_EVENT_LISTENER:\n        this.handleAddEventListner_(payload, win);\n        break;\n      case TCF_POST_MESSAGE_API_COMMANDS.REMOVE_EVENT_LISTENER:\n        this.handleRemoveEventListner_(payload, win);\n        break;\n      default:\n        return;\n    }\n  }\n\n  /**\n   * Add a entry to our changeListeners to signify that there\n   * is another iframe intrested in listening for TCData changes.\n   *\n   * Each entry has a unique `listenerId` that will be sent\n   * back to the 3p iframe.\n   * @param {!Object} payload\n   * @param {!Window} win\n   */\n  handleAddEventListner_(payload, win) {\n    if (this.changeListeners_[this.listenerId_]) {\n      return;\n    }\n    this.changeListeners_[this.listenerId_] = {\n      payload,\n      win,\n    };\n    this.listenerId_++;\n  }\n\n  /**\n   * @param {!Object} payload\n   * @param {!Window} win\n   */\n  handleRemoveEventListner_(payload, win) {\n    const {callId, parameter} = payload;\n    const success = !!this.changeListeners_[parameter];\n    if (success) {\n      delete this.changeListeners_[parameter];\n    }\n\n    this.sendTcfApiReturn_(win, /** returnValue */ undefined, callId, success);\n  }\n\n  /**\n   * Handler for when policy manager signal potential TCData\n   * change. Only triggers new TCData to be sent if TC String\n   * has been change and is non-null.\n   */\n  handleTcDataChange_() {\n    if (!Object.keys(this.changeListeners_).length) {\n      return;\n    }\n\n    this.getTcDataPromises_().then((consentPromises) => {\n      const newTcString = consentPromises[2];\n      if (!newTcString || newTcString === this.currentTcString_) {\n        return;\n      }\n\n      this.currentTcString_ = newTcString;\n      const listenerIds = Object.keys(this.changeListeners_);\n      for (let i = 0; i < listenerIds.length; i++) {\n        const listenerId = Number(listenerIds[i]);\n        if (!hasOwn(this.changeListeners_, listenerId)) {\n          continue;\n        }\n        const {payload, win} = this.changeListeners_[listenerId];\n        const {callId} = payload;\n        const returnValue = this.getMinimalTcData_(\n          consentPromises[0],\n          consentPromises[1],\n          newTcString,\n          listenerId\n        );\n\n        this.sendTcfApiReturn_(win, returnValue, callId, true);\n      }\n    });\n  }\n\n  /**\n   * @return {!Promise<Array>}\n   */\n  getTcDataPromises_() {\n    const consentStringInfoPromise =\n      this.policyManager_.getConsentStringInfo('default');\n    const metadataPromise =\n      this.policyManager_.getConsentMetadataInfo('default');\n    const sharedDataPromise =\n      this.policyManager_.getMergedSharedData('default');\n\n    return Promise.all([\n      metadataPromise,\n      sharedDataPromise,\n      consentStringInfoPromise,\n    ]);\n  }\n\n  /**\n   * Create minimal PingReturn object. Send to original iframe\n   * once object has been filled.\n   * @param {!Object} payload\n   * @param {!Window} win\n   */\n  handleGetTcData_(payload, win) {\n    this.getTcDataPromises_().then((arr) => {\n      const returnValue = this.getMinimalTcData_(arr[0], arr[1], arr[2]);\n      const {callId} = payload;\n\n      this.sendTcfApiReturn_(win, returnValue, callId, true);\n    });\n  }\n\n  /**\n   * Create MinimalTCData object. Fill in fields dependent on\n   * command.\n   * @param {?Object} metadata\n   * @param {?Object} sharedData\n   * @param {?string} tcString\n   * @param {number=} opt_listenerId\n   * @return {!MinimalTcData} policyManager\n   */\n  getMinimalTcData_(metadata, sharedData, tcString, opt_listenerId) {\n    const purposeOneTreatment = metadata ? metadata['purposeOne'] : undefined;\n    const gdprApplies = metadata ? metadata['gdprApplies'] : undefined;\n    const additionalConsent = metadata\n      ? metadata['additionalConsent']\n      : undefined;\n    const additionalData = {...sharedData, additionalConsent};\n\n    return {\n      tcfPolicyVersion: TCF_POLICY_VERSION,\n      gdprApplies,\n      tcString,\n      listenerId: opt_listenerId,\n      cmpStatus: CMP_STATUS,\n      eventStatus: EVENT_STATUS,\n      purposeOneTreatment,\n      additionalData,\n    };\n  }\n\n  /**\n   * Create minimal PingReturn object. Send to original iframe\n   * once object has been filled.\n   * @param {!Object} payload\n   * @param {!Window} win\n   */\n  handlePingEvent_(payload, win) {\n    this.policyManager_.getConsentMetadataInfo('default').then((metadata) => {\n      const returnValue = this.getMinimalPingReturn_(metadata);\n      const {callId} = payload;\n\n      this.sendTcfApiReturn_(win, returnValue, callId);\n    });\n  }\n\n  /**\n   * Create minimal PingReturn object.\n   * @param {?Object} metadata\n   * @return {!MinimalPingReturn}\n   */\n  getMinimalPingReturn_(metadata) {\n    const gdprApplies = metadata ? metadata['gdprApplies'] : undefined;\n    return {\n      gdprApplies,\n      cmpLoaded: CMP_LOADED,\n      cmpStatus: CMP_STATUS,\n      tcfPolicyVersion: TCF_POLICY_VERSION,\n    };\n  }\n\n  /**\n   *\n   * @param {!Window} win\n   * @param {!JsonObject} returnValue\n   * @param {string} callId\n   * @param {boolean=} opt_success\n   */\n  sendTcfApiReturn_(win, returnValue, callId, opt_success) {\n    if (!win) {\n      return;\n    }\n\n    const __tcfapiReturn = {returnValue, callId, success: opt_success};\n    win./*OK*/ postMessage(\n      /** @type {!JsonObject} */ ({\n        __tcfapiReturn,\n      }),\n      '*'\n    );\n  }\n\n  /**\n   * Checks if the payload from the `tcfapiCall` is valid.\n   * @param {JsonObject} payload\n   * @return {boolean}\n   */\n  isValidTcfApiCall_(payload) {\n    if (!isObject(payload)) {\n      user().error(TAG, `\"tcfapiCall\" is not an object: ${payload}`);\n      return false;\n    }\n    const {command, parameter, version} = payload;\n    if (!isEnumValue(TCF_POST_MESSAGE_API_COMMANDS, command)) {\n      user().error(\n        TAG,\n        `Unsupported command found in \"tcfapiCall\": ${command}`\n      );\n      return false;\n    }\n    if (\n      parameter &&\n      command != TCF_POST_MESSAGE_API_COMMANDS.REMOVE_EVENT_LISTENER\n    ) {\n      user().error(\n        TAG,\n        `Unsupported parameter found in \"tcfapiCall\": ${parameter}`\n      );\n      return false;\n    }\n    if (version !== 2) {\n      user().error(TAG, `Found incorrect version in \"tcfapiCall\": ${version}`);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * @param {?Object} metadata\n   * @return {!MinimalPingReturn}\n   * @visibleForTesting\n   */\n  getMinimalPingReturnForTesting(metadata) {\n    return this.getMinimalPingReturn_(metadata);\n  }\n\n  /**\n   * @param {?Object} metadata\n   * @param {?Object} sharedData\n   * @param {?string} tcString\n   * @param {number=} listenerId\n   * @return {!MinimalPingReturn}\n   * @visibleForTesting\n   */\n  getMinimalTcDataForTesting(metadata, sharedData, tcString, listenerId) {\n    return this.getMinimalTcData_(metadata, sharedData, tcString, listenerId);\n  }\n}\n", "/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSENT_ITEM_STATE,\n  ConsentMetadataDef,\n  assertMetadataValues,\n  constructMetadata,\n  convertEnumValueToState,\n  getConsentStateValue,\n  hasStoredValue,\n} from './consent-info';\nimport {CSS} from '../../../build/amp-consent-0.1.css';\nimport {\n  ConsentConfig,\n  expandConsentEndpointUrl,\n  expandPolicyConfig,\n} from './consent-config';\nimport {ConsentPolicyManager} from './consent-policy-manager';\nimport {ConsentStateManager} from './consent-state-manager';\nimport {ConsentUI} from './consent-ui';\nimport {CookieWriter} from './cookie-writer';\nimport {Deferred} from '../../../src/core/data-structures/promise';\nimport {\n  NOTIFICATION_UI_MANAGER,\n  NotificationUiManager,\n} from '../../../src/service/notification-ui-manager';\nimport {Services} from '../../../src/services';\nimport {TcfApiCommandManager} from './tcf-api-command-manager';\nimport {\n  assertHttpsUrl,\n  getSourceUrl,\n  resolveRelativeUrl,\n} from '../../../src/url';\nimport {dev, devAssert, user, userAssert} from '../../../src/log';\nimport {dict, hasOwn} from '../../../src/core/types/object';\nimport {getData} from '../../../src/event-helper';\nimport {getServicePromiseForDoc} from '../../../src/service';\nimport {isArray, isEnumValue, isObject} from '../../../src/core/types';\n\nimport {isExperimentOn} from '../../../src/experiments';\n\nimport {toggle} from '../../../src/style';\n\nconst CONSENT_STATE_MANAGER = 'consentStateManager';\nconst CONSENT_POLICY_MANAGER = 'consentPolicyManager';\nconst TCF_API_LOCATOR = '__tcfapiLocator';\nconst TAG = 'amp-consent';\n\n/**\n * @enum {string}\n * @visibleForTesting\n */\nexport const ACTION_TYPE = {\n  ACCEPT: 'accept',\n  REJECT: 'reject',\n  DISMISS: 'dismiss',\n};\n\nexport class AmpConsent extends AMP.BaseElement {\n  /** @param {!AmpElement} element */\n  constructor(element) {\n    super(element);\n\n    /** @private {?ConsentStateManager} */\n    this.consentStateManager_ = null;\n\n    /** @private {?ConsentPolicyManager} */\n    this.consentPolicyManager_ = null;\n\n    /** @private {?TcfApiCommandManager} */\n    this.tcfApiCommandManager_ = null;\n\n    /** @private {?NotificationUiManager} */\n    this.notificationUiManager_ = null;\n\n    /** @private {?ConsentUI} */\n    this.consentUI_ = null;\n\n    /** @private {?JsonObject} */\n    this.consentConfig_ = null;\n\n    /** @private {?JsonObject} */\n    this.policyConfig_ = null;\n\n    /** @private {?ConsentUI} */\n    this.postPromptUI_ = null;\n\n    /** @private {?function()} */\n    this.dialogResolver_ = null;\n\n    /** @private {boolean} */\n    this.isPromptUiOn_ = false;\n\n    /** @private {boolean} */\n    this.consentStateChangedViaPromptUI_ = false;\n\n    /** @private {boolean} */\n    this.consentUIPending_ = false;\n\n    /** @const @private {!../../../src/service/vsync-impl.Vsync} */\n    this.vsync_ = this.getVsync();\n\n    /** @private {?Promise<?JsonObject>} */\n    this.remoteConfigPromise_ = null;\n\n    /** @private {?string} */\n    this.consentId_ = null;\n\n    /** @private {?string} */\n    this.matchedGeoGroup_ = null;\n\n    /** @private {?boolean} */\n    this.isTcfPostMessageProxyExperimentOn_ = isExperimentOn(\n      this.win,\n      'tcf-post-message-proxy-api'\n    );\n\n    /** @private {?boolean} */\n    this.isGranularConsentExperimentOn_ = isExperimentOn(\n      this.win,\n      'amp-consent-granular-consent'\n    );\n\n    /** @private {?Promise<?Array>} */\n    this.purposeConsentRequired_ = this.isGranularConsentExperimentOn_\n      ? null\n      : Promise.resolve();\n\n    /** @private @const {?Function} */\n    this.boundHandleIframeMessages_ = this.isTcfPostMessageProxyExperimentOn_\n      ? this.handleIframeMessages_.bind(this)\n      : null;\n  }\n\n  /** @override */\n  getConsentPolicy() {\n    // amp-consent should not be blocked by itself\n    return null;\n  }\n\n  /** @override */\n  buildCallback() {\n    userAssert(\n      this.element.getAttribute('id'),\n      'amp-consent should have an id'\n    );\n\n    const configManager = new ConsentConfig(this.element);\n\n    return configManager.getConsentConfigPromise().then((validatedConfig) => {\n      this.matchedGeoGroup_ = configManager.getMatchedGeoGroup();\n      this.initialize_(validatedConfig);\n    });\n  }\n\n  /** @override */\n  pauseCallback() {\n    if (this.consentUI_) {\n      this.consentUI_.pause();\n    }\n  }\n\n  /** @override */\n  resumeCallback() {\n    if (this.consentUI_) {\n      this.consentUI_.resume();\n    }\n  }\n\n  /**\n   *\n   * @param {!JsonObject} validatedConfig\n   */\n  initialize_(validatedConfig) {\n    this.consentConfig_ = validatedConfig;\n\n    // ConsentConfig has verified that there's one and only one consent instance\n    this.consentId_ = this.consentConfig_['consentInstanceId'];\n\n    if (this.consentConfig_['postPromptUI']) {\n      this.postPromptUI_ = new ConsentUI(\n        this,\n        dict({}),\n        this.consentConfig_['postPromptUI']\n      );\n    }\n\n    /**\n     * Deprecated Format\n     * {\n     *   'consentInstanceId': {\n     *     'checkConsentHref': ...,\n     *     'promptUI': ...\n     *   }\n     * }\n     *\n     * New Format\n     * {\n     *   'consentInstanceId': ...\n     *   'checkConsentHref': ...\n     *   'promptUI': ...\n     *   'postPromptUI': ...\n     * }\n     */\n    const policyConfig = this.consentConfig_['policy'] || dict({});\n\n    this.policyConfig_ = expandPolicyConfig(\n      policyConfig,\n      /** @type {string} */ (this.consentId_)\n    );\n\n    const children = this.getRealChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      toggle(child, false);\n      // <amp-consent> will manually schedule layout for its children.\n      Services.ownersForDoc(this.element).setOwner(child, this.element);\n    }\n\n    const consentPolicyManagerPromise = getServicePromiseForDoc(\n      this.getAmpDoc(),\n      CONSENT_POLICY_MANAGER\n    ).then((manager) => {\n      this.consentPolicyManager_ = /** @type {!ConsentPolicyManager} */ (\n        manager\n      );\n      this.consentPolicyManager_.setLegacyConsentInstanceId(\n        /** @type {string} */ (this.consentId_)\n      );\n      const policyKeys = Object.keys(\n        /** @type {!Object} */ (this.policyConfig_)\n      );\n      for (let i = 0; i < policyKeys.length; i++) {\n        this.consentPolicyManager_.registerConsentPolicyInstance(\n          policyKeys[i],\n          this.policyConfig_[policyKeys[i]]\n        );\n      }\n    });\n\n    const consentStateManagerPromise = getServicePromiseForDoc(\n      this.getAmpDoc(),\n      CONSENT_STATE_MANAGER\n    ).then((manager) => {\n      manager.registerConsentInstance(this.consentId_, this.consentConfig_);\n      this.consentStateManager_ = /** @type {!ConsentStateManager} */ (manager);\n    });\n\n    const notificationUiManagerPromise = getServicePromiseForDoc(\n      this.getAmpDoc(),\n      NOTIFICATION_UI_MANAGER\n    ).then((manager) => {\n      this.notificationUiManager_ = /** @type {!NotificationUiManager} */ (\n        manager\n      );\n    });\n\n    const cookieWriterPromise = this.consentConfig_['cookies']\n      ? new CookieWriter(this.win, this.element, this.consentConfig_).write()\n      : Promise.resolve();\n\n    Promise.all([\n      consentStateManagerPromise,\n      notificationUiManagerPromise,\n      consentPolicyManagerPromise,\n      cookieWriterPromise,\n    ]).then(() => {\n      this.init_();\n    });\n  }\n\n  /**\n   * Register a list of user action functions\n   */\n  enableInteractions_() {\n    this.registerAction('accept', (invocation) => {\n      this.handleClosingUiAction_(ACTION_TYPE.ACCEPT, invocation);\n    });\n\n    this.registerAction('reject', (invocation) => {\n      this.handleClosingUiAction_(ACTION_TYPE.REJECT, invocation);\n    });\n\n    this.registerAction('dismiss', () => {\n      this.handleClosingUiAction_(ACTION_TYPE.DISMISS);\n    });\n\n    if (this.isGranularConsentExperimentOn_) {\n      this.registerAction('setPurpose', (invocation) => {\n        this.handleSetPurpose_(invocation);\n      });\n    }\n\n    this.registerAction('prompt', (invocation) =>\n      this.handleReprompt_(invocation)\n    );\n\n    this.enableExternalInteractions_();\n  }\n\n  /**\n   * For actions that close the PromptUI, validate state\n   * and do some preprocessing, then handle action.\n   * @param {string} action\n   * @param {../../../src/service/action-impl.ActionInvocation=} opt_invocation\n   */\n  handleClosingUiAction_(action, opt_invocation) {\n    if (!this.isReadyToHandleAction_()) {\n      return;\n    }\n    // Set default for purpose map\n    this.maybeSetConsentPurposeDefaults_(action, opt_invocation).then(() => {\n      this.handleAction_(action);\n    });\n  }\n\n  /**\n   * Listen to external consent flow iframe's response\n   * with consent string and metadata.\n   */\n  enableExternalInteractions_() {\n    this.win.addEventListener('message', (event) => {\n      if (!this.isPromptUiOn_) {\n        return;\n      }\n\n      let consentString;\n      let metadata;\n      const data = getData(event);\n\n      if (!data || data['type'] != 'consent-response') {\n        return;\n      }\n\n      if (!data['action']) {\n        user().error(TAG, 'consent-response message missing required info');\n        return;\n      }\n      if (data['info'] !== undefined) {\n        if (typeof data['info'] != 'string') {\n          user().error(\n            TAG,\n            'consent-response info only supports string, ' +\n              '%s, treated as undefined',\n            data['info']\n          );\n          data['info'] = undefined;\n        }\n        if (data['action'] === ACTION_TYPE.DISMISS) {\n          if (data['info']) {\n            this.user().error(\n              TAG,\n              'Consent string value %s not applicable on user dismiss, ' +\n                'stored value will be kept and used',\n              data['info']\n            );\n          }\n          data['info'] = undefined;\n        }\n        consentString = data['info'];\n        metadata = this.validateMetadata_(data['consentMetadata']);\n      }\n\n      const iframes = this.element.querySelectorAll('iframe');\n\n      for (let i = 0; i < iframes.length; i++) {\n        if (iframes[i].contentWindow === event.source) {\n          const {action, purposeConsents} = data;\n          // Check if we have a valid action and valid state\n          if (\n            !isEnumValue(ACTION_TYPE, action) ||\n            !this.isReadyToHandleAction_()\n          ) {\n            continue;\n          }\n          if (\n            purposeConsents &&\n            Object.keys(purposeConsents).length &&\n            action !== ACTION_TYPE.DISMISS\n          ) {\n            this.validatePurposeConsents_(purposeConsents);\n            this.consentStateManager_.updateConsentInstancePurposes(\n              purposeConsents\n            );\n          }\n          this.handleAction_(action, consentString, metadata);\n        }\n      }\n    });\n  }\n\n  /**\n   * Returns a promise that attempt to show prompt UI\n   * @param {boolean} isActionPromptTrigger\n   */\n  scheduleDisplay_(isActionPromptTrigger) {\n    if (!this.notificationUiManager_) {\n      dev().error(TAG, 'notification ui manager not found');\n    }\n\n    if (this.consentUIPending_) {\n      // Already pending to be shown. Do nothing.\n      // This is to prevent postPromptUI trying to prompt the dialog, while\n      // the prompt is waiting for previous amp-user-notification prompt to be\n      // resolved first.\n      // So prompt window won't be added to notificationUI queue duplicately.\n      return;\n    }\n\n    if (!this.consentUI_) {\n      // If consent UI not found. Do nothing.\n      return;\n    }\n\n    this.consentUIPending_ = true;\n    this.notificationUiManager_.registerUI(\n      this.show_.bind(this, isActionPromptTrigger)\n    );\n  }\n\n  /**\n   * Show prompt UI\n   * Do not invoke the function except in scheduleDisplay_\n   * @param {boolean} isActionPromptTrigger\n   * @return {!Promise}\n   */\n  show_(isActionPromptTrigger) {\n    if (this.isPromptUiOn_) {\n      dev().error(TAG, 'Attempt to show an already displayed prompt UI');\n    }\n\n    this.vsync_.mutate(() => {\n      this.consentUI_.show(isActionPromptTrigger);\n      this.isPromptUiOn_ = true;\n    });\n\n    const deferred = new Deferred();\n    this.dialogResolver_ = deferred.resolve;\n    return deferred.promise;\n  }\n\n  /**\n   * Hide current prompt UI\n   */\n  hide_() {\n    if (!this.isPromptUiOn_) {\n      dev().error(TAG, '%s no consent ui to hide');\n    }\n\n    this.consentUI_.hide();\n    this.isPromptUiOn_ = false;\n\n    if (this.dialogResolver_) {\n      this.dialogResolver_();\n      this.dialogResolver_ = null;\n    }\n\n    this.consentUIPending_ = false;\n  }\n\n  /**\n   * Checks if we are in a valid state to handle user actions.\n   * @return {boolean}\n   */\n  isReadyToHandleAction_() {\n    if (!this.consentStateManager_) {\n      dev().error(TAG, 'No consent state manager');\n      return false;\n    }\n    return this.isPromptUiOn_;\n  }\n\n  /**\n   * Handler User action. Should call isReadyToHandleAction_ before.\n   *\n   * @param {string} action\n   * @param {string=} consentString\n   * @param {!ConsentMetadataDef=} opt_consentMetadata\n   */\n  handleAction_(action, consentString, opt_consentMetadata) {\n    this.consentStateChangedViaPromptUI_ = true;\n\n    if (action == ACTION_TYPE.ACCEPT) {\n      //accept\n      this.consentStateManager_.updateConsentInstanceState(\n        CONSENT_ITEM_STATE.ACCEPTED,\n        consentString,\n        opt_consentMetadata\n      );\n    } else if (action == ACTION_TYPE.REJECT) {\n      // reject\n      this.consentStateManager_.updateConsentInstanceState(\n        CONSENT_ITEM_STATE.REJECTED,\n        consentString,\n        opt_consentMetadata\n      );\n    } else if (action == ACTION_TYPE.DISMISS) {\n      this.consentStateManager_.updateConsentInstanceState(\n        CONSENT_ITEM_STATE.DISMISSED\n      );\n    }\n\n    // Hide current dialog\n    this.hide_();\n  }\n\n  /**\n   * Maybe set the consent purpose map with default values.\n   * If not, resolve instantly.\n   * @param {string} action\n   * @param {../../../src/service/action-impl.ActionInvocation=} opt_invocation\n   * @return {!Promise}\n   */\n  maybeSetConsentPurposeDefaults_(action, opt_invocation) {\n    if (\n      !this.isGranularConsentExperimentOn_ ||\n      typeof opt_invocation?.args?.purposeConsentDefault !== 'boolean'\n    ) {\n      return Promise.resolve();\n    }\n    if (action === ACTION_TYPE.DISMISS) {\n      dev.warn(TAG, 'Dismiss cannot have a `purposeConsentDefault` parameter.');\n      return Promise.resolve();\n    }\n\n    // At this point, this.getPurposeConsentRequired_()\n    // should always be resolved, so no need to worry about\n    // a race here.\n    return this.getPurposeConsentRequired_().then((purposeConsentRequired) => {\n      if (!purposeConsentRequired || !purposeConsentRequired.length) {\n        return;\n      }\n      const defaultPurposes = {};\n      const purposeValue = opt_invocation['args']['purposeConsentDefault'];\n      purposeConsentRequired.forEach((purpose) => {\n        defaultPurposes[purpose] = purposeValue;\n      });\n      this.consentStateManager_.updateConsentInstancePurposes(\n        defaultPurposes,\n        true\n      );\n    });\n  }\n\n  /**\n   * Handle the prompt action to re-prompt.\n   * Accpet arg expireCache=true\n   * @param {!../../../src/service/action-impl.ActionInvocation} invocation\n   */\n  handleReprompt_(invocation) {\n    const {args} = invocation;\n    if (args && args['expireCache'] === true) {\n      this.consentStateManager_.setDirtyBit();\n    }\n    this.scheduleDisplay_(true);\n  }\n\n  /**\n   * Handle the setting a purpose in the state manager.\n   * Accpet all args with booleans as values.\n   * @param {!../../../src/service/action-impl.ActionInvocation} invocation\n   */\n  handleSetPurpose_(invocation) {\n    if (\n      !invocation ||\n      !invocation['args'] ||\n      !Object.keys(invocation['args']).length\n    ) {\n      dev().error(TAG, 'Must have arugments for `setPurpose`.');\n      return;\n    }\n    const {args} = invocation;\n    if (this.isReadyToHandleAction_()) {\n      this.validatePurposeConsents_(args);\n      this.consentStateManager_.updateConsentInstancePurposes(args);\n    }\n  }\n\n  /**\n   * Init the amp-consent by registering and initiate consent instance.\n   */\n  init_() {\n    this.passSharedData_();\n    this.syncRemoteConsentState_();\n    this.maybeSetUpTcfPostMessageProxy_();\n\n    this.getConsentRequiredPromise_()\n      .then((isConsentRequired) => {\n        return this.initPromptUI_(isConsentRequired);\n      })\n      .then((isPostPromptUIRequired) => {\n        if (isPostPromptUIRequired) {\n          this.handlePostPromptUI_();\n        }\n        this.consentPolicyManager_.enableTimeout();\n      })\n      .catch((unusedError) => {\n        // TODO: Handle errors\n      });\n\n    this.enableInteractions_();\n  }\n\n  /**\n   * Returns a promise that resolve when amp-consent knows\n   * if the consent is required.\n   * @return {!Promise<boolean>}\n   */\n  getConsentRequiredPromise_() {\n    return this.consentStateManager_\n      .getConsentInstanceInfo()\n      .then((storedInfo) => {\n        if (hasStoredValue(storedInfo)) {\n          return Promise.resolve(true);\n        }\n        const consentRequired = this.consentConfig_['consentRequired'];\n        if (typeof consentRequired === 'boolean') {\n          return Promise.resolve(consentRequired);\n        }\n        return this.getConsentRemote_().then((consentResponse) => {\n          if (!consentResponse) {\n            return false;\n          }\n          // `promptIfUnknown` is a legacy field\n          return consentResponse['consentRequired'] !== undefined\n            ? !!consentResponse['consentRequired']\n            : !!consentResponse['promptIfUnknown'];\n        });\n      });\n  }\n\n  /**\n   * Blindly pass sharedData\n   */\n  passSharedData_() {\n    const responsePromise = this.getConsentRemote_();\n    const sharedDataPromise = responsePromise.then((response) => {\n      if (!response || response['sharedData'] === undefined) {\n        return null;\n      }\n      return response['sharedData'];\n    });\n\n    this.consentStateManager_.setConsentInstanceSharedData(sharedDataPromise);\n  }\n\n  /**\n   * Clear cache for server side decision and then sync.\n   */\n  syncRemoteConsentState_() {\n    this.getConsentRemote_().then((response) => {\n      if (!response) {\n        return;\n      }\n      // Ideally we should fallback to true if either are true.\n      const expireCache =\n        response['expireCache'] || response['forcePromptOnNext'];\n      if (expireCache) {\n        this.consentStateManager_.setDirtyBit();\n      }\n\n      // Decision from promptUI takes precedence over consent decision from response\n      if (\n        !!response['consentRequired'] &&\n        !this.consentStateChangedViaPromptUI_\n      ) {\n        this.updateCacheIfNotNull_(\n          response['consentStateValue'],\n          response['consentString'] || undefined,\n          response['consentMetadata'],\n          response['purposeConsents']\n        );\n      }\n    });\n  }\n\n  /**\n   * Sync with local storage if consentRequired is true.\n   *\n   * @param {?string=} responseStateValue\n   * @param {?string=} responseConsentString\n   * @param {?JsonObject=} responseMetadata\n   * @param {?JsonObject=} responsePurposeConsents\n   */\n  updateCacheIfNotNull_(\n    responseStateValue,\n    responseConsentString,\n    responseMetadata,\n    responsePurposeConsents\n  ) {\n    const consentStateValue = convertEnumValueToState(responseStateValue);\n    // consentStateValue and consentString are treated as a pair that will update together\n    if (consentStateValue !== null) {\n      if (\n        this.isGranularConsentExperimentOn_ &&\n        responsePurposeConsents &&\n        isObject(responsePurposeConsents) &&\n        Object.keys(responsePurposeConsents).length\n      ) {\n        this.validatePurposeConsents_(responsePurposeConsents);\n        this.consentStateManager_.updateConsentInstancePurposes(\n          responsePurposeConsents\n        );\n      }\n      this.consentStateManager_.updateConsentInstanceState(\n        consentStateValue,\n        responseConsentString,\n        this.validateMetadata_(responseMetadata)\n      );\n    }\n  }\n\n  /**\n   * Get localStored consent info, and send request to get consent from endpoint\n   * if there is checkConsentHref specified.\n   * @return {!Promise<?JsonObject>}\n   */\n  getConsentRemote_() {\n    if (this.remoteConfigPromise_) {\n      return this.remoteConfigPromise_;\n    }\n    if (!this.consentConfig_['checkConsentHref']) {\n      this.remoteConfigPromise_ = Promise.resolve(null);\n    } else {\n      const storeConsentPromise =\n        this.consentStateManager_.getLastConsentInstanceInfo();\n      this.remoteConfigPromise_ = storeConsentPromise.then((storedInfo) => {\n        // Note: Expect the request to look different in following versions.\n        const request = /** @type {!JsonObject} */ ({\n          'consentInstanceId': this.consentId_,\n          'consentStateValue': getConsentStateValue(storedInfo['consentState']),\n          'consentMetadata': storedInfo['consentMetadata'],\n          'consentString': storedInfo['consentString'],\n          'isDirty': !!storedInfo['isDirty'],\n          'matchedGeoGroup': this.matchedGeoGroup_,\n        });\n        if (this.isGranularConsentExperimentOn_) {\n          request['purposeConsents'] = storedInfo['purposeConsents'];\n        }\n        if (this.consentConfig_['clientConfig']) {\n          request['clientConfig'] = this.consentConfig_['clientConfig'];\n        }\n        const init = {\n          credentials: 'include',\n          method: 'POST',\n          body: request,\n        };\n        const href = this.consentConfig_['checkConsentHref'];\n        assertHttpsUrl(href, this.element);\n        const ampdoc = this.getAmpDoc();\n        const sourceBase = getSourceUrl(ampdoc.getUrl());\n        const resolvedHref = resolveRelativeUrl(href, sourceBase);\n        const xhrService = Services.xhrFor(this.win);\n        return ampdoc.whenFirstVisible().then(() =>\n          expandConsentEndpointUrl(this.element, resolvedHref).then(\n            (expandedHref) =>\n              xhrService.fetchJson(expandedHref, init).then((res) =>\n                xhrService\n                  .xssiJson(res, this.consentConfig_['xssiPrefix'])\n                  .catch((e) => {\n                    user().error(\n                      TAG,\n                      'Could not parse the `checkConsentHref` response.',\n                      e\n                    );\n                  })\n              )\n          )\n        );\n      });\n    }\n    return this.remoteConfigPromise_;\n  }\n\n  /**\n   * Returns true if we have stored the granular consent values\n   * for the required purposes.\n   * @param {ConsentInfoDef} consentInfo\n   * @return {!Promise<boolean>}\n   */\n  checkGranularConsentRequired_(consentInfo) {\n    if (!this.isGranularConsentExperimentOn_) {\n      return Promise.resolve(true);\n    }\n    return this.getPurposeConsentRequired_().then((purposeConsentRequired) => {\n      // True if there are no required purposes\n      if (!purposeConsentRequired?.length) {\n        this.consentStateManager_.hasAllPurposeConsents();\n        return true;\n      }\n      const storedPurposeConsents = consentInfo['purposeConsents'];\n      // False if there are no stored purposes\n      if (\n        !storedPurposeConsents ||\n        Object.keys(storedPurposeConsents).length <\n          purposeConsentRequired.length\n      ) {\n        return false;\n      }\n      // Check if we have a stored consent for each purpose required\n      for (let i = 0; i < purposeConsentRequired.length; i++) {\n        const purpose = purposeConsentRequired[i];\n        if (!hasOwn(storedPurposeConsents, purpose)) {\n          return false;\n        }\n      }\n      this.consentStateManager_.hasAllPurposeConsents();\n      return true;\n    });\n  }\n\n  /**\n   * Get `purposeConsentRequired` from consent config,\n   * or from `checkConsentHref` response.\n   * @return {!Promise<?Array>}\n   */\n  getPurposeConsentRequired_() {\n    if (this.purposeConsentRequired_) {\n      return this.purposeConsentRequired_;\n    }\n    const inlinePurposes = this.consentConfig_['purposeConsentRequired'];\n    if (isArray(inlinePurposes)) {\n      this.purposeConsentRequired_ = Promise.resolve(inlinePurposes);\n    } else {\n      this.purposeConsentRequired_ = this.getConsentRemote_().then(\n        (response) => {\n          if (!response || !isArray(response['purposeConsentRequired'])) {\n            return null;\n          }\n          return response['purposeConsentRequired'];\n        }\n      );\n    }\n    return this.purposeConsentRequired_;\n  }\n\n  /**\n   * Determines if we should show UI based on our stored consent values.\n   * @return {!Promise<boolean>}\n   */\n  hasRequiredConsents_() {\n    return this.consentStateManager_.getConsentInstanceInfo().then((info) => {\n      // Check that we have global consent\n      if (hasStoredValue(info)) {\n        // Then check granular consent\n        return this.checkGranularConsentRequired_(info);\n      }\n      return Promise.resolve(false);\n    });\n  }\n\n  /**\n   * Handle Prompt UI.\n   * @param {boolean} isConsentRequired\n   * @return {Promise<boolean>}\n   */\n  initPromptUI_(isConsentRequired) {\n    this.consentUI_ = new ConsentUI(\n      this,\n      /** @type {!JsonObject} */ (\n        devAssert(this.consentConfig_, 'consent config not found')\n      )\n    );\n\n    // Get current consent state\n    return this.hasRequiredConsents_().then((hasConsents) => {\n      if (hasConsents) {\n        // Has user stored value, no need to prompt\n        return true;\n      }\n      if (!isConsentRequired) {\n        // no need to prompt if remote reponse say so\n        // Also no need to display postPromptUI\n        this.consentStateManager_.updateConsentInstanceState(\n          CONSENT_ITEM_STATE.NOT_REQUIRED\n        );\n        return false;\n      }\n      // Prompt\n      this.scheduleDisplay_(false);\n      return true;\n      // TODO(@zhouyx):\n      // Race condition on consent state change between schedule to\n      // display and display. Add one more check before display\n    });\n  }\n\n  /**\n   * Handles the display of postPromptUI\n   */\n  handlePostPromptUI_() {\n    if (!this.postPromptUI_) {\n      return;\n    }\n\n    this.notificationUiManager_.onQueueEmpty(() => {\n      this.vsync_.mutate(() => {\n        this.postPromptUI_.show(false);\n        // Will need to scheduleLayout for postPromptUI\n        // upon request for using AMP component.\n      });\n    });\n\n    this.notificationUiManager_.onQueueNotEmpty(() => {\n      this.vsync_.mutate(() => {\n        this.postPromptUI_.hide();\n      });\n    });\n  }\n\n  /**\n   * @return {?ConsentStateManager}\n   * @visibleForTesting\n   */\n  getConsentStateManagerForTesting() {\n    return this.consentStateManager_;\n  }\n\n  /**\n   * @return {!Promise<boolean>}\n   * @visibleForTesting\n   */\n  getConsentRequiredPromiseForTesting() {\n    return this.getConsentRequiredPromise_();\n  }\n\n  /**\n   * @return {boolean}\n   * @visibleForTesting\n   */\n  getIsPromptUiOnForTesting() {\n    return this.isPromptUiOn_;\n  }\n\n  /**\n   * Ensure purpose consents to be set are valid.\n   *\n   * @param {!Object} purposeObj\n   */\n  validatePurposeConsents_(purposeObj) {\n    const purposeKeys = Object.keys(purposeObj);\n    purposeKeys.forEach((purposeKey) => {\n      dev().assertBoolean(\n        purposeObj[purposeKey],\n        '`setPurpose` values must be booleans.'\n      );\n    });\n  }\n\n  /**\n   * Convert valid opt_metadta into ConsentMetadataDef\n   * @param {JsonObject=} opt_metadata\n   * @return {ConsentMetadataDef|undefined}\n   */\n  validateMetadata_(opt_metadata) {\n    if (!opt_metadata) {\n      return;\n    }\n    if (!isObject(opt_metadata)) {\n      user().error(TAG, 'CMP metadata is not an object.');\n      return;\n    }\n    assertMetadataValues(opt_metadata);\n    return constructMetadata(\n      opt_metadata['consentStringType'],\n      opt_metadata['additionalConsent'],\n      opt_metadata['gdprApplies'],\n      opt_metadata['purposeOne']\n    );\n  }\n\n  /**\n   * Maybe set up the __tfcApiLocator window and listeners.\n   *\n   * The window is a dummy iframe that signals to 3p iframes\n   * that the document supports the tcfPostMessage API.\n   */\n  maybeSetUpTcfPostMessageProxy_() {\n    if (\n      !this.isTcfPostMessageProxyExperimentOn_ ||\n      !this.consentConfig_['exposesTcfApi']\n    ) {\n      return;\n    }\n    // Check if __tcfApiLocator API already exists (dirty AMP)\n    if (!this.win.frames[TCF_API_LOCATOR]) {\n      this.tcfApiCommandManager_ = new TcfApiCommandManager(\n        this.consentPolicyManager_\n      );\n      // Add window listener for 3p iframe PostMessages\n      this.win.addEventListener('message', this.boundHandleIframeMessages_);\n\n      // Set up the __tcfApiLocator window to singal PostMessage support\n      const iframe = this.element.ownerDocument.createElement('iframe');\n      iframe.setAttribute('name', TCF_API_LOCATOR);\n      toggle(iframe, false);\n      iframe.setAttribute('aria-hidden', true);\n      this.element.appendChild(dev().assertElement(iframe));\n    }\n  }\n\n  /**\n   * Listen to iframe messages and handle events.\n   *\n   * The listeners will listen for post messages from 3p\n   * iframes that have the following structure:\n   * {\n   *  \"__tcfapiCall\": {\n   *    \"command\": cmd,\n   *    \"parameter\": arg,\n   *    \"version\": v,\n   *    \"callId\": id,\n   *  }\n   * }\n   *\n   * @param {!Event} event\n   */\n  handleIframeMessages_(event) {\n    const data = getData(event);\n\n    if (!data || !data['__tcfapiCall']) {\n      return;\n    }\n    this.tcfApiCommandManager_.handleTcfCommand(data, event.source);\n  }\n}\n\nAMP.extension('amp-consent', '0.1', (AMP) => {\n  AMP.registerElement('amp-consent', AmpConsent, CSS);\n  AMP.registerServiceForDoc(NOTIFICATION_UI_MANAGER, NotificationUiManager);\n  AMP.registerServiceForDoc(CONSENT_STATE_MANAGER, ConsentStateManager);\n  AMP.registerServiceForDoc(CONSENT_POLICY_MANAGER, ConsentPolicyManager);\n});\n"],
  "mappings": "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",
  "names": []
}
